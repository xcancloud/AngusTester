import { EnumMessage, EvalWorkloadMethod, Priority, enumUtils } from '@xcan-angus/infra';
import { BugLevel, ExecResult, TaskStatus, TaskType, TestType, AssociateUserType } from '@/enums/enums';
import { AttachmentInfo, ProgressInfo, TagInfo } from '@/types/types';

import { CaseInfo } from '@/views/test/types';

/** Task type name mapping for UI display */
export const getTaskTypeName = () => {
  return enumUtils.enumToMap(TaskType);
};

/**
 * Task information interface containing all task-related data
 */
export type TaskInfo = {
  id: string;
  name: string;
  code: string;
  projectId: string;
  projectName: string;
  sprintId: string;
  sprintName: string;
  sprintAuth: boolean;
  moduleId: string;
  moduleName: string;
  backlog: boolean;
  priority: EnumMessage<Priority>;
  status: EnumMessage<TaskStatus>;
  progress: ProgressInfo;
  taskType: EnumMessage<TaskType>;
  bugLevel: EnumMessage<BugLevel>;
  testType: EnumMessage<TestType>;
  softwareVersion: string;
  startDate: string;
  deadlineDate: string;
  confirmedDate: string;
  canceledDate: string;
  completedDate: string;
  processedDate: string;
  assigneeId: string;
  assigneeName: string;
  assigneeAvatar: string;
  confirmerId: string;
  confirmerName: string;
  testerId: string;
  testerName: string;
  escapedBug: boolean;
  unplanned: boolean;
  parentTaskId: string;
  parentTaskName: string;
  evalWorkloadMethod: EnumMessage<EvalWorkloadMethod>;
  evalWorkload: number;
  actualWorkload: number;
  failNum: string;
  totalNum: string;
  attachments?: AttachmentInfo[] | undefined;
  description: string;
  currentAssociateType: EnumMessage<AssociateUserType>[];
  confirmTask: boolean;
  overdue: boolean;
  targetId: string;
  targetName: string;
  targetParentId: string;
  targetParentName: string;
  scriptId: string;
  scriptName: string;
  execResult: EnumMessage<ExecResult>;
  execFailureMessage: string;
  execTestNum: string;
  execTestFailureNum: string;
  execId: string;
  execName: string;
  execBy: string;
  execByName: string;
  execDate: string;
  favourite: boolean;
  follow: boolean;
  tags: TagInfo[];
  tenantId: string;
  createdBy: string;
  createdByName: string;
  createdDate: string;
  avatar: string;
  lastModifiedBy: string;
  lastModifiedByName: string;
  lastModifiedDate: string;
}

export type TaskDetail = {
  id: string;
  name: string;
  code: string;
  projectId: string;
  projectName: string;
  sprintId: string;
  sprintName: string;
  sprintAuth: boolean;
  moduleId: string;
  moduleName: string;
  backlog: boolean;
  priority: EnumMessage<Priority>;
  status: EnumMessage<TaskStatus>;
  progress: ProgressInfo;
  subTaskProgress: ProgressInfo;
  taskType: EnumMessage<TaskType>;
  bugLevel: EnumMessage<BugLevel>;
  testType: EnumMessage<TestType>;
  softwareVersion: string;
  startDate: string;
  deadlineDate: string;
  confirmedDate: string;
  canceledDate: string;
  completedDate: string;
  processedDate: string;
  assigneeId: string;
  assigneeName: string;
  assigneeAvatar: string;
  confirmerId: string;
  confirmerName: string;
  testerId: string;
  testerName: string;
  escapedBug: boolean;
  unplanned: boolean;
  parentTaskId: string;
  parentTaskName: string;
  evalWorkloadMethod: EnumMessage<EvalWorkloadMethod>;
  evalWorkload: number;
  actualWorkload: number;
  failNum: string;
  totalNum: string;
  attachments?: AttachmentInfo[] | undefined;
  description: string;
  currentAssociateType: EnumMessage<AssociateUserType>[];
  confirmTask: boolean;
  overdue: boolean;
  targetId: string;
  targetName: string;
  targetParentId: string;
  targetParentName: string;
  scriptId: string;
  scriptName: string;
  execResult: EnumMessage<ExecResult>;
  execFailureMessage: string;
  execTestNum: string;
  execTestFailureNum: string;
  execId: string;
  execName: string;
  execBy: string;
  execByName: string;
  execDate: string;
  favourite: boolean;
  follow: boolean;
  tags: TagInfo[];
  refTaskInfos: TaskInfo[];
  refCaseInfos: CaseInfo[];
  subTaskInfos: TaskInfo[];
  tenantId: string;
  createdBy: string;
  createdByName: string;
  createdDate: string;
  avatar: string;
  lastModifiedBy: string;
  lastModifiedDate: string;
  linkUrl?: string;
}
