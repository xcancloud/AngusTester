{
  "apis": {
    "welcome": {
      "title": "Welcome to Angus API!",
      "description": "Here you and your team can complete the following work:",
      "features": [
        "Edit and debug APIs online;",
        "Manage projects, services, APIs and test tasks;",
        "Conduct API functional testing, performance testing and stability testing to ensure delivery of stable systems that meet business requirements."
      ]
    },
    "quickAccess": {
      "title": "Quick Access",
      "debug": {
        "title": "Debug API",
        "description": "Edit and debug APIs online quickly.",
        "action": "Debug"
      },
      "addProject": {
        "title": "Add Project/Service",
        "description": "Organize APIs through projects or services, projects can contain multiple services (such as microservices) and APIs, services can only contain APIs.",
        "addProject": "Add Project",
        "addService": "Add Service"
      },
      "import": {
        "title": "Import Service from File",
        "description": "Import OpenAPI or Postman API YAML files or JSON files.",
        "action": "Import",
        "template": "Import {type} from file"
      }
    },
    "navigation": {
      "myApis": "My APIs",
      "projects": "Projects",
      "services": "Services",
      "apis": "APIs",
      "scenarios": "Scenarios",
      "myTasks": "My Tasks",
      "favorites": "Favorites",
      "follows": "Follows",
      "activities": "Activities",
      "apiSamples": "API Sample Collection"
    },
    "statistics": {
      "today": "Today:",
      "lastWeek": "Last Week:"
    },
    "actions": {
      "cancelAllFavorites": "Cancel All Favorites",
      "cancelAllFollows": "Cancel All Follows",
      "projectConfig": "Project Configuration"
    },
    "configuration": {
      "sync": "Sync Configuration",
      "security": "Security Scheme Configuration",
      "server": "Server Configuration",
      "performance": "Service Performance Metrics",
      "share": "Add Share",
      "variables": "Define Variables",
      "syncDescription": "Automatically import external OpenAPI to current {type}",
      "securityDescription": "Define security schemes (Authorization) that can be used by all APIs under current {type}",
      "serverDescription": "Define servers (Server URL) that can be used by all APIs under current project/service",
      "performanceDescription": "Set default performance metrics for APIs under {type}, performance metrics will affect performance test pass rate; if you want to set performance metrics for a specific API separately, you can set it in API performance configuration",
      "shareDescription": "Through sharing, you can authorize others to view API documentation and debug APIs within a specified time",
      "variablesDescription": "Through defining variables, you can reuse a parameter value or control condition execution"
    },
    "search": {
      "taskName": "Search task name",
      "scenario": "Search scenario"
    },
    "messages": {
      "cancelAllFavoritesSuccess": "Cancel all favorites successful",
      "cancelAllFollowsSuccess": "Cancel all follows successful",
      "noFavorites": "No favorites",
      "noFollows": "No follows",
      "noData": "No data",
      "cancelSuccess": "Cancel successful",
      "cancelFavorite": "Cancel favorite",
      "cancelFollow": "Cancel follow",
      "importProject": "Import project",
      "importSuccess": "Import successful"
    },
    "columns": {
      "createdTime": "Created Time",
      "executionId": "Execution ID",
      "executionStatus": "Execution Status",
      "taskStatus": "Task Status",
      "testResult": "Test Result",
      "dueTime": "Due Time",
      "priority": "Priority"
    }
  },
  "service": {
    "serverConfig": {
      "title": "Server Configuration",
      "hints": "Define servers (Server URL) that can be used by all APIs under current service, maximum 50 servers can be added.",
      "actions": {
        "addServerDemo": "Server Example",
        "addServer": "Server",
        "updateToApis": "Update to Associated APIs",
        "edit": "Edit",
        "delete": "Delete",
        "cancel": "Cancel",
        "save": "Save",
        "addVariable": "Add Variable",
        "deleteVariable": "Delete Variable"
      },
      "messages": {
        "updateToApisSuccess": "Successfully updated to associated APIs",
        "confirmDelete": "Confirm deletion of this server?",
        "configError": "Server configuration error, please check and correct before saving.",
        "serverUrlExists": "Server URL already exists, please re-enter",
        "variableNotRepeat": "Variables in Server URL cannot be repeated",
        "variableNameRepeat": "Variable name is duplicated",
        "variableValueRepeat": "Variable value is duplicated"
      },
      "form": {
        "url": "URL",
        "urlPlaceholder": "URL prefix pointing to target host, e.g.: https://{env}.xcan.cloud:{prot}/{path}",
        "description": "Description",
        "descriptionPlaceholder": "Server description, maximum 400 characters",
        "variables": "Variables",
        "variableName": "Name",
        "variableNamePlaceholder": "Variable name, maximum 100 characters",
        "variableValue": "Value",
        "variableValuePlaceholder": "Variable value, maximum 400 characters",
        "variableDescription": "Description",
        "variableDescriptionPlaceholder": "Variable description, maximum 400 characters",
        "default": "Default"
      },
      "tips": {
        "maxVariables": "Maximum 50 variables can be added",
        "variableNameNotRepeat": "Variable names cannot be duplicated",
        "variableValueNotRepeat": "Values of the same variable cannot be duplicated"
      },
      "columns": {
        "url": "URL",
        "description": "Description",
        "variables": "Variables",
        "name": "Name",
        "value": "Value",
        "description": "Description"
      }
    },
    "shareModal": {
      "title": "Share Management",
      "actions": {
        "addShare": "Add Share",
        "edit": "Edit",
        "delete": "Delete",
        "copy": "Copy",
        "confirm": "Confirm",
        "cancel": "Cancel",
        "loadMore": "Load More"
      },
      "messages": {
        "deleteSuccess": "Share record deleted successfully",
        "passwordRequired": "Password cannot be empty",
        "updatePasswordSuccess": "Password updated successfully",
        "copySuccess": "Copied successfully"
      },
      "form": {
        "link": "Link",
        "password": "Password",
        "validityPeriod": "Validity Period",
        "permanent": "Permanent"
      },
      "copyFormat": {
        "withPassword": "Link: {url} Password: {password}",
        "withoutPassword": "Link: {url}"
      }
    },
    "statusModal": {
      "title": "Modify Status",
      "messages": {
        "updateStatusSuccess": "Status updated successfully"
      },
      "form": {
        "status": "Status"
      },
      "tips": {
        "serviceStatusChange": "Modifying service status will synchronously modify the status of all APIs under the service.",
        "servicePublish": "Publishing a service will publish all APIs under the service. Published services and APIs cannot be modified or saved.",
        "apiPublish": "After publishing an API, the basic information and parameter information of the API cannot be modified or saved"
      }
    },
    "syncConfig": {
      "title": "Sync Configuration",
      "hints": "Automatically import external OpenAPI to current service, maximum 10 configurations allowed.",
      "actions": {
        "add": "Add",
        "demo": "Demo",
        "syncAll": "Sync All",
        "edit": "Edit",
        "sync": "Sync",
        "test": "Test",
        "delete": "Delete",
        "save": "Save",
        "cancel": "Cancel",
        "clear": "Clear",
        "addAuth": "Add",
        "deleteAuth": "Delete"
      },
      "messages": {
        "deleteSuccess": "Deleted successfully",
        "testSuccess": "Configuration test passed",
        "syncSuccess": "Sync successful",
        "syncAllSuccess": "Sync all successful",
        "saveSuccess": "Saved successfully",
        "nameExists": "Name already exists",
        "authNameExists": "Authentication name already exists",
        "noValidConfig": "No valid sync configuration found, please save data first",
        "dataNotSaved": "Data not saved, please save data or cancel editing first",
        "inputContent": "Please enter content"
      },
      "form": {
        "name": "Name",
        "namePlaceholder": "Name",
        "source": "Source",
        "address": "Address",
        "addressPlaceholder": "Address",
        "duplicateStrategy": "Strategy when encountering duplicates",
        "cover": "Cover",
        "ignore": "Ignore",
        "deleteWhenNotExist": "Whether to delete local APIs when sync APIs do not exist",
        "yes": "Yes",
        "no": "No",
        "auth": "Authentication",
        "authRequired": "Required when sync address is protected. Maximum 10 allowed.",
        "paramName": "Parameter Name",
        "paramPosition": "Parameter Position",
        "paramValue": "Parameter Value",

        "positionPlaceholder": "Position",
        "valuePlaceholder": "Value"
      },
      "tips": {
        "addDemo": "Add demo data",
        "syncAllTip": "Only sync saved configurations",
        "lastSync": "Last Sync"
      },
      "options": {
        "header": "header",
        "query": "query"
      }
    },
    "tag": {
      "hints": {
        "main": "Tags serve as additional metadata for APIs to group them. An API can have multiple tags, meaning it belongs to multiple groups. The order of tag definitions will be consistent with the order of APIs grouped by tags and the order of interface display in documentation.",
        "sub": "Each tag name must be unique; not all interfaces need to be associated with tags; maximum 2000 tags can be added."
      },
      "actions": {
        "add": "Add",
        "edit": "Edit",
        "delete": "Delete",
        "save": "Save",
        "cancel": "Cancel",
        "expand": "Expand",
        "collapse": "Collapse"
      },
      "messages": {
        "deleteSuccess": "Deleted successfully",
        "saveSuccess": "Saved successfully",
        "nameExists": "Tag name already exists",
        "dataNotSaved": "Data not saved, please save data or cancel editing first"
      },
      "form": {
        "name": "Name",
        "namePlaceholder": "Please enter tag name",
        "description": "Description",
        "descriptionPlaceholder": "Enter description, supports Markdown syntax",
        "externalDocsUrl": "External Documentation URL",
        "externalDocsUrlPlaceholder": "Please enter external documentation URL",
        "externalDocsDescription": "External Documentation Description",
        "externalDocsDescriptionPlaceholder": "Enter description, supports Markdown syntax",
        "externalDocsLink": "External Documentation Link"
      },
      "validation": {
        "enterUrl": "Please enter URL address",
        "enterCorrectUrl": "Please enter correct URL address"
      }
    },
    "translateModal": {
      "title": "Translation",
      "description": {
        "title": "OpenAPI Translation Instructions",
        "useCases": {
          "title": "Use Cases",
          "items": [
            "Provide support for multilingual API documentation",
            "Internationalize API services",
            "Cross-regional API service deployment",
            "Generate multilingual developer documentation"
          ]
        },
        "notes": {
          "title": "Notes",
          "items": [
            "AngusTester will use DeepSeek for translation by default",
            "Translation is processed asynchronously, you will receive a notification message when completed",
            "Translation process may take from a few minutes to several hours, depending on API scale",
            "After translation is completed, you can view it in \"APIs → Services\""
          ]
        }
      },
      "configuration": {
        "title": "OpenAPI Translation Configuration",
        "service": "API Service",
        "servicePlaceholder": "Please select service",
        "sourceLanguage": "Source Language",
        "targetLanguage": "Target Language"
      },
      "actions": {
        "cancel": "Cancel",
        "submit": "Submit"
      },
      "messages": {
        "translateComplete": "Translation completed",
        "selectService": "Please select service"
      }
    },
    "timeline": {
      "labels": {
        "timeConsuming": "Time Consuming Items",
        "time": "Time",
        "totalTime": "Total Time Consuming"
      },
      "items": {
        "dnsLookup": "DNS Lookup",
        "tcpConnection": "TCP Connection",
        "ssl": "SSL",
        "requestSent": "Request Sent",
        "waiting": "Waiting",
        "contentDownload": "Content Download"
      }
    },
    "apiAuthorization": {
      "title": "Authentication Type",
      "types": {
        "noAuth": "No Authentication",
        "basicAuth": "Basic Auth",
        "bearerToken": "Bearer Token",
        "apiKey": "Api Key",
        "oauth2": "OAuth 2.0",
        "extends": "Public"
      },
      "extends": {
        "selectServiceSecurity": "Select Service Security Authentication"
      },
      "basic": {
        "username": "Username",
        "usernamePlaceholder": "Please enter username",
        "password": "Password",
        "passwordPlaceholder": "Please enter password"
      },
      "bearer": {
        "token": "Token",
        "tokenPlaceholder": "Please enter access token"
      },
      "oauth2": {
        "configMethod": "Configuration Method:",
        "existingToken": "Existing Token",
        "generateToken": "Generate Token",
        "accessToken": "Access Token",
        "type": "Type",
        "clientAuth": "Client Authentication",
        "getToken": "Get Token"
      },
      "apiKey": {
        "name": "Name",
        "value": "Value",
        "position": "Position"
      },
      "oauth2Fields": {
        "authorizationUrl": "Authorization URL",
        "callbackUrl": "Callback URL",
        "tokenUrl": "Access Token URL",
        "refreshUrl": "Refresh Token URL",
        "clientId": "Client ID",
        "clientSecret": "Client Secret",
        "username": "Username",
        "password": "Password",
        "encryptionMethod": "Encryption Method",
        "verificationCode": "Verification Code",
        "scope": "Scope"
      },
      "flowTypes": {
        "authorizationCode": "Authorization Code",
        "password": "Password Credentials",
        "implicit": "Implicit",
        "clientCredentials": "Client Credentials"
      },
      "clientAuthTypes": {
        "basicAuthHeader": "Send via Basic Auth Header",
        "requestBody": "Send via Request Body"
      },
      "encryptionTypes": {
        "sha256": "SHA-256",
        "plain": "Plain"
      },
      "messages": {
        "authorizationFailed": "Authorization failed Couldn't complete authentication.",
        "proxyNotConnected": "Proxy not connected, please check proxy configuration",
        "maxLengthTip": "Maximum {maxLength} characters allowed"
      }
    },
    "apiExecDetail": {
      "tabs": {
        "functionalTest": "Functional Test",
        "performanceTest": "Performance Test",
        "stabilityTest": "Stability Test",
        "customTest": "Custom Test",
        "testTask": "Test Task"
      },
      "testSummary": {
        "allTests": "All Tests",
        "successRate": "Success Rate",
        "functional": "Functional",
        "performance": "Performance",
        "stability": "Stability",
        "custom": "Custom",
        "testInterfaces": "Test Interfaces",
        "resultIndicators": "Result Indicators",
        "nonStandard": "Non-Standard"
      },
      "testStatus": {
        "untested": "Untested",
        "passed": "Passed",
        "notPassed": "Not Passed"
      },
      "indicators": {
        "total": "Total",
        "success": "Success",
        "failed": "Failed",
        "disabled": "Disabled",
        "tps": "Transactions Per Second (TPS)",
        "responseTime": "Response Time (P90)",
        "errorRate": "Error Rate"
      },
      "task": {
        "noData": "No Data",
        "columns": {
          "code": "Code",
          "name": "Name",
          "sprint": "Sprint",
          "priority": "Priority",
          "assignee": "Assignee",
          "confirmor": "Confirmor",
          "deadline": "Deadline"
        },
        "overdue": "Overdue"
      }
    },
    "mockApi": {
      "description": "Mock APIs can quickly generate and simulate the APIs you depend on, enabling parallel development and testing, thereby accelerating development speed, achieving more comprehensive testing, and delivering stable products or applications earlier. You can create corresponding mock interfaces for the current interface through two methods: \"Generate Mock API\" or \"Associate Mock API\". Mock interfaces will provide simulated data for convenient interface debugging and testing.",
      "columns": {
        "apiName": "API Name",
        "mockServiceName": "Mock Service Name",
        "method": "Method",
        "mockServiceHostUrl": "Service Address",
        "createdBy": "Created By",
        "createdDate": "Created Date"
      },
      "actions": {
        "cancelAssociation": "Cancel Association",
        "generateMockApi": "Generate Mock API",
        "associateMockApi": "Associate Mock API"
      },
      "messages": {
        "generateSuccess": "Mock API generated successfully",
        "associateSuccess": "Association successful",
        "cancelAssociationSuccess": "Association cancelled successfully"
      },
      "createTypes": {
        "generate": {
          "title": "Generate Mock API",
          "description": "Create a new mock version based on the current interface. After creation, you can use the Mock API for data simulation and status testing, thereby achieving more efficient interface debugging."
        },
        "associate": {
          "title": "Associate Mock API",
          "description": "Associate the current interface with an existing Mock service interface. After association, data simulation and status testing can be performed during interface debugging."
        }
      },
      "modal": {
        "generateTitle": "Generate Mock API",
        "associateTitle": "Associate Mock API",
        "mockServicePlaceholder": "Please select Mock service",
        "mockApiPlaceholder": "Please select Mock API",
        "summaryPlaceholder": "Please enter the corresponding Mock API name, if not specified, the current interface name will be used by default",
        "generateHint": "Generate Mock API based on the current interface.",
        "associateHint": "Associate with existing interfaces under Mock service."
      },
      "statistics": {
        "requestNum": "Request Count",
        "pushbackNum": "Pushback Count",
        "simulateErrorNum": "Simulate Error Count",
        "successNum": "Success Count",
        "exceptionNum": "Exception Count"
      }
    },
    "apiRequestBody": {
      "contentType": "Content-Type",
      "actions": {
        "importComponent": "Import Component",
        "copyComponent": "Copy Component",
        "format": "Format",
        "compress": "Compress",
        "uploadFile": "Upload File",
        "cancelReference": "Cancel Reference"
      },
      "tips": {
        "fileSizeLimit": "Interface debugging supports up to 100MB files, files within 10MB can be saved, exceeding this limit will not be saved.",
        "componentReference": "Component Reference: {ref}"
      },
      "modal": {
        "title": "Component",
        "searchPlaceholder": "Search component name",
        "columns": {
          "componentName": "Component Name",
          "modifiedBy": "Modified By",
          "modifiedTime": "Modified Time"
        }
      },
      "form": {
        "name": "Name",
        "namePlaceholder": "Please enter parameter name",
        "type": "Type",
        "typePlaceholder": "Please select parameter type",
        "required": "Required",
        "description": "Description",
        "descriptionPlaceholder": "Please enter description",
        "value": "Value",
        "valuePlaceholder": "Please enter debug value, maximum {maxLength} characters supported",
        "format": "Format",
        "formatPlaceholder": "Please select format",
        "example": "Example",
        "examplePlaceholder": "Please enter example value",
        "defaultValue": "Default Value",
        "defaultValuePlaceholder": "Please enter default value",
        "minLength": "Min Length",
        "minLengthPlaceholder": "Please enter minimum length",
        "maxLength": "Max Length",
        "maxLengthPlaceholder": "Please enter maximum length",
        "minimum": "Minimum",
        "minimumPlaceholder": "Please enter minimum value",
        "maximum": "Maximum",
        "maximumPlaceholder": "Please enter maximum value",
        "pattern": "Pattern",
        "patternPlaceholder": "Please enter regular expression",
        "enum": "Enum Values",
        "enumPlaceholder": "Please enter enum values, multiple values separated by commas",
        "variable": "Variable",
        "setVariable": "Set as Variable",
        "cancelVariable": "Cancel Variable"
      },
      "messages": {
        "fileUploadSuccess": "File uploaded successfully",
        "fileUploadFailed": "File upload failed",
        "fileRemoveSuccess": "File removed successfully",
        "formatSuccess": "Formatted successfully",
        "compressSuccess": "Compressed successfully",
        "componentImportSuccess": "Component imported successfully",
        "componentCopySuccess": "Component copied successfully",
        "setVariableSuccess": "Variable set successfully",
        "variableNameInvalid": "Name does not meet variable requirements, allows numbers, letters, !@$%^&*()_-+=./ etc.",
        "debugFileSizeLimit": "Total upload file size for request body during debugging cannot exceed 100MB"
      }
    },
    "apiRequestCookie": {
      "form": {
        "namePlaceholder": "Parameter Name",
        "inputNamePlaceholder": "Please enter parameter name",
        "valuePlaceholder": "Please enter debug value, maximum {maxLength} characters supported"
      },
      "actions": {
        "copyValue": "Copy Value"
      },
      "tips": {
        "componentReference": "Component Reference: {ref}"
      },
      "messages": {
        "copySuccess": "Successfully copied value to clipboard"
      }
    },
    "apiRequestHeader": {
      "form": {
        "namePlaceholder": "Parameter Name",
        "inputNamePlaceholder": "Please enter parameter name",
        "valuePlaceholder": "Please enter debug value, maximum {maxLength} characters supported"
      },
      "actions": {
        "copyValue": "Copy Value"
      },
      "tips": {
        "componentReference": "Component Reference: {ref}"
      },
      "messages": {
        "copySuccess": "Successfully copied value to clipboard"
      }
    },
    "apiRequestParams": {
      "form": {
        "namePlaceholder": "Parameter Name",
        "inputNamePlaceholder": "Please enter parameter name",
        "typePlaceholder": "Please select parameter type",
        "valuePlaceholder": "Please enter debug value, maximum {maxLength} characters supported"
      },
      "actions": {
        "copyValue": "Copy Value"
      },
      "tips": {
        "componentReference": "Component Reference: {ref}"
      },
      "messages": {
        "copySuccess": "Successfully copied value to clipboard"
      }
    },
    "apiServerPath": {
      "form": {
        "pathPlaceholder": "API path, starting with \"/\"",
        "serverPlaceholder": "Server address, URL prefix for API address"
      },
      "actions": {
        "sendRequest": "Send Request",
        "abortRequest": "Abort Request",
        "saveToUnarchived": "Save to Unarchived",
        "archive": "Archive",
        "generateCase": "Generate Case",
        "copyUrl": "Copy URL",
        "nextStep": "Next Step"
      },
      "tips": {
        "variableNotFound": "Variable not found, please define the variable first or refresh and try again",
        "default": "Default"
      },
      "labels": {
        "current": "Current",
        "public": "Public",
        "mock": "Mock",
        "history": "History"
      }
    }
  }
} 