{
  "apisHome": {
    "introduce": {
      "title": "About AngusTester APIs",
      "description": "Help developers and testers easily add, test, debug, and document APIs, ultimately helping enterprises achieve API assetization goals.",
      "features": [
        "Edit, debug, design, and document interfaces online;",
        "Manage services, interfaces, and interface test cases;",
        "Conduct api testing to ensure delivery of stable systems that meet business requirements."
      ]
    },
    "myApis": {
      "title": "My APIs",
      "emptyStates": {
        "noCreatedApis": "You haven't added any APIs yet, ",
        "addApiAction": "Add API",
        "noFollowedApis": "You have no followed apis",
        "noFavouriteApis": "You have no favorite apis"
      }
    },
    "myCreationSummary": {
      "title": "My Creations"
    },
    "resourceStatistics": {
      "title": "Resource Statistics"
    }
  },
  "service": {
    "title": "Service",
    "home": {
      "addApiTabName": "Add API",
      "authTabName": "Auth",
      "mockTabName": "Mock Service"
    },
    "service": {
      "deleteService": "Delete Service",
      "deleteServiceTip": "Deleting a service will delete all APIs under the service, as well as associated favorites, metrics, variables, and other information. Please confirm whether to delete?",
      "restartServiceTip": "All tasks under the service will be updated to \"Pending Test\", and related statistics and status will be cleared. Are you sure to restart the test task 「{name}」?",
      "reopenServiceTip": "All tasks under the service will be updated to \"Pending Test\", and statistics and status will not be cleared. Are you sure to reopen the test task 「{name}」?",
      "funcTestExecSmokeTip": "Execute the smoke test case for all APIs under the current service. If the smoke test script for the test service does not exist, the test script will be automatically generated based on the API smoke test case. If it exists, the corresponding test script will be started.",
      "funcTestExecSecurityTip": "Execute the security test case for all APIs under the current service. If the security test script for the test service does not exist, the test script will be automatically generated based on the API security test case. If it exists, the corresponding test script will be started.",
      "funcTestExecTip": "Execute the functional test for all APIs under the current service that are enabled for functional testing. If the test script does not exist, the test script will be automatically generated based on the API. If it exists, the corresponding test script will be started.",
      "perfTestExecTip": "Execute the performance test for all APIs under the current service that are enabled for performance testing. If the test script does not exist, the test script will be automatically generated based on the API. If it exists, the corresponding test script will be started.",
      "stabilityTestExecTip": "Execute the stability test for all APIs under the current service that are enabled for stability testing. If the test script does not exist, the test script will be automatically generated based on the API. If it exists, the corresponding test script will be started.",
      "deleteServiceSuccess": "Delete successful, you can view the deleted service in the recycle bin",
      "serviceNamePlaceholder": "Maximum 100 characters",
      "unarchivedTitle": "Unarchived",
      "searchServicePlaceholder": "Search service name",
      "actions": {
        "addApi": "Add API",
        "httpApi": "HTTP API",
        "webSocketApi": "WebSocket API",
        "syncConfig": "Sync Configuration",
        "securityConfig": "Security Scheme Configuration",
        "serverConfig": "Server Configuration",
        "localImport": "Local Import",
        "exportApi": "Export API",
        "mockService": "Mock Service",
        "translate": "Translate",
        "modifyStatus": "Modify Status",
        "batchModifyParams": "Batch Modify Parameters",
        "batchAddParams": "Batch Add Parameters",
        "batchDelParams": "Batch Delete Parameters",
        "batchEnabledParams": "Batch Enable Parameters",
        "batchDisabledParams": "Batch Disable Parameters",
        "batchModifyAuth": "Batch Modify Authentication",
        "batchModifyServer": "Batch Modify Server",
        "batchLinkVariable": "Batch Link Variables",
        "batchDelVariable": "Batch Unlink Variables",
        "batchLinkDataSet": "Batch Link Dataset",
        "batchDelDataSet": "Batch Unlink Dataset",
        "apiTestScript": "API Test Script",
        "generateTestScript": "Generate Test Script",
        "generateTestScriptTip": "Automatically generate functional, performance and stability test scripts for APIs.",
        "deleteTestScript": "Delete Test Script",
        "deleteTestScriptTip": "Delete functional, performance and stability test scripts for APIs.",
        "enableDisableTest": "Enable or Disable Test",
        "execServiceTest": "Execute Service Test",
        "execSmokeTest": "Execute Smoke Test",
        "execSecurityTest": "Execute Security Test",
        "execApiTest": "Execute API Test",
        "execFuncTest": "Execute Functional Test",
        "execPerfTest": "Execute Performance Test",
        "execStabilityTest": "Execute Stability Test",
        "apiTestTask": "API Test Task",
        "generateTestTask": "Generate Test Task",
        "generateTestTaskTip": "Generate functional, performance and stability test tasks.",
        "restartTestTask": "Restart Test Task",
        "restartTestTaskTip": "Update task to 'Pending' status, related statistics and status will be cleared.",
        "reopenTestTask": "Reopen Test Task",
        "reopenTestTaskTip": "Update task status to 'Pending', without clearing statistics and status.",
        "deleteTestTask": "Delete Test Task",
        "deleteTestTaskTip": "Delete functional, performance and stability test tasks for APIs, including test scripts."
      },
      "sortMenu": {
        "sortByTime": "Sort by time",
        "sortByName": "Sort by name",
        "sortByAdd": "Sort by add"
      },
      "localImportModal": {
        "title": "Local Import"
      },
      "exportServiceModal": {
        "exportTypeLabel": "Scope",
        "onlyApisComponentsLabel": "Components",
        "formatLabel": "Format",
        "serviceNamePlaceholder": "Search service name",
        "serviceLabel": "Service",
        "servicePlaceholder": "Please select service",
        "serviceNameLabel": "Service Name",
        "exportType_service": "By Service",
        "exportType_api": "By API",
        "compType_all": "All components of the service",
        "compType_api": "Only interface-related components",
        "serviceTip": "Please select service first",
        "apiTip": "Please select API first"
      },
      "batchModifyModal": {
        "title": "Batch Modify",
        "scopeLabel": "API Scope",
        "apisLabel": "Select API",
        "matchMethodLabel": "Request Method",
        "matchEndpointRegexLabel": "Match Path Expression",
        "matchEndpointRegexPlaceholder": "Please enter the matching regular expression, such as: .*?/search.*",
        "tagsLabel": "Select Tag",
        "tagsPlaceholder": "Select matching tag",
        "addParams": "Add Parameter",
        "modifyParams": "Modify Parameter",
        "deleteParams": "Delete Parameter",
        "enabledParams": "Enable Parameter",
        "disabledParams": "Disable Parameter",
        "modifyAuth": "Modify Auth",
        "modifyServer": "Modify Server",
        "linkVariable": "Link Variable",
        "unlinkVariable": "Unlink Variable",
        "linkDataset": "Link Dataset",
        "unlinkDataset": "Unlink Dataset",
        "delReferenceDatasetTip": "Please select at least one dataset",
        "delReferenceVariableTip": "Please select at least one variable",
        "referenceDatasetTip": "Please select at least one dataset",
        "referenceVariableTip": "Please select at least one variable",
        "matchMethodTip": "Please select at least one matching method",
        "selectedApisTip": "Please select at least one API",
        "modifyScope_all": "All APIs",
        "modifyScope_select": "Specified APIs",
        "modifyScope_match": "Matched APIs",
        "paramsNamePlaceholder": "Please enter parameter name"
      },
      "smokeResult": {
        "title": "Smoke Test",
        "testName": "Test Name",
        "testDate": "Test Date"
      },
      "securityResult": {
        "title": "Security Test",
        "testName": "Test Name",
        "testerDate": "Test Date"
      },
      "topAction": {
        "addService": "Add Service"
      },
      "foldAction": {
        "addService": "Add Service",
        "localImport": "Local Import"
      },
      "apiGroup": {
        "messages": {
          "serviceNotExist": "Service does not exist or you do not have permission to view"
        }
      },
      "execModalTitle": {
        "funcTestExecSmoke": "Execute Smoke Test",
        "funcTestExecSecurity": "Execute Security Test",
        "funcTestExec": "Execute Functional Test",
        "perfTestExec": "Execute Performance Test",
        "stabilityTestExec": "Execute Stability Test"
      },
      "authModel": {
        "title": "Service Permissions",
        "onTip": "After enabling \"Permission Control\", manual authorization is required to have corresponding operation permissions for the project. The default is to enable \"Permission Control\". Note: Authorizing a service does not authorize interface permissions under the service. If the authorization object does not have parent project permissions, it will automatically authorize view permissions.",
        "offTip": "After enabling \"No Permission Control\", all users in the account can view and operate the service and interfaces under the service."
      },
      "execTest": {
        "title": "Execute Test",
        "execSuccess": "Execution started successfully, please check the status and test results in the \"Execution\" section",
        "serviceConfigLabel": "Server Configuration",
        "serviceConfigDefault": "Use Default (Server Configuration When Generating Script)",
        "serviceConfigModify": "Modify Variable Configuration (Updated to Interface and Dynamic Http Extracted Variables)",
        "selectServicePlaceholder": "Please select server",
        "variableEmpty": "No Variables"
      },
      "addServiceModal": {
        "title": "Add Service",
        "namePlaceholder": "Please enter service name"
      }
    },
    "mock": {
      "description": "Mock can quickly generate and simulate the dependencies of the API, enabling faster development, more comprehensive testing, and earlier delivery of stable products or applications. Mock can also avoid dirty data problems caused by direct production system debugging.",
      "createTypeLabel": "Mock Method",
      "namePlaceholder": "Service identifier naming information, up to 100 characters",
      "mockNew": "Generate Mock Service",
      "mockUpdate": "Update Mock Service",
      "serviceDomainUrlPlaceholder": "After setting the domain name for the service, the mock interface can be accessed through the domain name",
      "servicePortPlaceholder": "The port listened by the service, the service cannot be modified after addition (1~65535)",
      "nodePlaceholder": "The node where the service runs, the service cannot be modified after addition",
      "servicePlaceholder": "Select or search service",
      "nameRule": "Please enter name",
      "servicePortRule": "Please enter port (1~65535)",
      "nodeRule": "Please select node"
    },
    "dataModel": {
      "updateSuccess": "Modify document successfully",
      "loadCompFail": "Component not found",
      "cloneSuccess": "Clone component successfully",
      "deleteSuccess": "Delete component successfully",
      "addComp": "Add component",
      "cloneComp": "Clone component",
      "compNameLabel": "New component name",
      "dataModelOpt": "Data Model",
      "requestBodyModelOpt": "Request Body",
      "descriptionPlaceholder": "Description",
      "modelLabel": "Data Model",
      "addAttrTip": "Attribute already exists",
      "addAttrTitle": "Add parameter",
      "selectBodyCompPlaceholder": "Select to use body model",
      "form": {
        "paramsNamePlaceholder": "Parameter name",
        "attrTab": "Attributes",
        "refsTab": "References",
        "compPlaceholder": "Select referenced component",
        "defaultValuePlaceholder": "Default value",
        "examplePlaceholder": "Example value",
        "minLengthPlaceholder": "Minimum length",
        "maxLengthPlaceholder": "Maximum length",
        "minimumPlaceholder": "Minimum value",
        "maximumPlaceholder": "Maximum value"
      }
    },
    "agent": {
      "unconnect": "Disconnected",
      "urlLabel": "Proxy Address",
      "noProxy": {
        "title": "No Proxy",
        "tip": "Directly request the interface through the browser, and cancel the cross-domain limit for non-same-origin access to the interface server."
      },
      "clientProxy": {
        "title": "Client Proxy",
        "tip": "Install \"<a href='https://www.xcan.cloud/help' target=\"_blank\" class=\"text-text-link\">Proxy Program<a>\" on the computer where the browser is accessed, and the client proxy will be used after configuration."
      },
      "serverProxy": {
        "title": "SERVER_PROXY",
        "tip": "Install \"Proxy Program\" separately on the shared network server host, and use the server proxy without installing the proxy program on each user's computer, and the server proxy will be used after configuration. Recommended."
      },
      "cloudProxy": {
        "tip": "Request the interface through the AngusTester cloud server node, note: cannot access the customer intranet service address."
      },
      "connectFailTip": "Proxy connection failed, please check if the proxy service is running.",
      "configFailTip": "The server proxy is not configured or enabled, please check \"Application Management->Proxy Configuration\""
    },
    "case": {
      "updateNameSuccess": "Modify name successfully",
      "hints": "Currently added {num} cases, each interface supports a maximum of 100 cases.",
      "addCaseAction": "Add Case",
      "execCaseAction": "Execute Test",
      "statusNotTested": "Not Tested",
      "execModalTitle": "Execute Case",
      "messages": {
        "nameRequired": "Please enter case name",
        "descriptionlimit": "Description too long (maximum 2000 characters), please reduce content"
      },
      "addModal": {
        "title": "Generate API Case",
        "editTitle": "Edit API Case",
        "namePlaceholder": "Enter case name, up to 400 characters",
        "typePlaceholder": "Select type",
        "toolbarMenus": {
          "time": "Duration Analysis"
        }
      },
      "debugModal": {
        "proxyError": "Request error (please check request parameters or proxy connection status)",
        "wsProxyErr": "Request error (please check request parameters or whether the browser triggers the \"CORS-Cross-Origin Resource Sharing\" limit, if the cross-domain limit is triggered, please use a proxy or configure the interface service to allow cross-domain access)",
        "conditionMessageEmpty": "Expression is empty, execute the assertion",
        "conditionMsgFormat": "Expression format error, only support operators 「\"=\", \"!=\", \">=\", \"<=\", \">\", \"<\"」",
        "conditionMsgFormatFail": "Expression format error, cannot extract variable name",
        "conditionMsgFormatErr": "Expression format error, ignore the assertion",
        "conditionMsgDefineFail": "The variable is not defined, the value of the variable is processed by the variable name",
        "conditionMsgIgnore": "The calculation result is not established, ignore the assertion",
        "conditionMsgExec": "The calculation result is established, execute the assertion",
        "urlRule": "Interface address is invalid, please re-select",
        "assertRule": "Assertion data verification failed",
        "apisLabel": "Test Interface",
        "caseLabel": "Test Case",
        "debugAction": "Debug Case",
        "descriptionPlaceholder": "Enter case description, up to 800 characters"
      }
    },
    "externalDoc": {
      "hints": "Reference external resources as current interface document extensions",
      "urlPlaceholder": "Link address",
      "descriptionPlaceholder": "External link description"
    },
    "importForm": {
      "nameLabel": "Service Name",
      "namePlaceholder": "Up to 100 characters",
      "sourceLabel": "Select Import Source",
      "fileLabel": "Select File",
      "fileTip": "The file can be dragged directly into this area for upload, the file size is not more than 20M, and the supported file types are .zip,.rar,.7z,.gz,.tar,.bz2,.xz,.lzma,.json,.yaml,.yml.",
      "strategyWhenDuplicated": "Strategy when encountering duplicates",
      "deleteWhenNotExisted": "Whether to delete the current interface when it does not exist in the imported data",
      "fileRule": "Please check if the file is a Postman Collection V2/V2.1 version JSON file!",
      "sourceRule": "Please select import source",
      "fileRule_required": "Please upload local file",
      "nameRule": "Please enter name"
    },
    "moveModal": {
      "title": "Move Interface",
      "hints": "When moving the interface to the service, the default is not to authorize the interface associated user to view the service permission. If needed, please authorize through the service \"permission\".",
      "selectServiceTitle": "Select the service to move to"
    },
    "oas": {
      "comp": "Component",
      "hints": "Components can be used to define reusable object collections. The supported component types include: data model, response, parameter, example, request body, request body, header, and security scheme. Note: when a component is not referenced by an API attribute, it has no effect on the API.",
      "designCompAction": "Design component",
      "addModal": {
        "typePlaceholder": "Select type",
        "namePlaceholder": "Enter name, up to 400 characters",
        "refLabel": "Reference",
        "cancelRefs": "Cancel reference",
        "useRefs": "Restore reference",
        "summaryLabel": "Summary",
        "summaryPlaceholder": "Enter summary, up to 400 characters",
        "examplePlaceholder": "Enter example",
        "schemaTypeLabel": "Attribute type",
        "schemaTypePlaceholder": "Select type",
        "valuePlaceholder": "Enter value, up to 4096 characters",
        "descriptionPlaceholder": "Enter description, up to 2000 characters, support Markdown syntax"
      }
    },
    "apis": {
      "tabs": {
        "mock": "Mock"
      },
      "errors": {
        "invalidUrl": "Error!",
        "invalidUrlDescription": "Invalid API address, please re-enter!",
        "parameterValidationFailed": "Parameter validation failed",
        "headerValidationFailed": "Request header parameter validation failed",
        "cookieValidationFailed": "Cookie parameter validation failed",
        "bodyValidationFailed": "Request body data validation failed",
        "assertionValidationFailed": "Assertion data validation failed",
        "proxyNotConnected": "Proxy not connected, please check proxy configuration",
        "requestErrorWithProxy": "Request error occurred (please check request parameters or proxy connection status)",
        "requestErrorWithCors": "Request error occurred (please check request parameters or whether browser 'CORS-Cross-Origin Resource Sharing' restrictions are triggered. If cross-origin restrictions are triggered, please use proxy or configure API service to allow cross-origin access)"
      },
      "notifications": {
        "saveSuccess": "API saved successfully",
        "copyUrlSuccess": "URL copied successfully",
        "apiPublishedWarning": "API is published and cannot be modified"
      },
      "hints": {
        "notes": "Notes",
        "parameterSerialization": "Parameter Serialization",
        "serializationDescription": "AngusTester serialization rules are based on a subset of UR templates defined by RFC6570. Supports OAS3 Schema data types including: string, boolean, integer, number, object, array.",
        "serializationDescription_pre": "AngusTester serialization rules are based on a subset of UR templates defined by",
        "serializationDescription_later": ". Supports OAS3 Schema data types including: string, boolean, integer, number, object, array."
      },
      "assertion": {
        "conditionMessages": {
          "empty": "Condition message is empty",
          "formatError": "Condition message format error",
          "formatFailed": "Condition message format failed",
          "defineFailed": "Condition message definition failed",
          "ignored": "Condition message ignored",
          "executed": "Condition message executed"
        }
      },
      "menus": {
        "time": "Duration Analysis",
        "define": "Definition"
      },
      "docInfo": {
        "pathParams": {
          "title": "Path Parameters",
          "rules": {
            "primitive": "Primitive id = 5 -> /users/5",
            "array": "Array id = 「3, 4, 5」 -> /users/3,4,5",
            "object": "Object id = {\"role\": \"admin\", \"firstName\": \"Alex\"} -> /users/role=admin,firstName=Alex",
            "limit": "> Only supports primitive types, primitive type arrays, and object types. Other complex type data models are not parsed."
          }
        },
        "queryFormParams": {
          "title": "Query and Form Parameters",
          "rules": {
            "primitive": "Primitive id = 5 -> id=5",
            "array": "Array id = 「3, 4, 5」 -> id「0」=3&id「1」=4&id「2」=5",
            "object": "Object id = {\"role\": \"admin\", \"firstName\": \"Alex\"} -> id.role=admin&id.firstName=Alex",
            "support": "> Supports all types, including object and array type nesting."
          }
        },
        "headerParams": {
          "title": "Header Parameters",
          "rules": {
            "primitive": "Primitive X-MyHeader = 5 ->  X-MyHeader: 5",
            "array": "Array X-MyHeader = 「3, 4, 5」 -> X-MyHeader: 3,4,5",
            "object": "Object X-MyHeader = {\"role\": \"admin\", \"firstName\": \"Alex\"} -> X-MyHeader: role=admin,firstName=Alex",
            "limit": "> Only supports primitive types, primitive type arrays, and object types. Other complex type data models are not parsed."
          }
        },
        "cookieParams": {
          "title": "Cookie Parameters",
          "rules": {
            "primitive": "Primitive id = 5 ->  Cookie: id=5",
            "array": "Array id = 「3, 4, 5」 -> Cookie: id=3,4,5",
            "object": "Object id = {\"role\": \"admin\", \"firstName\": \"Alex\"} -> Cookie: id=role,admin,firstName,Alex",
            "limit": "> Only supports primitive types, primitive type arrays, and object types. Other complex type data models are not parsed."
          }
        }
      },
      "debugTip": {
        "componentSync": "Component debug value modification and synchronization: Modifying debug values for Query, Path, Header, and Form type parameters that reference components will synchronize modifications to the component, and other interfaces that reference the component will also be synchronized; while Raw request body content that references components will not synchronize modifications to the component when debug values are modified, meaning Raw request body component debug value modifications will not affect other interfaces.",
        "variableSupport": "Locations where variables are supported in interfaces: Security schemes (Authorization), Path parameters, Query parameters, Header parameters, request body Form parameters, request body Raw, assertion condition expressions, and assertion expected values.",
        "functionSupport": "Locations where functions are supported in interfaces: Path parameters, Query parameters, Header parameters, request body Form parameters, and request body Raw."
      },
      "buttonGroup": {
        "mockApi": "Mock Api",
        "testScript": "Test Script",
        "generateTestScript": "Generate Test Script",
        "generateTestScriptTip": "Generate interface functional, performance and stability test scripts.",
        "deleteTestScript": "Delete Test Script",
        "deleteTestScriptTip": "Delete interface functional, performance and stability test scripts.",
        "exec": "Execute Test",
        "funcTestExec": "Execute Functional Test",
        "perfTestExec": "Execute Performance Test",
        "stabilityTestExec": "Execute Stability Test",
        "testTask": "Test Task",
        "setTest": "Generate Test Task",
        "setTestTip": "Generate functional, performance and stability test tasks.",
        "reTest": "Re-start Test Task",
        "reTestTip": "Update the task to \"Pending\" and the related statistics and status will be cleared.",
        "reopen": "Re-open Test Task",
        "reopenTip": "Update the task to \"Pending\" and the statistics and status will not be cleared.",
        "deleteTask": "Delete Test Task",
        "deleteTaskTip": "Delete interface corresponding functional, performance and stability test tasks, including test scripts."
      },
      "response": {
        "pretty": "Pretty",
        "raw": "Raw",
        "preview": "Preview"
      },
      "navs": {
        "apiInfo": "API Info",
        "performance": "Performance",
        "testInfo": "Test Result",
        "agent": "Agent",
        "apiMock": "Mock API",
        "saveUnarchived": "Save to Unarchived",
        "archiveToService": "Archive to Service",
        "indicator": "API Metrics",
        "test": "Test Results",
        "case": "API Cases"
      },
      "serviceNav": {
        "projectInfo": "Service Info",
        "openapi": "Document Info",
        "syncConfig": "Sync Config",
        "security": "Security Config",
        "serverConfig": "Server Config",
        "agent": "Service Agent",
        "component": "Component"
      }
    },
    "security": {
      "hints": "Declare security schemes that can be used by interfaces",
      "namePlaceholder": "Security scheme name",
      "valuePlaceholder": "Enter scope, press Enter to confirm",
      "nameRule": "Define name duplication"
    },
    "securityModal": {
      "title": "Security Scheme Configuration",
      "rule": "Data not saved, please save data or cancel editing",
      "hints": "Define security schemes that can be used by all interfaces under the current service (Authorization).",
      "nameTip": "The component name can only contain A-Z a-z 0-9 - . _ characters",
      "namePlaceholder": "Please enter the scheme name",
      "typeLabel": "Type",
      "usernameLabel": "Username",
      "apiKeyNamePlaceholder": "Enter name",
      "apiKeyValuePlaceholder": "Enter value",
      "apiKeyInPlaceholder": "Select position",
      "configToken": "Configure token",
      "authKeyPlaceholder": "Please enter the authorization key",
      "authFlowLabel": "Authorization Type",
      "authorizationUrlPlaceholder": "Please enter the authorization URL",
      "authorizationUrlRule": "Please enter the correct URL address",
      "callbackUrlPlaceholder": "Please enter the callback URL",
      "callbackUrlRule": "Please enter the correct URL address",
      "tokenUrlPlaceholder": "Please enter the access token URL",
      "tokenUrlRule": "Please enter the correct URL address",
      "refreshUrlPlaceholder": "Please enter the refresh token URL",
      "refreshUrlRule": "Please enter the correct URL address",
      "clientIdLabel": "Client ID",
      "clientIdPlaceholder": "Please enter the client ID",
      "clientSecretLabel": "Client Secret",
      "clientSecretPlaceholder": "Please enter the client secret",
      "scopesPlaceholder": "Enter scope, multiple scopes separated by commas",
      "clientAuthTypePlaceholder": "Select client authentication",
      "description": "Description",
      "descriptionPlaceholder": "Enter description, support Markdown syntax"
    },
    "serverConfig": {
      "title": "Server Configuration",
      "hints": "Define servers (Server URL) that can be used by all APIs under current service, maximum 50 servers can be added.",
      "actions": {
        "addServerDemo": "Server Example",
        "addServer": "Server",
        "updateToApis": "Update to Associated APIs",
        "addVariable": "Add Variable",
        "deleteVariable": "Delete Variable"
      },
      "messages": {
        "updateToApisSuccess": "Successfully updated to associated APIs",
        "confirmDelete": "Confirm deletion of this server?",
        "configError": "Server configuration error, please check and correct before saving.",
        "serverUrlExists": "Server URL already exists, please re-enter",
        "variableNotRepeat": "Variables in Server URL cannot be repeated",
        "variableNameRepeat": "Variable name is duplicated",
        "variableValueRepeat": "Variable value is duplicated"
      },
      "form": {
        "urlPlaceholder": "URL prefix pointing to target host, e.g.: https://{env}.xcan.cloud:{prot}/{path}",
        "description": "Description",
        "descriptionPlaceholder": "Server description, maximum 400 characters",
        "variableNamePlaceholder": "Variable name, maximum 100 characters",
        "variableValuePlaceholder": "Variable value, maximum 400 characters",
        "variableDescriptionPlaceholder": "Variable description, maximum 400 characters"
      },
      "tips": {
        "maxVariables": "Maximum 50 variables can be added",
        "variableNameNotRepeat": "Variable names cannot be duplicated",
        "variableValueNotRepeat": "Values of the same variable cannot be duplicated"
      }
    },
    "shareModal": {
      "title": "Share Management",
      "messages": {
        "deleteSuccess": "Share record deleted successfully",
        "passwordRequired": "Password cannot be empty",
        "updatePasswordSuccess": "Password updated successfully",
        "copySuccess": "Copied successfully"
      },
      "form": {
        "validityPeriod": "Validity Period",
        "permanent": "Permanent"
      },
      "copyFormat": {
        "withPassword": "Link: {url} Password: {password}",
        "withoutPassword": "Link: {url}"
      }
    },
    "statusModal": {
      "title": "Modify Status",
      "messages": {
        "updateStatusSuccess": "Status updated successfully"
      },
      "tips": {
        "serviceStatusChange": "Modifying service status will synchronously modify the status of all APIs under the service.",
        "servicePublish": "Publishing a service will publish all APIs under the service. Published services and APIs cannot be modified or saved.",
        "apiPublish": "After publishing an API, the basic information and parameter information of the API cannot be modified or saved"
      }
    },
    "syncConfig": {
      "title": "Sync Configuration",
      "hints": "Automatically import external OpenAPI to current service, maximum 10 configurations allowed.",
      "messages": {
        "deleteSuccess": "Deleted successfully",
        "testSuccess": "Configuration test passed",
        "syncSuccess": "Sync successful",
        "syncAllSuccess": "Sync all successful",
        "nameExists": "Name already exists",
        "authNameExists": "Authentication name already exists",
        "noValidConfig": "No valid sync configuration found, please save data first",
        "dataNotSaved": "Data not saved, please save data or cancel editing first",
        "inputContent": "Please enter content"
      },
      "form": {
        "duplicateStrategy": "Strategy when encountering duplicates",
        "deleteWhenNotExist": "Whether to delete local APIs when sync APIs do not exist",
        "authentication": "Authentication",
        "authRequired": "Required when sync address is protected. Maximum 10 allowed.",
        "paramPosition": "Parameter Position"
      },
      "tips": {
        "addDemo": "Add demo data",
        "syncAllTip": "Only sync saved configurations",
        "lastSync": "Last Sync"
      },
      "options": {
        "header": "header",
        "query": "query"
      }
    },
    "tag": {
      "hints": {
        "main": "Tags serve as additional metadata for APIs to group them. An API can have multiple tags, meaning it belongs to multiple groups. The order of tag definitions will be consistent with the order of APIs grouped by tags and the order of interface display in documentation.",
        "sub": "Each tag name must be unique; not all interfaces need to be associated with tags; maximum 2000 tags can be added."
      },
      "messages": {
        "nameExists": "Tag name already exists",
        "dataNotSaved": "Data not saved, please save data or cancel editing first"
      },
      "form": {
        "namePlaceholder": "Please enter tag name",
        "descriptionPlaceholder": "Enter description, supports Markdown syntax",
        "externalDocsUrl": "External Documentation URL",
        "externalDocsUrlPlaceholder": "Please enter external documentation URL",
        "externalDocsDescription": "External Documentation Description",
        "externalDocsDescriptionPlaceholder": "Enter description, supports Markdown syntax",
        "externalDocsLink": "External Documentation Link"
      },
      "validation": {
        "enterUrl": "Please enter URL address",
        "enterCorrectUrl": "Please enter correct URL address"
      }
    },
    "translateModal": {
      "title": "Translation",
      "description": {
        "title": "OpenAPI Translation Instructions",
        "useCases": {
          "title": "Use Cases",
          "items": [
            "Provide support for multilingual API documentation",
            "Internationalize API services",
            "Cross-regional API service deployment",
            "Generate multilingual developer documentation"
          ]
        },
        "notes": {
          "title": "Notes",
          "items": [
            "AngusTester will use DeepSeek for translation by default",
            "Translation is processed asynchronously, you will receive a notification message when completed",
            "Translation process may take from a few minutes to several hours, depending on API scale",
            "After translation is completed, you can view it in \"APIs → Services\""
          ]
        }
      },
      "configuration": {
        "title": "OpenAPI Translation Configuration",
        "service": "API Service",
        "servicePlaceholder": "Please select service",
        "sourceLanguage": "Source Language",
        "targetLanguage": "Target Language"
      },
      "messages": {
        "translateComplete": "Translation completed",
        "selectService": "Please select service"
      }
    },
    "timeline": {
      "labels": {
        "timeConsuming": "Time Consuming Items",
        "time": "Time",
        "totalTime": "Total Time Consuming"
      },
      "items": {
        "dnsLookup": "DNS Lookup",
        "tcpConnection": "TCP Connection",
        "ssl": "SSL",
        "requestSent": "Request Sent",
        "waiting": "Waiting",
        "contentDownload": "Content Download"
      }
    },
    "apiAuthorization": {
      "title": "Type",
      "types": {
        "noAuth": "No Authentication",
        "basicAuth": "Basic Auth",
        "bearerToken": "Bearer Token",
        "apiKey": "Api Key",
        "oauth2": "OAuth 2.0",
        "extends": "Public"
      },
      "extends": {
        "selectServiceSecurity": "Select Service Security Authentication"
      },
      "basic": {
        "usernamePlaceholder": "Please enter username",
        "passwordPlaceholder": "Please enter password"
      },
      "bearer": {
        "token": "Token",
        "tokenPlaceholder": "Please enter access token"
      },
      "oauth2": {
        "configMethod": "Configuration Method:",
        "existingToken": "Existing Token",
        "generateToken": "Generate Token",
        "accessToken": "Access Token",
        "clientAuth": "Client Authentication",
        "getToken": "Get Token"
      },
      "oauth2Fields": {
        "authorizationUrl": "Authorization URL",
        "callbackUrl": "Callback URL",
        "tokenUrl": "Access Token URL",
        "refreshUrl": "Refresh Token URL",
        "clientId": "Client ID",
        "clientSecret": "Client Secret",
        "encryptionMethod": "Encryption Method",
        "verificationCode": "Verification Code",
        "scope": "Scope"
      },
      "flowTypes": {
        "authorizationCode": "Authorization Code",
        "password": "Password Credentials",
        "implicit": "Implicit",
        "clientCredentials": "Client Credentials"
      },
      "clientAuthTypes": {
        "viaBasicAuthHeader": "Send via Basic Auth Header",
        "viaRequestBody": "Send via Request Body"
      },
      "encryptionTypes": {
        "sha256": "SHA-256",
        "plain": "Plain"
      },
      "messages": {
        "authorizationFailed": "Authorization failed Couldn't complete authentication.",
        "proxyNotConnected": "Proxy not connected, please check proxy configuration",
        "maxLengthTip": "Maximum {maxLength} characters allowed"
      }
    },
    "apiExecDetail": {
      "tabs": {
        "testTask": "Test Task"
      },
      "testSummary": {
        "allTests": "All Tests",
        "successRate": "Success Rate",
        "functional": "Functional",
        "performance": "Performance",
        "stability": "Stability",
        "custom": "Custom",
        "testInterfaces": "Test Interfaces",
        "resultIndicators": "Result Indicators",
        "nonStandard": "Non-Standard"
      },
      "indicators": {
        "tps": "Transactions Per Second (TPS)",
        "responseTime": "Response Time (P90)",
        "errorRate": "Error Rate"
      }
    },
    "mockApi": {
      "description": "Mock APIs can quickly generate and simulate the APIs you depend on, enabling development and testing to proceed in parallel, thereby accelerating development speed, achieving more comprehensive testing, and delivering stable products or applications earlier. You can create corresponding mock APIs for the current API through two methods: \"Generate Mock API\" or \"Associate Mock API\". Mock APIs will provide simulated data for convenient API debugging and testing.",
      "generateMockApi": "Generate Mock API",
      "associateMockApi": "Associate Mock API",
      "columns": {
        "apiName": "API Name",
        "mockServiceName": "Mock Service Name",
        "mockServiceHostUrl": "Service Address",
        "mockServiceId": "Service ID"
      },
      "actions": {
        "cancelAssociation": "Cancel Association",
        "cancelAssociate": "Cancel Association"
      },
      "messages": {
        "generateSuccess": "Mock API generated successfully",
        "associateSuccess": "Association successful",
        "cancelAssociationSuccess": "Association cancelled successfully"
      },
      "hints": {
        "selectMockServiceFirst": "Please select a Mock service first to generate or associate a Mock API.",
        "generateMockApi": "Generate a Mock API based on the current API.",
        "associateMockApi": "Associate with an existing API under the Mock service."
      },
       "placeholder": {
        "selectMockService": "Please select Mock service",
        "selectMockApi": "Please select Mock API",
        "inputMockApiName": "Please enter the corresponding Mock API name, defaults to current API name if not specified"
      },
      "createTypes": {
        "generate": {
          "description": "Create a new mock version based on the current API. After creation, you can use the Mock API for data simulation and status testing, enabling more efficient API debugging."
        },
        "associate": {
          "description": "Associate the current API with an existing Mock service API. After association, you can perform data simulation and status testing during API debugging."
        }
      },
      "statistics": {
        "requestNum": "Request Count",
        "pushbackNum": "Pushback Count",
        "simulateErrorNum": "Simulate Error Count",
        "successNum": "Success Count",
        "exceptionNum": "Exception Count"
      }
    },
    "apiRequestBody": {
      "actions": {
        "importComponent": "Import Component",
        "copyComponent": "Copy Component",
        "compress": "Compress",
        "uploadFile": "Upload File",
        "cancelReference": "Cancel Reference"
      },
      "tips": {
        "fileSizeLimit": "Interface debugging supports up to 100MB files, files within 10MB can be saved, exceeding this limit will not be saved.",
        "componentReference": "Component Reference: {ref}"
      },
      "modal": {
        "title": "Component",
        "columns": {
          "componentName": "Component Name"
        }
      },
      "form": {
        "typePlaceholder": "Please select parameter type",
        "valuePlaceholder": "Please enter debug value, maximum {maxLength} characters supported",
        "setVariable": "Set as Variable"
      },
      "messages": {
        "setVariableSuccess": "Variable set successfully",
        "variableNameInvalid": "Name does not meet variable requirements, allows numbers, letters, !@$%^&*()_-+=./ etc.",
        "debugFileSizeLimit": "Total upload file size for request body during debugging cannot exceed 100MB"
      }
    },
    "apiRequestParams": {
      "form": {
        "namePlaceholder": "Parameter Name",
        "inputNamePlaceholder": "Please enter parameter name",
        "typePlaceholder": "Please select parameter type",
        "valuePlaceholder": "Please enter debug value, maximum {maxLength} characters supported"
      },
      "tips": {
        "componentReference": "Component Reference: {ref}"
      }
    },
    "apiServerPath": {
      "form": {
        "pathPlaceholder": "API path, starting with \"/\"",
        "serverPlaceholder": "Server address, URL prefix for API address"
      },
      "actions": {
        "sendRequest": "Send Request",
        "abortRequest": "Abort Request",
        "saveToUnarchived": "Save to Unarchived",
        "archive": "Archive",
        "generateCase": "Generate Case",
        "copyUrl": "Copy URL"
      },
      "tips": {
        "variableNotFound": "Variable not found, please define the variable first or refresh and try again"
      },
      "labels": {
        "current": "Current",
        "public": "Public",
        "mock": "Mock",
        "history": "History"
      }
    },
    "apiSetting": {
      "form": {
        "timeoutPlaceholder": "0 ~ 9007199254740991",
        "retryNumPlaceholder": "0 ~ 6",
        "maxRedirectsPlaceholder": "0 ~ 10"
      },
      "labels": {
        "paramValidation": "Parameter Format Validation",
        "connectTimeout": "Connection Timeout",
        "readTimeout": "Read Timeout",
        "retryNum": "Retry Count on Failure",
        "maxRedirects": "Maximum Redirect Count"
      },
      "descriptions": {
        "paramValidation": "When enabled, parameters will be validated first, and requests will only be sent after parameter validation passes. Default is disabled.",
        "connectTimeout": "Specifies the maximum waiting time for establishing a connection between client and server. 0 means never timeout, default is 6 seconds.",
        "readTimeout": "Specifies the maximum waiting time for the client to receive server connection closure after establishing a connection. 0 means never timeout, default is 60 seconds.",
        "retryNum": "Number of retries when request fails. Default is no retry, maximum allowed is 6 times.",
        "maxRedirects": "Number of redirects when request returns 3xx status code. Default is 1 time, maximum allowed is 10 times."
      },
      "units": {
        "milliseconds": "ms",
        "times": "times"
      }
    },
    "apiSliderSave": {
      "form": {
        "summaryPlaceholder": "Please enter API name, within 40 characters",
        "operationIdPlaceholder": "Please enter operation ID, within 40 characters",
        "ownerPlaceholder": "Please select API owner",
        "servicePlaceholder": "Please select service",
        "tagsPlaceholder": "Please enter or select tags, press Enter to confirm input",
        "statusPlaceholder": "Please select status",
        "descriptionPlaceholder": "Limit input to 20000 characters, supports markdown syntax",
        "externalDocsUrlPlaceholder": "Enter external documentation link",
        "externalDocsDescPlaceholder": "Enter external documentation description"
      },
      "labels": {
        "summary": "API Name",
        "operationId": "Operation ID",
        "externalDocs": "External Documentation"
      },
      "tips": {
        "duplicateApi": "Note: APIs under the same service cannot be duplicated, i.e., the combination of request method and API path (excluding query parameters) must be unique.",
        "tagsDescription": "Tags are used as additional metadata for API grouping.",
        "externalDocsDescription": "Reference external resources as extensions to current API documentation.",
        "releasedApiNotEditable": "Released APIs cannot be modified"
      },
      "validation": {
        "summaryRequired": "Please enter API name, within 100 characters",
        "ownerRequired": "Please select API owner",
        "serviceRequired": "Please select service",
        "statusRequired": "Please select status"
      },
      "ifDeprecated": "Deprecated",
      "options": {
        "normal": "Normal",
        "deprecated": "Deprecated"
      },
      "debug": {
        "example": "Debug Example"
      }
    },
    "apiUnarchivedrSave": {
      "form": {
        "summaryPlaceholder": "Please enter API name, within 40 characters",
        "descriptionPlaceholder": "Limit input to 20000 characters, supports markdown syntax"
      },
      "labels": {
        "summary": "API Name"
      },
      "tips": {
        "unarchivedApiDescription": "Unarchived APIs are temporary debugging interfaces for users, only visible to the user who added them"
      },
      "validation": {
        "summaryRequired": "Please enter API name, within 100 characters"
      }
    },
    "apiUpload": {
      "actions": {
        "selectFile": "Select File"
      },
      "messages": {
        "fileSizeLimit": "Total upload file size cannot exceed 100MB during debugging"
      }
    },
    "apiWebSocket": {
      "form": {
        "uriPlaceholder": "Enter URI",
        "searchMessagePlaceholder": "Search messages",
        "allMessagesPlaceholder": "All messages"
      },
      "labels": {
        "sendMessage": "Send Message",
        "responseMessage": "Response Messages"
      },
      "actions": {
        "saveToUnarchived": "Save to Unarchived",
        "archive": "Archive",
        "disconnect": "Disconnect",
        "connect": "Connect",
        "copyUrl": "Copy URL"
      },
      "navigation": {
        "saveToUnarchived": "Save to Unarchived",
        "archiveToService": "Archive to Service",
        "agent": "Agent"
      },
      "messages": {
        "updateApiSuccess": "API updated successfully",
        "copyUrlSuccess": "URL copied successfully",
        "sendFailed": "Send failed",
        "closeFailed": "Close failed",
        "invalidUrl": "Please enter a valid URL"
      },
      "options": {
        "receiveMessage": "Receive Message",
        "sendMessage": "Send Message"
      }
    },
    "webSocketSetting": {
      "form": {
        "connectTimeout": {
          "label": "Connection Timeout",
          "description": "Maximum wait time for client and server to establish connection",
          "placeholder": "Please enter timeout time",
          "unit": "ms"
        },
        "maxReconnections": {
          "label": "Reconnection Count",
          "description": "Number of reconnection attempts when connection is closed, maximum 10 times allowed",
          "placeholder": "Please enter reconnection count"
        },
        "reconnectionInterval": {
          "label": "Reconnection Interval",
          "description": "Retry interval when connection fails, default 200ms, maximum allowed time is 30 minutes",
          "placeholder": "Please enter reconnection interval",
          "unit": "ms"
        }
      },
      "validation": {
        "connectTimeout": "Please enter timeout time",
        "maxReconnections": "Please enter reconnection count",
        "reconnectionInterval": "Please enter reconnection interval time"
      }
    },
    "webSocketMsg": {
      "types": {
        "send": "Send Request",
        "receive": "Receive Message",
        "connect": "Connection Success",
        "close": "Connection Closed",
        "closeErr": "Close Failed",
        "sendErr": "Send Failed",
        "connectErr": "Connection Failed"
      }
    },
    "webSocketSave": {
      "form": {
        "summary": {
          "label": "API Name",
          "placeholder": "Please enter API name, within 40 characters",
          "validation": "Please enter API name, within 100 characters"
        },
        "operationId": {
          "label": "Code",
          "placeholder": "Please enter code, within 40 characters"
        },
        "ownerId": {
          "label": "API Owner",
          "placeholder": "Please select API owner",
          "validation": "Please select API owner"
        },
        "serviceId": {
          "label": "Service",
          "placeholder": "Please select service",
          "validation": "Please select service"
        },
        "tags": {
          "placeholder": "Please enter or select tags, press Enter to confirm",
          "description": "Tags are used as additional metadata for API grouping."
        },
        "status": {
          "validation": "Please select status"
        },
        "deprecated": {
          "label": "Deprecated",
          "options": {
            "normal": "Normal",
            "deprecated": "Deprecated"
          }
        },
        "description": {
          "placeholder": "Limit input to 200 characters"
        }
      },
      "messages": {
        "protocolWarning": "WebSocket protocol must start with ws:// or wss://",
        "addSuccess": "API added successfully",
        "updateSuccess": "API updated successfully",
        "releasedWarning": "Released APIs cannot be modified"
      }
    },
    "webSocketSaveUnarchived": {
      "hints": {
        "unarchivedDescription": "Unarchived APIs are temporary debugging interfaces for users, only visible to the user who added them"
      },
      "form": {
        "summary": {
          "label": "API Name",
          "placeholder": "Please enter API name, within 40 characters",
          "validation": "Please enter API name, within 100 characters"
        },
        "description": {
          "label": "Description",
          "placeholder": "Limit input to 200 characters"
        }
      },
      "messages": {
        "protocolWarning": "WebSocket protocol must start with ws:// or wss://",
        "addSuccess": "API added successfully",
        "updateSuccess": "API updated successfully"
      }
    },
    "webSocketForm": {
      "placeholder": {
        "inputParameterDescription": "Enter parameter description"
      }
    },
    "authSetting": {
      "hints": {
        "authDescription": "Grant operation permissions for specified \"projects, services, interfaces\" to users, departments, and groups. When granting permissions, \"view\" permission is required. Users can only authorize projects/services/interfaces for which they have authorization permissions."
      },
      "permessionControl": "Permission Control",
      "placeholder": {
        "searchDept": "Search department",
        "searchGroup": "Search group",
        "searchUser": "Search user",
        "searchName": "Search name"
      }
    },
    "groupApiDetail": {
      "columns": {
        "operationId": "Operation ID",
        "deprecated": "Deprecated",
        "securityTitle": "Security Requirements",
        "externalDocsTitle": "External Documentation",
        "hasPermission": "Has Permission",
        "noPermission": "No Permission"
      },
      "messages": {
        "selectApiFirst": "Please select an API first to view details"
      },
      "modal": {
        "title": "API Permission",
        "onTips": "After enabling \"has permission control\", you need to manually authorize service permissions to have corresponding API operation permissions. \"Has permission control\" is enabled by default. Note: If the authorized object does not have parent service permissions, view permissions will be automatically granted.",
        "offTips": "After enabling \"no permission control\", all users will be allowed to publicly view and operate the current API. Users viewing the API must also have current API parent or service permissions."
      }
    },
    "serviceDetail": {
      "columns": {
        "apisNum": "API Count",
        "apisCaseNum": "Case Count",
        "securityTitle": "Security Requirements",
        "hasPermission": "Has Permission",
        "noPermission": "No Permission"
      },
      "placeholder": {
        "nameInput": "Within 100 characters"
      },
      "hints": {
        "maxApis": "Maximum 2000 supported"
      },
      "modal": {
        "projectPermission": "Project Permission",
        "servicePermission": "Service Permission"
      },
      "tips": {
        "project": {
          "on": "After enabling \"has permission control\", you need to manually authorize project permissions to have corresponding project operation permissions. \"Has permission control\" is enabled by default. Note: Authorizing projects will not authorize API permissions under the project.",
          "off": "After enabling \"no permission control\", all users under the account will be allowed to publicly view and operate projects and APIs under the project."
        },
        "service": {
          "on": "After enabling \"has permission control\", you need to manually authorize service permissions to have corresponding project operation permissions. \"Has permission control\" is enabled by default. Note: Authorizing projects will not authorize API permissions under the service. If the authorized object does not have parent project permissions, view permissions will be automatically granted.",
          "off": "After enabling \"no permission control\", all users under the account will be allowed to publicly view and operate services and APIs under the service."
        }
      }
    },
    "mockService": {
      "columns": {
        "serviceDomainUrl": "Service URL"
      },
      "stats": {
        "apisNum": "API Count",
        "requestNum": "Request Count",
        "pushbackNum": "Pushback Count",
        "simulateErrorNum": "Simulated Error Count",
        "successNum": "Success Count",
        "exceptionNum": "Exception Count"
      },
      "actions": {
        "cancelAssociate": "Cancel Association",
        "associate": "Associate"
      },
      "messages": {
        "associateSuccess": "Associated successfully",
        "cancelAssociateSuccess": "Association cancelled successfully"
      },
      "options": {
        "generateMockService": "Generate Mock Service",
        "associateMockService": "Associate Mock Service"
      },
      "hints": {
        "generateMockService": "Generate Mock service based on current service.",
        "associateMockService": "Associate current service with existing Mock service."
      },
      "modal": {
        "title": "Mock Service Permission",
        "onTips": "After enabling permission control, you need to manually authorize to have corresponding operation permissions.",
        "offTips": "No permission restrictions, all users in the account can view and operate, permission control is not enabled by default.",
        "associateTitle": "Associate Mock Service"
      },
      "form": {
        "domainPlaceholder": "After setting a domain for the service, you can access Mock APIs through the domain",
        "domainSuffix": ".angusmock.cloud",
        "nodeFormat": "{name} ( {ip} )",
        "serviceFormat": "S"
      },
      "validation": {
        "nameRequired": "Please enter name",
        "domainRequired": "Please enter domain",
        "domainInvalid": "Please enter correct domain",
        "portRequired": "Please enter port (1~65535)",
        "nodeRequired": "Please select node"
      },
      "placeholder": {
        "selectMockService": "Please select Mock service"
      },
      "description": {
        "title": "Mock services can quickly generate and simulate APIs you depend on, enabling parallel development and testing, thereby accelerating development speed, achieving more comprehensive testing, and delivering stable products or applications earlier. You can create corresponding simulated interfaces for current service APIs through two methods: \"Generate Mock Service\" or \"Associate Mock Service\". These simulated interfaces will provide mock data for API debugging and testing.",
        "generateMockService": "Create new Mock service based on current service APIs. After creation, you can use these Mock APIs for data simulation and state testing, achieving more efficient API debugging.",
        "associateMockService": "Associate current service with existing Mock service. After association, the system will automatically generate corresponding Mock APIs in the associated Mock service. These APIs can be used for data simulation and state testing in API debugging."
      }
    },
    "serviceOpenApi": {
      "columns": {
        "summary": "Summary",
        "openapi": "OpenAPI",
        "termsOfService": "Terms of Service",
        "contact": "Contact",
        "license": "License",
        "version": "Document Version",
        "externalDocs": "External Documentation"
      },
      "placeholder": {
        "title": "Within 100 characters",
        "summary": "Within 400 characters",
        "termsOfService": "Within 800 characters",
        "contactName": "Name (within 100 characters)",
        "contactEmail": "Email",
        "contactUrl": "URL",
        "licenseName": "Name (within 100 characters)",
        "licenseUrl": "URL",
        "version": "Within 100 characters",
        "externalDocsUrl": "URL",
        "externalDocsDescription": "Description (within 800 characters)"
      }
    },
    "serviceTestDetail": {
      "hints": {
        "testEnableDescription": "Only after API testing is enabled will testing be marked as a mandatory activity, and test results will be included in the overall analysis. This ensures comprehensive and accurate test coverage. You can enable API testing in the following two ways:",
        "singleApiEnable": "1. Single API Enable: Go to API debug page -> Select \"API Metrics\" in the right tab bar -> Enable corresponding options for required test types.",
        "batchEnable": "2. Batch Enable: Find the target service in the service list -> Right-click and select \"Enable or Disable Testing\" -> Batch operate all API tests under the service."
      },
      "stats": {
        "progressRate": "API Test Progress",
        "totalApis": "Total APIs",
        "enabledTestApis": "Enabled Test APIs"
      },
      "title": {
        "testDetail": "API Test Details"
      },
      "chart": {
        "testApiStats": "Test API Statistics",
        "testTypeStats": "API Test Type Statistics",
        "totalTestNum": "Total Tests",
        "functionalTest": "Functional Test",
        "performanceTest": "Performance Test",
        "stabilityTest": "Stability Test"
      },
      "status": {
        "partiallyPassed": "Partially Passed"
      },
      "placeholder": {
        "searchName": "Search name"
      }
    },
    "groupHeader": {
      "placeholder": {
        "searchApi": "Search API ID, name, path"
      },
      "sort": {
        "title": "Sort",
        "byCreatedDate": "By Created Date",
        "byName": "By Name",
        "byCreatedBy": "By Creator"
      },
      "group": {
        "byCreatedBy": "Group by Creator",
        "byMethod": "Group by Method",
        "byOwner": "Group by Owner",
        "byTag": "Group by Tag"
      },
      "actions": {
        "addHttpApi": "Add HTTP API",
        "addWebSocketApi": "Add WebSocket API",
        "serverConfig": "Server Config",
        "authConfig": "Auth Config"
      }
    },
    "apiList": {
      "messages": {
        "cloneSuccess": "Cloned successfully",
        "deleteConfirm": "Deleting the API will also delete associated follows, favorites, metrics, variables and other information. Please confirm deletion?",
        "deleteSuccess": "Deleted successfully, you can view the deleted API in the recycle bin",
        "favouriteSuccess": "Favourited successfully",
        "unfavouriteSuccess": "Unfavourited successfully",
        "followSuccess": "Followed successfully",
        "unfollowSuccess": "Unfollowed successfully",
        "execSuccess": "Executed successfully"
      },
      "buttons": {
        "mockApi": "Mock API",
        "modifyStatus": "Modify Status",
        "testScript": "Test Script",
        "generateTestScript": "Generate Test Script",
        "deleteTestScript": "Delete Test Script",
        "execTest": "Execute Test",
        "execFuncTest": "Execute Functional Test",
        "execPerfTest": "Execute Performance Test",
        "execStabilityTest": "Execute Stability Test",
        "testTask": "Test Task",
        "generateTestTask": "Generate Test Task",
        "restartTestTask": "Restart Test Task",
        "reopenTestTask": "Reopen Test Task",
        "deleteTestTask": "Delete Test Task"
      },
      "tips": {
        "generateTestScript": "Generate functional, performance and stability test scripts for the API.",
        "deleteTestScript": "Delete functional, performance and stability test scripts for the API.",
        "generateTestTask": "Generate functional, performance and stability test tasks.",
        "restartTestTask": "Update task to 'Pending', related statistics and status will be cleared.",
        "reopenTestTask": "Update task status to 'Pending', without clearing statistics and status.",
        "deleteTestTask": "Delete functional, performance and stability test tasks for the API, including test scripts."
      },
      "confirm": {
        "restartTestTask": "Update the API test task to \"Pending\", related statistics and status will be cleared. Do you confirm to restart the test task 「{summary}」?",
        "reopenTestTask": "Update the API test task to \"Pending\", without clearing statistics and status. Do you confirm to reopen the test task 「{summary}」?"
      },
      "execTest": {
        "tips": {
          "funcTestExec": "Execute current API functional test. If test script doesn't exist, it will automatically generate functional test script based on the API. If it exists, it will start the corresponding functional test script.",
          "perfTestExec": "Execute current API performance test. If test script doesn't exist, it will automatically generate performance test script based on the API. If it exists, it will start the corresponding performance test script.",
          "stabilityTestExec": "Execute current API stability test. If test script doesn't exist, it will automatically generate stability test script based on the API. If it exists, it will start the corresponding stability test script."
        },
        "titles": {
          "funcTestExec": "Execute Functional Test",
          "perfTestExec": "Execute Performance Test",
          "stabilityTestExec": "Execute Stability Test"
        }
      },
      "template": {
        "other": "Other",
        "permission": {
          "title": "API Permission",
          "onTips": "After enabling \"Permission Control\", you need to manually authorize service permissions to have corresponding API operation permissions. Permission control is enabled by default. Note: If the authorized object does not have parent project/service permissions, view permissions will be automatically granted.",
          "offTips": "After enabling \"No Permission Control\", all users will be allowed to publicly view and operate the current API. Users viewing the API must also have parent project or service permissions."
        },
        "testTask": {
          "infoText": "Generate corresponding task when API test task doesn't exist. If task already exists, it will override current test information."
        }
      }
    },
    "serviceExecTest": {
      "title": "Execute Test",
      "serverConfig": {
        "label": "Server Configuration",
        "options": {
          "useDefault": "Use Default (Server configuration when generating interface scripts)",
          "modifyVariables": "Modify Variable Configuration (Modifications will update to interface and dynamic HTTP extraction variables)"
        }
      },
      "placeholder": {
        "selectServer": "Please select server"
      },
      "labels": {
        "noVariables": "No Variables"
      }
    },
    "protocol": {
      "quickStarted": {
        "title": "Quick Started",
        "addApiTabName": "Add API",
        "debug": {
          "title": "Debug API",
          "description": "Edit and debug APIs online quickly."
        },
        "import": {
          "title": "Import Service from File",
          "description": "Import OpenAPI or Postman API YAML files or JSON files.",
          "template": "Import {type} from file"
        }
      },
      "messages": {
        "serviceConfig": "Service Configuration"
      },
      "configuration": {
        "security": "Security Scheme Configuration",
        "server": "Server Configuration",
        "syncDescription": "Automatically import external OpenAPI to current service",
        "securityDescription": "Define security schemes (Authorization) that can be used by all APIs under current service",
        "serverDescription": "Define servers (Server URL) that can be used by all APIs under current project/service"
      }
    }
  },
  "mock": {
    "title": "Mock",
    "introduce": {
      "description": "Mock can quickly simulate dependent APIs, enabling parallel development and testing, improving efficiency while avoiding production data pollution.",
      "addMockService": "Add Mock Service",
      "addMockServiceDesc": "Manually add apis after creating Mock service.",
      "importService": "Associate Existing Service",
      "importServiceDesc": "Create Mock based on existing services and apis, system automatically establishes associations.",
      "importFile": "Import from File",
      "importFileDesc": "Support Swagger, OpenAPI3.x, Postman2.0/2.1, Angus format file import."
    },
    "actions": {
      "forceDelete": "Force Delete",
      "refreshInstance": "Refresh Instance",
      "addMock": "Add Mock Service"
    },
    "messages": {
      "refreshInstanceTip": "Refreshing the instance will forcibly synchronize service configuration, interface security, CORS settings and Mock interfaces to the running service instance.",
      "refreshInstanceSuccess": "Instance Refreshed Successfully"
    },
    "addMockService": {
      "validation": {
        "enterDomain": "please enter domain",
        "enterCorrectDomain": "please enter correct domain",
        "enterName": "please enter name",
        "enterPort": "please enter port (1~65535)",
        "selectNode": "please select node",
        "selectService": "please select project service"
      },
      "form": {
        "namePlaceholder": "Service identifier naming information, up to 100 characters",
        "domainPlaceholder": "After setting the domain name for the service, the mock interface can be accessed through the domain name",
        "domainTooltip": "Domain name resolution is expected to take effect within 60 seconds.",
        "portPlaceholder": "The port listened by the service, the service cannot be modified after adding (1~65535)",
        "nodePlaceholder": "The node where the service is running, the service cannot be modified after adding",
        "servicePlaceholder": "Select or search service",
        "importSource": "Source",
        "associated": "(Associated)"
      },
      "upload": {
        "uploadFile": "Upload File",
        "uploadDescription": "Directly paste content or drag and drop files or click to upload files, the file size does not exceed 20M",
        "fileRequired": "Please upload the file first",
        "fileSizeExceeded": "The file or text size exceeds 20M, please re-upload",
        "postmanVersionError": "Please check if the file is a Postman Collection V2/V2.1 version JSON file"
      }
    },
    "detail": {
      "validation": {
        "enterParamName": "Please enter parameter name",
        "paramNameDuplicate": "Parameter name duplicate",
        "enterName": "Please enter name",
        "enterDomain": "Please enter domain"
      },
      "basicInfo": {
        "nameTooltip": "Service identifier naming information, up to 100 characters.",
        "domainTooltip": "After setting the domain name for the service, the mock interface can be accessed through the domain name, the domain name set needs to be resolved to the IP of the node where it is located.",
        "portTooltip": "The port listened by the service, the service cannot be modified after adding.",
        "nodeTooltip": "The node where the service is running, the service cannot be modified after adding.",
        "serviceConfig": "Service Configuration",
        "serviceConfigTooltip": "The main parameters of the service running, more parameter configuration please refer to the official website related documents. The modification needs to be restarted after the service takes effect.",
        "useSsl": "Enable SSL",
        "useSslTooltip": "Enable SSL option on Netty Http server, the default is not enabled.",
        "workThreadNum": "Work thread num",
        "workThreadNumTooltip": "The number of threads of the service running, the default is 100.",
        "logLevel": "Log level",
        "logLevelTooltip": "Configure request log information level, including four options: NONE, BASIC, HEADERS and FULL.",
        "logFileLevel": {
          "none": "No log record.",
          "basic": "Only record request method and URL as well as response status code and execution time, the default.",
          "headers": "Record basic information as well as request and response headers.",
          "full": "Record request and response headers, body and metadata."
        },
        "sendRequestLog": "Send request log",
        "sendRequestLogTooltip": "Whether to send Mock request log to the service side.",
        "maxContentLength": "Max request size",
        "maxContentLengthTooltip": "The maximum allowed request size, the default is 1000*1024*1024 (1000MB).",
        "pushbackThreadNum": "Pushback thread num",
        "pushbackThreadNumTooltip": "The number of threads for processing pushback requests, the default is 8.",
        "pushbackConnectTimeout": "Pushback connect timeout",
        "pushbackConnectTimeoutTooltip": "The maximum connection timeout when pushing, in milliseconds, the default is 5000.",
        "pushbackRequestTimeout": "Pushback request timeout",
        "pushbackRequestTimeoutTooltip": "The maximum request timeout when pushing, in milliseconds, the default is -1 not timeout.",
        "security": "Api Security",
        "securityHints": "The modification needs to be restarted after the service takes effect.",
        "securityTooltip": "Used to configure the authorization information required for accessing the interface, after enabling the configuration, the interface must carry the authorization parameter to access the interface. Up to 10 can be added.",
        "in": "Location",
        "paramsValueRule": "Please enter value"
      },
      "apis": {
        "hints": "When an interface is not yet implemented or inaccessible, Mock interfaces can be used to simulate the behavior and data return of real interfaces for development and testing work, thereby improving development and testing efficiency. Note: Mock interfaces take effect only after being saved.",
        "match": "Match",
        "content": "Content",
        "pushback": "Pushback",
        "proxy": "Proxy",
        "actions": {
          "addApi": "Add API",
          "addResponse": "Add Response",
          "deleteResponse": "Delete Response",
          "copyApiAdd": "Copy API Add",
          "linkApiAdd": "Link API Add",
          "testRequest": "Test Request",
          "refreshInstance": "Refresh Instance API",
          "copyApi": "Copy API Add",
          "linkApi": "Link API Add",
          "importApi": "Import API"
        },
        "messages": {
          "namePlaceholder": "Maximum 400 characters",
          "descriptionPlaceholder": "Maximum 20000 characters",
          "maxResponseTip": "Maximum 50 responses can be configured",
          "matchTooltip": "Specify the matching request conditions that need to be met to return the current response. Note: When there are multiple responses that meet the matching conditions, the response with the highest priority will be returned. If no matching conditions are configured or the priorities are the same, the first condition or the first configured condition will be returned.",
          "priorityTooltip": "The higher the value, the higher the priority. Value range: 0~2147483647. Note: The response with the highest priority will only be returned when there are multiple responses that meet the matching conditions.",
          "pushbackTooltip": "Pushback can be used to automatically push an Http request to a specified address after receiving a Mock request, such as: payment callback.",
          "copyApiSuccess": "Copy API added successfully",
          "linkApiSuccess": "Link API added successfully",
          "importDemoSuccess": "Import demo successfully",
          "refreshInstanceSuccess": "Refresh instance API successfully",
          "noResponseData": "No response data ~",
          "nameDuplicate": "Name duplicate",
          "dataError": "Data error, please check and correct before saving.",
          "proxyNotConnected": "Proxy not connected, please check proxy configuration",
          "yamlFormatError": "YAML content format error, please check and correct",
          "refreshInstanceTip": "Refreshing the instance API will force synchronization of current Mock API information to the running service instance."
        },
        "components": {
          "delayParameter": {
            "to": "to",
            "maxLessThanMin": "Maximum value is less than minimum value",
            "noDelay": "No Delay",
            "fixedDelay": "Fixed Delay",
            "randomDelay": "Random Delay"
          },
          "importFileModal": {
            "title": "Encode File",
            "maxFileSize": "Maximum 10M file encoding supported",
            "encoding": "Encoding"
          },
          "pushBack": {
            "pushUrl": "Push Back URL",
            "urlPlaceholder": "Maximum 800 characters",
            "urlError": "Push back URL format error",
            "requestError": "Request Error",
            "proxyNotConnected": "Proxy not connected, please check proxy configuration",
            "autoPush": "Auto push after request trigger",
            "manualSend": "Manual Send",
            "delay": "Push Back Delay"
          },
          "match": {
            "maxParametersTip": "Maximum 20 matching parameters allowed",
            "pathTooltip": "Path starts with slash /, representing root path.\nPath consists of multiple path segments separated by slash /.\nEach path segment can be composed of letters, numbers, hyphens, underscores and other characters, and does not contain special characters (such as ?, #, etc.).\nPath segments cannot be empty strings.",
            "operatorPlaceholder": "Operator",
            "pathPlaceholder": "Start with slash /; path segments separated by slash /, no special characters (such as ?, #, etc.)",
            "regexPlaceholder": "Regular Expression",
            "onlyOnePath": "Only one path can be added",
            "onlyOneRequestBody": "Only one request body can be added"
          },
          "importApiModal": {
            "title": "Import API",
            "hints": "Supports Swagger2.0, OpenAPI3.x, and Angus format interface file imports.",
            "duplicateStrategy": "Processing strategy when encountering duplicates",
            "deleteNotExisted": "Whether to delete when current interface does not exist in imported data"
          },
          "content": {
            "maxHeadersTip": "Maximum {max} response headers supported",
            "maxHeadersTooltip": "Maximum {max} response headers supported",
            "mockFunctionHelper": "Mock Function Helper",
            "insertFile": "Insert File"
          }
        }
      },
      "cors": {
        "title": "Cross-Origin Setting",
        "description": "Resolve browser cross-origin access restrictions and configure cross-origin access policies. Restart service after changes.",
        "enabledTooltip": "Enable cross-origin access configuration, disabled by default.",
        "allowOrigin": "Allow Origin",
        "allowOriginTooltip": "Allowed cross-origin domains, default * (all domains).",
        "allowCredentials": "Allow access credentials",
        "allowCredentialsTooltip": "Allow cross-origin requests to carry credentials (like cookies), enabled by default.",
        "allowRequestMethods": "Allow request methods",
        "allowRequestMethodsTooltip": "Allowed HTTP request methods, supports all common methods by default.",
        "allowRequestHeaders": "Allow request headers",
        "allowRequestHeadersTooltip": "Allowed request header fields, no restrictions by default.",
        "allowExposeHeaders": "Allow expose headers",
        "allowExposeHeadersTooltip": "Response header fields accessible to clients, no restrictions by default."
      },
      "requestRecord": {
        "hints": "Mock api call logs, max 3 per second, 100 records per interface. Enable/disable logging in \"Settings\"->\"Send request log\". Enabling may affect performance.",
        "apiName": "Api Name",
        "requestId": "Request ID",
        "requestTime": "Request Time",
        "requestUrl": "Request URL"
      },
      "log": {
        "lineOptions": {
          "last500": "Recent 500 lines",
          "last1000": "Recent 1000 lines",
          "last10000": "Recent 10000 lines"
        },
        "notifications": {
          "noDownloadContent": "No downloadable content"
        },
        "errorInfo": "Connection failed, address:",
        "logFile": "Log File:",
        "browseLog": "Browse Log:",
        "autoRefresh": "Auto Refresh:"
      },
      "monitor": {
        "apiName": "Api Name",
        "apiInfo": "Api Information",
        "requestCount": "Request Count",
        "mockExceptionCount": "Mock Exception Count",
        "pushbackCount": "Pushback Count",
        "successCount": "Success Count",
        "exceptionCount": "Exception count",
        "apiCount": "Api Count",
        "searchApiNamePath": "Search api name, path",
        "tooltips": {
          "requestCount": "The number of times the mock interface is called.",
          "mockExceptionCount": "The number of times the mock interface returns an Http status code of 4xx and 5xx response.",
          "pushbackCount": "The number of times the mock service pushes a request to the user's configured pushback interface.",
          "successCount": "The number of times the request returns a status code of 2xx.",
          "exceptionCount": "The number of times the mock interface configuration errors or the program itself causes errors."
        }
      },
      "settings": {
        "logTooltip": "Record basic information and request/response headers.",
        "corsTooltip": "Resolve browser cross-origin access restrictions and configure cross-origin access policies. Restart service after changes.",
        "enableNettyLog": "Enable Netty log",
        "enableNettyLogTooltip": "Recommended for debug mode only, disabled by default."
      }
    }
  },
  "apiDesign": {
    "title": "Design",
    "addedDesigns": "Added Designs",
    "notAddedYet": "No designs added yet, click to add",
    "introduce": {
      "title": "About Design",
      "description": "Interface design for OpenAPI specifications, meeting the needs of interface testing and documentation generation. The graphical interface is suitable for users unfamiliar with OpenAPI specifications, while users familiar with OpenAPI specifications are recommended to use Swagger Editor for more efficient design completion."
    },
    "actions": {
      "add": "Add Design",
      "edit": "Edit Design",
      "design": "Design",
      "generateService": "Generate Service",
      "importService": "Import Service",
      "importDesign": "Import Design",
      "saveDraft": "Save Draft",
      "publish": "Publish Design"
    },
    "columns": {
      "openapiSpecVersion": "Specification",
      "designService": "Associated Service"
    },
    "messages": {
      "designByMe": "Designed by Me",
      "released": "Released",
      "unreleased": "Draft",
      "namePlaceholder": "Enter design name, maximum 100 characters",
      "versionPlaceholder": "OpenAPI document specification version number, default 3.0.1.",
      "modifyTip": "Last modified at {time}"
    },
    "importDesignModal": {
      "fileRule": "Please upload file",
      "uploadFile": "Upload File",
      "uploadTip": "Click to upload Swagger2.0, OpenAPI3.x files, file size not exceeding 20M"
    }
  },
  "apiServer": {
    "title": "Server",
    "addedServers": "Added Servers",
    "notAddedYet": "No servers added yet, click to add",
    "introduce": {
      "title": "About Server",
      "description": "Define the API servers and their dynamic parts, including server and variables. Servers declare the API's base URL list, each entry includes a URL and optional description to indicate the base path. Variables represent dynamic placeholders in the URL and can be substituted per environment.",
      "integration": {
        "title": "Easy CI/CD Integration",
        "description": "In CI/CD pipelines, server definitions let automated tests switch endpoints by environment, aligning with DevOps practices."
      },
      "env": {
        "title": "Multi-env Support",
        "description": "Use multiple servers or variable for development, testing, and production, and switch environments without code changes."
      },
      "version": {
        "title": "Version Management",
        "description": "Configure dedicated servers or variable values for each API version and clearly distinguish them in documentation to avoid confusion."
      },
      "url": {
        "title": "Full URL (Path)",
        "description": "Relationship among full URL, server, and endpoint"
      }
    },
    "actions": {
      "addServer": "Add Server",
      "updateToApi": "Update to Associated APIs",
      "addVariable": "Add Variable",
      "deleteVariable": "Delete Variable"
    },
    "messages": {
      "addQuotaTip": "Added {add}, maximum {max} allowed.",
      "deleteConfirmTip": "Confirm deletion of this server?",
      "serverUrlExistedTip": "Server URL already exists, please re-enter",
      "serverVariableDuplicatedTip": "Variables in Server URL cannot be repeated",
      "variableNameDuplicatedTip": "Variable name is duplicated",
      "variableValueDuplicatedTip": "Variable value is duplicated",
      "serverConfigErrorTip": "Server configuration error, please check and correct before saving.",
      "urlPlaceholder": "URL prefix pointing to target host, e.g.: ",
      "serverServiceTip": "Server associated api service",
      "serverDescriptionPlaceholder": "Server description, maximum 400 characters",
      "variableQuotaTip": "Maximum 50 variables can be added",
      "variableNamePlaceholder": "Variable name, maximum 100 characters",
      "variableValuePlaceholder": "Variable value, maximum 400 characters",
      "variableDescriptionPlaceholder": "Variable description, maximum 400 characters"
    },
    "columns": {
      "serverExample": "Example",
      "variableTitle": "Variables"
    }
  },
  "apiShare": {
    "title": "Share",
    "addedShares": "Added Shares",
    "notAddedYet": "No shares added yet, click to add",
    "introduce": {
      "title": "About Share",
      "description": "When you need to integrate interfaces with external partners, customers, or other teams, you can use the \"Share\" feature to pass interface information to them, simplifying the communication process. Sharing includes detailed interface description information, including interface servers, authentication, interface addresses, request formats, and response formats, ensuring everyone has a consistent understanding of the interface."
    },
    "actions": {
      "addShare": "Add Share",
      "editShare": "Edit Share"
    },
    "columns": {
      "displayOptions": "Display",
      "includeServiceInfo": "Show Service Description",
      "viewCount": "View Count",
      "allowDebug": "Allow Debug",
      "fieldStyle": "Field Style",
      "shareScope": "Share Scope"
    },
    "messages": {
      "namePlaceholder": "Enter share name, maximum 100 characters",
      "remarkPlaceholder": "Please enter share remark, will be displayed in share information, maximum 400 characters",
      "expiredDateHint": "Permanently valid when not specified.",
      "selectedApis": "Selected {count} APIs",
      "copyToClipboardSuccess": "Successfully copied to clipboard",
      "copyLinkSuccess": "Share \"{name}\", access address: {url}"
    },
    "schemaStyle": {
      "table": "Table",
      "tree": "Tree"
    }
  }
}
