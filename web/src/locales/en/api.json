{
  "apis": {
    "welcome": {
      "title": "Welcome to Angus API!",
      "description": "Here you and your team can complete the following work:",
      "features": [
        "Edit and debug APIs online;",
        "Manage projects, services, APIs and test tasks;",
        "Conduct API functional testing, performance testing and stability testing to ensure delivery of stable systems that meet business requirements."
      ]
    },
    "quickAccess": {
      "title": "Quick Access",
      "debug": {
        "title": "Debug API",
        "description": "Edit and debug APIs online quickly.",
        "action": "Debug"
      },
      "addProject": {
        "title": "Add Project/Service",
        "description": "Organize APIs through projects or services, projects can contain multiple services (such as microservices) and APIs, services can only contain APIs.",
        "addProject": "Add Project",
        "addService": "Add Service"
      },
      "import": {
        "title": "Import Service from File",
        "description": "Import OpenAPI or Postman API YAML files or JSON files.",
        "action": "Import",
        "template": "Import {type} from file"
      }
    },
    "navigation": {
      "myApis": "My APIs",
      "projects": "Projects",
      "services": "Services",
      "apis": "APIs",
      "scenarios": "Scenarios",
      "myTasks": "My Tasks",
      "favorites": "Favorites",
      "follows": "Follows",
      "activities": "Activities",
      "apiSamples": "API Sample Collection"
    },
    "statistics": {
      "today": "Today:",
      "lastWeek": "Last Week:"
    },
    "actions": {
      "cancelAllFavorites": "Cancel All Favorites",
      "cancelAllFollows": "Cancel All Follows",
      "projectConfig": "Project Configuration"
    },
    "configuration": {
      "sync": "Sync Configuration",
      "security": "Security Scheme Configuration",
      "server": "Server Configuration",
      "performance": "Service Performance Metrics",
      "share": "Add Share",
      "variables": "Define Variables",
      "syncDescription": "Automatically import external OpenAPI to current {type}",
      "securityDescription": "Define security schemes (Authorization) that can be used by all APIs under current {type}",
      "serverDescription": "Define servers (Server URL) that can be used by all APIs under current project/service",
      "performanceDescription": "Set default performance metrics for APIs under {type}, performance metrics will affect performance test pass rate; if you want to set performance metrics for a specific API separately, you can set it in API performance configuration",
      "shareDescription": "Through sharing, you can authorize others to view API documentation and debug APIs within a specified time",
      "variablesDescription": "Through defining variables, you can reuse a parameter value or control condition execution"
    },
    "search": {
      "taskName": "Search task name",
      "scenario": "Search scenario"
    },
    "messages": {
      "cancelAllFavoritesSuccess": "Cancel all favorites successful",
      "cancelAllFollowsSuccess": "Cancel all follows successful",
      "noFavorites": "No favorites",
      "noFollows": "No follows",
      "noData": "No data",
      "cancelSuccess": "Cancel successful",
      "cancelFavorite": "Cancel favorite",
      "cancelFollow": "Cancel follow",
      "importProject": "Import project",
      "importSuccess": "Import successful"
    },
    "columns": {
      "createdTime": "Created Time",
      "executionId": "Execution ID",
      "executionStatus": "Execution Status",
      "taskStatus": "Task Status",
      "testResult": "Test Result",
      "dueTime": "Due Time",
      "priority": "Priority"
    }
  },
  "service": {
    "serverConfig": {
      "title": "Server Configuration",
      "hints": "Define servers (Server URL) that can be used by all APIs under current service, maximum 50 servers can be added.",
      "actions": {
        "addServerDemo": "Server Example",
        "addServer": "Server",
        "updateToApis": "Update to Associated APIs",
        "edit": "Edit",
        "delete": "Delete",
        "cancel": "Cancel",
        "save": "Save",
        "addVariable": "Add Variable",
        "deleteVariable": "Delete Variable"
      },
      "messages": {
        "updateToApisSuccess": "Successfully updated to associated APIs",
        "confirmDelete": "Confirm deletion of this server?",
        "configError": "Server configuration error, please check and correct before saving.",
        "serverUrlExists": "Server URL already exists, please re-enter",
        "variableNotRepeat": "Variables in Server URL cannot be repeated",
        "variableNameRepeat": "Variable name is duplicated",
        "variableValueRepeat": "Variable value is duplicated"
      },
      "form": {
        "url": "URL",
        "urlPlaceholder": "URL prefix pointing to target host, e.g.: https://{env}.xcan.cloud:{prot}/{path}",
        "description": "Description",
        "descriptionPlaceholder": "Server description, maximum 400 characters",
        "variables": "Variables",
        "variableName": "Name",
        "variableNamePlaceholder": "Variable name, maximum 100 characters",
        "variableValue": "Value",
        "variableValuePlaceholder": "Variable value, maximum 400 characters",
        "variableDescription": "Description",
        "variableDescriptionPlaceholder": "Variable description, maximum 400 characters",
        "default": "Default"
      },
      "tips": {
        "maxVariables": "Maximum 50 variables can be added",
        "variableNameNotRepeat": "Variable names cannot be duplicated",
        "variableValueNotRepeat": "Values of the same variable cannot be duplicated"
      },
      "columns": {
        "url": "URL",
        "description": "Description",
        "variables": "Variables",
        "name": "Name",
        "value": "Value",
        "description": "Description"
      }
    },
    "shareModal": {
      "title": "Share Management",
      "actions": {
        "addShare": "Add Share",
        "edit": "Edit",
        "delete": "Delete",
        "copy": "Copy",
        "confirm": "Confirm",
        "cancel": "Cancel",
        "loadMore": "Load More"
      },
      "messages": {
        "deleteSuccess": "Share record deleted successfully",
        "passwordRequired": "Password cannot be empty",
        "updatePasswordSuccess": "Password updated successfully",
        "copySuccess": "Copied successfully"
      },
      "form": {
        "link": "Link",
        "password": "Password",
        "validityPeriod": "Validity Period",
        "permanent": "Permanent"
      },
      "copyFormat": {
        "withPassword": "Link: {url} Password: {password}",
        "withoutPassword": "Link: {url}"
      }
    },
    "statusModal": {
      "title": "Modify Status",
      "messages": {
        "updateStatusSuccess": "Status updated successfully"
      },
      "form": {
        "status": "Status"
      },
      "tips": {
        "serviceStatusChange": "Modifying service status will synchronously modify the status of all APIs under the service.",
        "servicePublish": "Publishing a service will publish all APIs under the service. Published services and APIs cannot be modified or saved.",
        "apiPublish": "After publishing an API, the basic information and parameter information of the API cannot be modified or saved"
      }
    },
    "syncConfig": {
      "title": "Sync Configuration",
      "hints": "Automatically import external OpenAPI to current service, maximum 10 configurations allowed.",
      "actions": {
        "add": "Add",
        "demo": "Demo",
        "syncAll": "Sync All",
        "edit": "Edit",
        "sync": "Sync",
        "test": "Test",
        "delete": "Delete",
        "save": "Save",
        "cancel": "Cancel",
        "clear": "Clear",
        "addAuth": "Add",
        "deleteAuth": "Delete"
      },
      "messages": {
        "deleteSuccess": "Deleted successfully",
        "testSuccess": "Configuration test passed",
        "syncSuccess": "Sync successful",
        "syncAllSuccess": "Sync all successful",
        "saveSuccess": "Saved successfully",
        "nameExists": "Name already exists",
        "authNameExists": "Authentication name already exists",
        "noValidConfig": "No valid sync configuration found, please save data first",
        "dataNotSaved": "Data not saved, please save data or cancel editing first",
        "inputContent": "Please enter content"
      },
      "form": {
        "name": "Name",
        "namePlaceholder": "Name",
        "source": "Source",
        "address": "Address",
        "addressPlaceholder": "Address",
        "duplicateStrategy": "Strategy when encountering duplicates",
        "cover": "Cover",
        "ignore": "Ignore",
        "deleteWhenNotExist": "Whether to delete local APIs when sync APIs do not exist",
        "yes": "Yes",
        "no": "No",
        "auth": "Authentication",
        "authRequired": "Required when sync address is protected. Maximum 10 allowed.",
        "paramName": "Parameter Name",
        "paramPosition": "Parameter Position",
        "paramValue": "Parameter Value",

        "positionPlaceholder": "Position",
        "valuePlaceholder": "Value"
      },
      "tips": {
        "addDemo": "Add demo data",
        "syncAllTip": "Only sync saved configurations",
        "lastSync": "Last Sync"
      },
      "options": {
        "header": "header",
        "query": "query"
      }
    },
    "tag": {
      "hints": {
        "main": "Tags serve as additional metadata for APIs to group them. An API can have multiple tags, meaning it belongs to multiple groups. The order of tag definitions will be consistent with the order of APIs grouped by tags and the order of interface display in documentation.",
        "sub": "Each tag name must be unique; not all interfaces need to be associated with tags; maximum 2000 tags can be added."
      },
      "actions": {
        "add": "Add",
        "edit": "Edit",
        "delete": "Delete",
        "save": "Save",
        "cancel": "Cancel",
        "expand": "Expand",
        "collapse": "Collapse"
      },
      "messages": {
        "deleteSuccess": "Deleted successfully",
        "saveSuccess": "Saved successfully",
        "nameExists": "Tag name already exists",
        "dataNotSaved": "Data not saved, please save data or cancel editing first"
      },
      "form": {
        "name": "Name",
        "namePlaceholder": "Please enter tag name",
        "description": "Description",
        "descriptionPlaceholder": "Enter description, supports Markdown syntax",
        "externalDocsUrl": "External Documentation URL",
        "externalDocsUrlPlaceholder": "Please enter external documentation URL",
        "externalDocsDescription": "External Documentation Description",
        "externalDocsDescriptionPlaceholder": "Enter description, supports Markdown syntax",
        "externalDocsLink": "External Documentation Link"
      },
      "validation": {
        "enterUrl": "Please enter URL address",
        "enterCorrectUrl": "Please enter correct URL address"
      }
    },
    "translateModal": {
      "title": "Translation",
      "description": {
        "title": "OpenAPI Translation Instructions",
        "useCases": {
          "title": "Use Cases",
          "items": [
            "Provide support for multilingual API documentation",
            "Internationalize API services",
            "Cross-regional API service deployment",
            "Generate multilingual developer documentation"
          ]
        },
        "notes": {
          "title": "Notes",
          "items": [
            "AngusTester will use DeepSeek for translation by default",
            "Translation is processed asynchronously, you will receive a notification message when completed",
            "Translation process may take from a few minutes to several hours, depending on API scale",
            "After translation is completed, you can view it in \"APIs → Services\""
          ]
        }
      },
      "configuration": {
        "title": "OpenAPI Translation Configuration",
        "service": "API Service",
        "servicePlaceholder": "Please select service",
        "sourceLanguage": "Source Language",
        "targetLanguage": "Target Language"
      },
      "actions": {
        "cancel": "Cancel",
        "submit": "Submit"
      },
      "messages": {
        "translateComplete": "Translation completed",
        "selectService": "Please select service"
      }
    },
    "timeline": {
      "labels": {
        "timeConsuming": "Time Consuming Items",
        "time": "Time",
        "totalTime": "Total Time Consuming"
      },
      "items": {
        "dnsLookup": "DNS Lookup",
        "tcpConnection": "TCP Connection",
        "ssl": "SSL",
        "requestSent": "Request Sent",
        "waiting": "Waiting",
        "contentDownload": "Content Download"
      }
    },
    "apiAuthorization": {
      "title": "Authentication Type",
      "types": {
        "noAuth": "No Authentication",
        "basicAuth": "Basic Auth",
        "bearerToken": "Bearer Token",
        "apiKey": "Api Key",
        "oauth2": "OAuth 2.0",
        "extends": "Public"
      },
      "extends": {
        "selectServiceSecurity": "Select Service Security Authentication"
      },
      "basic": {
        "username": "Username",
        "usernamePlaceholder": "Please enter username",
        "password": "Password",
        "passwordPlaceholder": "Please enter password"
      },
      "bearer": {
        "token": "Token",
        "tokenPlaceholder": "Please enter access token"
      },
      "oauth2": {
        "configMethod": "Configuration Method:",
        "existingToken": "Existing Token",
        "generateToken": "Generate Token",
        "accessToken": "Access Token",
        "type": "Type",
        "clientAuth": "Client Authentication",
        "getToken": "Get Token"
      },
      "apiKey": {
        "name": "Name",
        "value": "Value",
        "position": "Position"
      },
      "oauth2Fields": {
        "authorizationUrl": "Authorization URL",
        "callbackUrl": "Callback URL",
        "tokenUrl": "Access Token URL",
        "refreshUrl": "Refresh Token URL",
        "clientId": "Client ID",
        "clientSecret": "Client Secret",
        "username": "Username",
        "password": "Password",
        "encryptionMethod": "Encryption Method",
        "verificationCode": "Verification Code",
        "scope": "Scope"
      },
      "flowTypes": {
        "authorizationCode": "Authorization Code",
        "password": "Password Credentials",
        "implicit": "Implicit",
        "clientCredentials": "Client Credentials"
      },
      "clientAuthTypes": {
        "basicAuthHeader": "Send via Basic Auth Header",
        "requestBody": "Send via Request Body"
      },
      "encryptionTypes": {
        "sha256": "SHA-256",
        "plain": "Plain"
      },
      "messages": {
        "authorizationFailed": "Authorization failed Couldn't complete authentication.",
        "proxyNotConnected": "Proxy not connected, please check proxy configuration",
        "maxLengthTip": "Maximum {maxLength} characters allowed"
      }
    },
    "apiExecDetail": {
      "tabs": {
        "functionalTest": "Functional Test",
        "performanceTest": "Performance Test",
        "stabilityTest": "Stability Test",
        "customTest": "Custom Test",
        "testTask": "Test Task"
      },
      "testSummary": {
        "allTests": "All Tests",
        "successRate": "Success Rate",
        "functional": "Functional",
        "performance": "Performance",
        "stability": "Stability",
        "custom": "Custom",
        "testInterfaces": "Test Interfaces",
        "resultIndicators": "Result Indicators",
        "nonStandard": "Non-Standard"
      },
      "testStatus": {
        "untested": "Untested",
        "passed": "Passed",
        "notPassed": "Not Passed"
      },
      "indicators": {
        "total": "Total",
        "success": "Success",
        "failed": "Failed",
        "disabled": "Disabled",
        "tps": "Transactions Per Second (TPS)",
        "responseTime": "Response Time (P90)",
        "errorRate": "Error Rate"
      },
      "task": {
        "noData": "No Data",
        "columns": {
          "code": "Code",
          "name": "Name",
          "sprint": "Sprint",
          "priority": "Priority",
          "assignee": "Assignee",
          "confirmor": "Confirmor",
          "deadline": "Deadline"
        },
        "overdue": "Overdue"
      }
    },
    "mockApi": {
      "description": "Mock APIs can quickly generate and simulate the APIs you depend on, enabling parallel development and testing, thereby accelerating development speed, achieving more comprehensive testing, and delivering stable products or applications earlier. You can create corresponding mock interfaces for the current interface through two methods: \"Generate Mock API\" or \"Associate Mock API\". Mock interfaces will provide simulated data for convenient interface debugging and testing.",
      "columns": {
        "apiName": "API Name",
        "mockServiceName": "Mock Service Name",
        "method": "Method",
        "mockServiceHostUrl": "Service Address",
        "createdBy": "Created By",
        "createdDate": "Created Date"
      },
      "actions": {
        "cancelAssociation": "Cancel Association",
        "generateMockApi": "Generate Mock API",
        "associateMockApi": "Associate Mock API"
      },
      "messages": {
        "generateSuccess": "Mock API generated successfully",
        "associateSuccess": "Association successful",
        "cancelAssociationSuccess": "Association cancelled successfully"
      },
      "createTypes": {
        "generate": {
          "title": "Generate Mock API",
          "description": "Create a new mock version based on the current interface. After creation, you can use the Mock API for data simulation and status testing, thereby achieving more efficient interface debugging."
        },
        "associate": {
          "title": "Associate Mock API",
          "description": "Associate the current interface with an existing Mock service interface. After association, data simulation and status testing can be performed during interface debugging."
        }
      },
      "modal": {
        "generateTitle": "Generate Mock API",
        "associateTitle": "Associate Mock API",
        "mockServicePlaceholder": "Please select Mock service",
        "mockApiPlaceholder": "Please select Mock API",
        "summaryPlaceholder": "Please enter the corresponding Mock API name, if not specified, the current interface name will be used by default",
        "generateHint": "Generate Mock API based on the current interface.",
        "associateHint": "Associate with existing interfaces under Mock service."
      },
      "statistics": {
        "requestNum": "Request Count",
        "pushbackNum": "Pushback Count",
        "simulateErrorNum": "Simulate Error Count",
        "successNum": "Success Count",
        "exceptionNum": "Exception Count"
      }
    },
    "apiRequestBody": {
      "contentType": "Content-Type",
      "actions": {
        "importComponent": "Import Component",
        "copyComponent": "Copy Component",
        "format": "Format",
        "compress": "Compress",
        "uploadFile": "Upload File",
        "cancelReference": "Cancel Reference"
      },
      "tips": {
        "fileSizeLimit": "Interface debugging supports up to 100MB files, files within 10MB can be saved, exceeding this limit will not be saved.",
        "componentReference": "Component Reference: {ref}"
      },
      "modal": {
        "title": "Component",
        "searchPlaceholder": "Search component name",
        "columns": {
          "componentName": "Component Name",
          "modifiedBy": "Modified By",
          "modifiedTime": "Modified Time"
        }
      },
      "form": {
        "name": "Name",
        "namePlaceholder": "Please enter parameter name",
        "type": "Type",
        "typePlaceholder": "Please select parameter type",
        "required": "Required",
        "description": "Description",
        "descriptionPlaceholder": "Please enter description",
        "value": "Value",
        "valuePlaceholder": "Please enter debug value, maximum {maxLength} characters supported",
        "format": "Format",
        "formatPlaceholder": "Please select format",
        "example": "Example",
        "examplePlaceholder": "Please enter example value",
        "defaultValue": "Default Value",
        "defaultValuePlaceholder": "Please enter default value",
        "minLength": "Min Length",
        "minLengthPlaceholder": "Please enter minimum length",
        "maxLength": "Max Length",
        "maxLengthPlaceholder": "Please enter maximum length",
        "minimum": "Minimum",
        "minimumPlaceholder": "Please enter minimum value",
        "maximum": "Maximum",
        "maximumPlaceholder": "Please enter maximum value",
        "pattern": "Pattern",
        "patternPlaceholder": "Please enter regular expression",
        "enum": "Enum Values",
        "enumPlaceholder": "Please enter enum values, multiple values separated by commas",
        "variable": "Variable",
        "setVariable": "Set as Variable",
        "cancelVariable": "Cancel Variable"
      },
      "messages": {
        "fileUploadSuccess": "File uploaded successfully",
        "fileUploadFailed": "File upload failed",
        "fileRemoveSuccess": "File removed successfully",
        "formatSuccess": "Formatted successfully",
        "compressSuccess": "Compressed successfully",
        "componentImportSuccess": "Component imported successfully",
        "componentCopySuccess": "Component copied successfully",
        "setVariableSuccess": "Variable set successfully",
        "variableNameInvalid": "Name does not meet variable requirements, allows numbers, letters, !@$%^&*()_-+=./ etc.",
        "debugFileSizeLimit": "Total upload file size for request body during debugging cannot exceed 100MB"
      }
    },
    "apiRequestCookie": {
      "form": {
        "namePlaceholder": "Parameter Name",
        "inputNamePlaceholder": "Please enter parameter name",
        "valuePlaceholder": "Please enter debug value, maximum {maxLength} characters supported"
      },
      "actions": {
        "copyValue": "Copy Value"
      },
      "tips": {
        "componentReference": "Component Reference: {ref}"
      },
      "messages": {
        "copySuccess": "Successfully copied value to clipboard"
      }
    },
    "apiRequestHeader": {
      "form": {
        "namePlaceholder": "Parameter Name",
        "inputNamePlaceholder": "Please enter parameter name",
        "valuePlaceholder": "Please enter debug value, maximum {maxLength} characters supported"
      },
      "actions": {
        "copyValue": "Copy Value"
      },
      "tips": {
        "componentReference": "Component Reference: {ref}"
      },
      "messages": {
        "copySuccess": "Successfully copied value to clipboard"
      }
    },
    "apiRequestParams": {
      "form": {
        "namePlaceholder": "Parameter Name",
        "inputNamePlaceholder": "Please enter parameter name",
        "typePlaceholder": "Please select parameter type",
        "valuePlaceholder": "Please enter debug value, maximum {maxLength} characters supported"
      },
      "actions": {
        "copyValue": "Copy Value"
      },
      "tips": {
        "componentReference": "Component Reference: {ref}"
      },
      "messages": {
        "copySuccess": "Successfully copied value to clipboard"
      }
    },
    "apiServerPath": {
      "form": {
        "pathPlaceholder": "API path, starting with \"/\"",
        "serverPlaceholder": "Server address, URL prefix for API address"
      },
      "actions": {
        "sendRequest": "Send Request",
        "abortRequest": "Abort Request",
        "saveToUnarchived": "Save to Unarchived",
        "archive": "Archive",
        "generateCase": "Generate Case",
        "copyUrl": "Copy URL",
        "nextStep": "Next Step"
      },
      "tips": {
        "variableNotFound": "Variable not found, please define the variable first or refresh and try again",
        "default": "Default"
      },
      "labels": {
        "current": "Current",
        "public": "Public",
        "mock": "Mock",
        "history": "History"
      }
    },
    "apiSetting": {
      "form": {
        "timeoutPlaceholder": "0 ~ 9007199254740991",
        "retryNumPlaceholder": "0 ~ 6",
        "maxRedirectsPlaceholder": "0 ~ 10"
      },
      "labels": {
        "paramValidation": "Parameter Format Validation",
        "connectTimeout": "Connection Timeout",
        "readTimeout": "Read Timeout",
        "retryNum": "Retry Count on Failure",
        "maxRedirects": "Maximum Redirect Count"
      },
      "descriptions": {
        "paramValidation": "When enabled, parameters will be validated first, and requests will only be sent after parameter validation passes. Default is disabled.",
        "connectTimeout": "Specifies the maximum waiting time for establishing a connection between client and server. 0 means never timeout, default is 6 seconds.",
        "readTimeout": "Specifies the maximum waiting time for the client to receive server connection closure after establishing a connection. 0 means never timeout, default is 60 seconds.",
        "retryNum": "Number of retries when request fails. Default is no retry, maximum allowed is 6 times.",
        "maxRedirects": "Number of redirects when request returns 3xx status code. Default is 1 time, maximum allowed is 10 times."
      },
      "units": {
        "milliseconds": "ms",
        "times": "times"
      }
    },
    "apiSliderSave": {
      "form": {
        "summaryPlaceholder": "Please enter API name, within 40 characters",
        "operationIdPlaceholder": "Please enter operation ID, within 40 characters",
        "ownerPlaceholder": "Please select API owner",
        "servicePlaceholder": "Please select service",
        "tagsPlaceholder": "Please enter or select tags, press Enter to confirm input",
        "statusPlaceholder": "Please select status",
        "descriptionPlaceholder": "Limit input to 20000 characters, supports markdown syntax",
        "externalDocsUrlPlaceholder": "Enter external documentation link",
        "externalDocsDescPlaceholder": "Enter external documentation description"
      },
      "labels": {
        "summary": "API Name",
        "operationId": "Operation ID",
        "owner": "API Owner",
        "service": "Service",
        "tags": "Tags",
        "status": "Status",
        "deprecated": "Deprecated",
        "description": "Description",
        "externalDocs": "External Documentation"
      },
      "actions": {
        "save": "Save",
        "cancel": "Cancel",
        "nextStep": "Next Step"
      },
      "tips": {
        "duplicateApi": "Note: APIs under the same service cannot be duplicated, i.e., the combination of request method and API path (excluding query parameters) must be unique.",
        "tagsDescription": "Tags are used as additional metadata for API grouping.",
        "externalDocsDescription": "Reference external resources as extensions to current API documentation.",
        "releasedApiNotEditable": "Released APIs cannot be modified"
      },
      "validation": {
        "summaryRequired": "Please enter API name, within 100 characters",
        "ownerRequired": "Please select API owner",
        "serviceRequired": "Please select service",
        "statusRequired": "Please select status"
      },
      "messages": {
        "saveSuccess": "Saved successfully"
      },
      "options": {
        "normal": "Normal",
        "deprecated": "Deprecated"
      },
      "debug": {
        "example": "Debug Example"
      }
    },
    "apiUnarchivedrSave": {
      "form": {
        "summaryPlaceholder": "Please enter API name, within 40 characters",
        "descriptionPlaceholder": "Limit input to 20000 characters, supports markdown syntax"
      },
      "labels": {
        "summary": "API Name",
        "description": "Description"
      },
      "actions": {
        "save": "Save",
        "cancel": "Cancel"
      },
      "tips": {
        "unarchivedApiDescription": "Unarchived APIs are temporary debugging interfaces for users, only visible to the user who added them"
      },
      "validation": {
        "summaryRequired": "Please enter API name, within 100 characters"
      },
      "messages": {
        "saveSuccess": "Saved successfully"
      }
    },
    "apiUpload": {
      "actions": {
        "selectFile": "Select File"
      },
      "messages": {
        "fileSizeLimit": "Total upload file size cannot exceed 100MB during debugging"
      }
    },
    "apiWebSocket": {
      "form": {
        "uriPlaceholder": "Enter URI",
        "searchMessagePlaceholder": "Search messages",
        "allMessagesPlaceholder": "All messages"
      },
      "labels": {
        "sendMessage": "Send Message",
        "queryParams": "Query Parameters",
        "requestHeader": "Request Header",
        "settings": "Settings",
        "responseMessage": "Response Messages"
      },
      "actions": {
        "disconnect": "Disconnect",
        "connect": "Connect",
        "save": "Save",
        "saveToUnarchived": "Save to Unarchived",
        "archive": "Archive",
        "copyUrl": "Copy URL",
        "send": "Send",
        "clear": "Clear"
      },
      "navigation": {
        "saveToUnarchived": "Save to Unarchived",
        "save": "Save",
        "archiveToService": "Archive to Service",
        "variable": "Variable",
        "agent": "Agent"
      },
      "messages": {
        "updateApiSuccess": "API updated successfully",
        "copyUrlSuccess": "URL copied successfully",
        "connectionFailed": "Connection failed",
        "sendFailed": "Send failed",
        "closeFailed": "Close failed",
        "invalidUrl": "Please enter a valid URL"
      },
      "status": {
        "connected": "Connected"
      },
      "options": {
        "receiveMessage": "Receive Message",
        "sendMessage": "Send Message"
      }
    },
    "webSocketServer": {
      "labels": {
        "current": "Current",
        "public": "Public",
        "mock": "Mock",
        "history": "History"
      }
    },
    "webSocketSetting": {
      "form": {
        "connectTimeout": {
          "label": "Connection Timeout",
          "description": "Maximum wait time for client and server to establish connection",
          "placeholder": "Please enter timeout time",
          "unit": "ms"
        },
        "maxReconnections": {
          "label": "Reconnection Count",
          "description": "Number of reconnection attempts when connection is closed, maximum 10 times allowed",
          "placeholder": "Please enter reconnection count"
        },
        "reconnectionInterval": {
          "label": "Reconnection Interval",
          "description": "Retry interval when connection fails, default 200ms, maximum allowed time is 30 minutes",
          "placeholder": "Please enter reconnection interval",
          "unit": "ms"
        }
      },
      "validation": {
        "connectTimeout": "Please enter timeout time",
        "maxReconnections": "Please enter reconnection count",
        "reconnectionInterval": "Please enter reconnection interval time"
      }
    },
    "webSocketMsg": {
      "types": {
        "send": "Send Request",
        "receive": "Receive Message",
        "connect": "Connection Success",
        "close": "Connection Closed",
        "closeErr": "Close Failed",
        "sendErr": "Send Failed",
        "connectErr": "Connection Failed"
      }
    },
    "webSocketSave": {
      "form": {
        "summary": {
          "label": "API Name",
          "placeholder": "Please enter API name, within 40 characters",
          "validation": "Please enter API name, within 100 characters"
        },
        "operationId": {
          "label": "Code",
          "placeholder": "Please enter code, within 40 characters"
        },
        "ownerId": {
          "label": "API Owner",
          "placeholder": "Please select API owner",
          "validation": "Please select API owner"
        },
        "serviceId": {
          "label": "Service",
          "placeholder": "Please select service",
          "validation": "Please select service"
        },
        "tags": {
          "label": "Tags",
          "placeholder": "Please enter or select tags, press Enter to confirm",
          "description": "Tags are used as additional metadata for API grouping."
        },
        "status": {
          "label": "Status",
          "validation": "Please select status"
        },
        "deprecated": {
          "label": "Deprecated",
          "options": {
            "normal": "Normal",
            "deprecated": "Deprecated"
          }
        },
        "description": {
          "label": "Description",
          "placeholder": "Limit input to 200 characters"
        }
      },
      "actions": {
        "save": "Save",
        "cancel": "Cancel"
      },
      "messages": {
        "protocolWarning": "WebSocket protocol must start with ws:// or wss://",
        "addSuccess": "API added successfully",
        "updateSuccess": "API updated successfully",
        "releasedWarning": "Released APIs cannot be modified"
      }
    },
    "webSocketSaveUnarchived": {
      "hints": {
        "unarchivedDescription": "Unarchived APIs are temporary debugging interfaces for users, only visible to the user who added them"
      },
      "form": {
        "summary": {
          "label": "API Name",
          "placeholder": "Please enter API name, within 40 characters",
          "validation": "Please enter API name, within 100 characters"
        },
        "description": {
          "label": "Description",
          "placeholder": "Limit input to 200 characters"
        }
      },

      "messages": {
        "protocolWarning": "WebSocket protocol must start with ws:// or wss://",
        "addSuccess": "API added successfully",
        "updateSuccess": "API updated successfully"
      }
    },
    "webSocketForm": {
      "placeholder": {
        "parameterName": "Parameter Name",
        "inputParameterName": "Enter parameter name",
        "inputParameterValue": "Enter parameter value",
        "inputParameterDescription": "Enter parameter description"
      }
    },
    "authSetting": {
      "hints": {
        "authDescription": "Grant operation permissions for specified \"projects, services, interfaces\" to users, departments, and groups. When granting permissions, \"view\" permission is required. Users can only authorize projects/services/interfaces for which they have authorization permissions."
      },
      "tabs": {
        "user": "User",
        "dept": "Department",
        "group": "Group"
      },
      "placeholder": {
        "searchDept": "Search department",
        "searchGroup": "Search group",
        "searchUser": "Search user"
      },
      "loading": {
        "tip": "Loading..."
      },
      "actions": {
        "selectAll": "Select All"
      }
    },
    "groupApiDetail": {
      "columns": {
        "id": "ID",
        "summary": "Name",
        "operationId": "Code",
        "source": "Source",
        "status": "Status",
        "auth": "Permission",
        "deprecated": "Deprecated",
        "createdByName": "Creator",
        "ownerName": "Owner",
        "tags": "Tags",
        "createdDate": "Created Date",
        "lastModifiedDate": "Last Modified Date",
        "description": "Description",
        "securityTitle": "Security Requirements",
        "externalDocsTitle": "External Documentation"
      },
      "messages": {
        "selectApiFirst": "Please select an API first to view details"
      },
      "auth": {
        "hasPermission": "Has permission restrictions",
        "noPermission": "No permission restrictions"
      },
      "deprecated": {
        "yes": "Yes",
        "no": "No"
      },
      "placeholder": {
        "noData": "--"
      },
      "modal": {
        "title": "API Permission",
        "onTips": "After enabling \"has permission control\", you need to manually authorize service permissions to have corresponding API operation permissions. \"Has permission control\" is enabled by default. Note: If the authorized object does not have parent service permissions, view permissions will be automatically granted.",
        "offTips": "After enabling \"no permission control\", all users will be allowed to publicly view and operate the current API. Users viewing the API must also have current API parent or service permissions."
      }
    },
    "ApiMock": {
      "columns": {
        "id": "ID",
        "name": "Name",
        "mockServiceId": "Service ID",
        "mockServiceName": "Service Name",
        "mockServiceHostUrl": "Service URL",
        "createdBy": "Creator",
        "createdDate": "Created Date"
      },
      "messages": {
        "createSuccess": "Mock API created successfully",
        "associateSuccess": "Associated successfully",
        "cancelAssociateSuccess": "Association cancelled successfully"
      },
      "stats": {
        "requestNum": "Request Count",
        "pushbackNum": "Pushback Count",
        "simulateErrorNum": "Simulated Error Count",
        "successNum": "Success Count",
        "exceptionNum": "Exception Count"
      },
      "actions": {
        "cancelAssociate": "Cancel Association"
      },
      "tooltips": {
        "copy": "Copy"
      },
      "hints": {
        "selectMockServiceFirst": "Please select a Mock service first to generate or associate Mock API.",
        "generateMockApi": "Generate Mock API based on current API.",
        "associateMockApi": "Associate with existing API under Mock service."
      },
      "options": {
        "generateMockApi": "Generate Mock API",
        "associateMockApi": "Associate Mock API"
      },
      "placeholder": {
        "selectMockService": "Please select Mock service",
        "selectMockApi": "Please select Mock API",
        "inputMockApiName": "Please enter corresponding Mock API name, current API name will be used by default if not specified"
      },
      "buttons": {
        "confirm": "Confirm"
      }
    },
    "serviceDetail": {
      "columns": {
        "id": "ID",
        "name": "Name",
        "parentName": "Parent Project",
        "source": "Source",
        "status": "Status",
        "auth": "Permission",
        "apisNum": "API Count",
        "apisCaseNum": "Case Count",
        "createdByName": "Creator",
        "createdDate": "Created Date",
        "lastModifiedDate": "Last Modified Date",
        "securityTitle": "Security Requirements"
      },
      "placeholder": {
        "nameInput": "Within 100 characters"
      },
      "hints": {
        "maxApis": "Maximum 2000 supported"
      },
      "auth": {
        "hasPermission": "Has permission restrictions",
        "noPermission": "No permission restrictions"
      },
      "modal": {
        "projectPermission": "Project Permission",
        "servicePermission": "Service Permission"
      },
      "tips": {
        "project": {
          "on": "After enabling \"has permission control\", you need to manually authorize project permissions to have corresponding project operation permissions. \"Has permission control\" is enabled by default. Note: Authorizing projects will not authorize API permissions under the project.",
          "off": "After enabling \"no permission control\", all users under the account will be allowed to publicly view and operate projects and APIs under the project."
        },
        "service": {
          "on": "After enabling \"has permission control\", you need to manually authorize service permissions to have corresponding project operation permissions. \"Has permission control\" is enabled by default. Note: Authorizing projects will not authorize API permissions under the service. If the authorized object does not have parent project permissions, view permissions will be automatically granted.",
          "off": "After enabling \"no permission control\", all users under the account will be allowed to publicly view and operate services and APIs under the service."
        }
      }
    },
    "mockService": {
      "columns": {
        "name": "Name",
        "serviceDomainUrl": "Service URL",
        "servicePort": "Port",
        "nodeName": "Node",
        "status": "Status",
        "auth": "Permission",
        "createdByName": "Creator",
        "createdDate": "Created Date"
      },
      "stats": {
        "apisNum": "API Count",
        "requestNum": "Request Count",
        "pushbackNum": "Pushback Count",
        "simulateErrorNum": "Simulated Error Count",
        "successNum": "Success Count",
        "exceptionNum": "Exception Count"
      },
      "actions": {
        "cancelAssociate": "Cancel Association",
        "generate": "Generate",
        "associate": "Associate",
        "copy": "Copy"
      },
      "messages": {
        "associateSuccess": "Associated successfully",
        "cancelAssociateSuccess": "Association cancelled successfully"
      },
      "options": {
        "generateMockService": "Generate Mock Service",
        "associateMockService": "Associate Mock Service"
      },
      "hints": {
        "generateMockService": "Generate Mock service based on current service.",
        "associateMockService": "Associate current service with existing Mock service."
      },
      "auth": {
        "hasPermission": "Has permission restrictions",
        "noPermission": "No permission restrictions"
      },
      "modal": {
        "title": "Mock Service Permission",
        "onTips": "After enabling permission control, you need to manually authorize to have corresponding operation permissions.",
        "offTips": "No permission restrictions, all users in the account can view and operate, permission control is not enabled by default.",
        "associateTitle": "Associate Mock Service"
      },
      "form": {
        "title": "Generate Mock Service",
        "name": "Name",
        "namePlaceholder": "Service identification naming information, maximum 100 characters allowed",
        "domain": "Domain",
        "domainPlaceholder": "After setting a domain for the service, you can access Mock APIs through the domain",
        "port": "Port",
        "portPlaceholder": "Port that the service listens on, cannot be modified after service is added (1~65535)",
        "node": "Node",
        "nodePlaceholder": "Node where the service runs, cannot be modified after service is added",
        "service": "Service",
        "servicePlaceholder": "Select or search service",
        "api": "API",
        "domainSuffix": ".angusmock.cloud",
        "nodeFormat": "{name} ( {ip} )",
        "serviceFormat": "S"
      },
      "validation": {
        "nameRequired": "Please enter name",
        "domainRequired": "Please enter domain",
        "domainInvalid": "Please enter correct domain",
        "portRequired": "Please enter port (1~65535)",
        "nodeRequired": "Please select node"
      },
  
      "buttons": {
        "cancel": "Cancel",
        "confirm": "Confirm"
      },
      "placeholder": {
        "selectMockService": "Please select Mock service"
      },
      "description": {
        "title": "Mock services can quickly generate and simulate APIs you depend on, enabling parallel development and testing, thereby accelerating development speed, achieving more comprehensive testing, and delivering stable products or applications earlier. You can create corresponding simulated interfaces for current service APIs through two methods: \"Generate Mock Service\" or \"Associate Mock Service\". These simulated interfaces will provide mock data for API debugging and testing.",
        "generateMockService": "Create new Mock service based on current service APIs. After creation, you can use these Mock APIs for data simulation and state testing, achieving more efficient API debugging.",
        "associateMockService": "Associate current service with existing Mock service. After association, the system will automatically generate corresponding Mock APIs in the associated Mock service. These APIs can be used for data simulation and state testing in API debugging."
      }
    
    },
    "serviceOpenApi": {
      "columns": {
        "title": "Name",
        "summary": "Summary",
        "openapi": "OpenAPI",
        "termsOfService": "Terms of Service",
        "contact": "Contact",
        "license": "License",
        "version": "Document Version",
        "externalDocs": "External Documentation",
        "description": "Description"
      },
      "placeholder": {
        "title": "Within 100 characters",
        "summary": "Within 400 characters",
        "termsOfService": "Within 800 characters",
        "contactName": "Name (within 100 characters)",
        "contactEmail": "Email",
        "contactUrl": "URL",
        "licenseName": "Name (within 100 characters)",
        "licenseUrl": "URL",
        "version": "Within 100 characters",
        "externalDocsUrl": "URL",
        "externalDocsDescription": "Description (within 800 characters)"
      },
      "tooltips": {
        "view": "View"
      }
    },
    "serviceTestDetail": {
      "hints": {
        "testEnableDescription": "Only after API testing is enabled will testing be marked as a mandatory activity, and test results will be included in the overall analysis. This ensures comprehensive and accurate test coverage. You can enable API testing in the following two ways:",
        "singleApiEnable": "1. Single API Enable: Go to API debug page -> Select \"API Metrics\" in the right tab bar -> Enable corresponding options for required test types.",
        "batchEnable": "2. Batch Enable: Find the target service in the service list -> Right-click and select \"Enable or Disable Testing\" -> Batch operate all API tests under the service."
      },
      "stats": {
        "progressRate": "API Test Progress",
        "totalApis": "Total APIs",
        "enabledTestApis": "Enabled Test APIs"
      },
      "title": {
        "testDetail": "API Test Details"
      },
      "chart": {
        "testApiStats": "Test API Statistics",
        "testTypeStats": "API Test Type Statistics",
        "tested": "Tested",
        "unTested": "Untested",
        "testPassed": "Test Passed",
        "unPassed": "Failed",
        "totalTestNum": "Total Tests",
        "functionalTest": "Functional Test",
        "performanceTest": "Performance Test",
        "stabilityTest": "Stability Test"
      },
      "columns": {
        "functionalTest": "Functional Test",
        "performanceTest": "Performance Test",
        "stabilityTest": "Stability Test"
      },
      "status": {
        "passed": "Passed",
        "passed_": "Passed",
        "unpassed": "Failed",
        "unTested": "Untested",
        "notEnabled": "Not Enabled",
        "notTested": "Not Tested",
        "partiallyPassed": "Partially Passed"
      },
      "placeholder": {
        "searchName": "Search name"
      }
    },
    "groupHeader": {
      "placeholder": {
        "searchApi": "Search API ID, name, path"
      },
      "sort": {
        "title": "Sort",
        "byCreatedDate": "By Created Date",
        "byName": "By Name",
        "byCreatedBy": "By Creator"
      },
      "group": {
        "title": "Group",
        "noGroup": "No Group",
        "byCreatedBy": "Group by Creator",
        "byMethod": "Group by Method",
        "byOwner": "Group by Owner",
        "byTag": "Group by Tag"
      },
      "actions": {
        "addHttpApi": "Add HTTP API",
        "addWebSocketApi": "Add WebSocket API",
        "serverConfig": "Server Config",
        "authConfig": "Auth Config",
        "refresh": "Refresh"
      }
    },
    "apiList": {
      "messages": {
        "cloneSuccess": "Cloned successfully",
        "deleteConfirm": "Deleting the API will also delete associated follows, favorites, metrics, variables and other information. Please confirm deletion?",
        "deleteSuccess": "Deleted successfully, you can view the deleted API in the recycle bin",
        "favouriteSuccess": "Favourited successfully",
        "unfavouriteSuccess": "Unfavourited successfully",
        "followSuccess": "Followed successfully",
        "unfollowSuccess": "Unfollowed successfully",
        "execSuccess": "Executed successfully"
      },
      "test": {
        "functionalTest": "Functional Test",
        "performanceTest": "Performance Test",
        "stabilityTest": "Stability Test",
        "notEnabled": "Not Enabled",
        "passed": "Passed",
        "unPassed": "Failed",
        "notTested": "Not Tested"
      },
      "buttons": {
        "edit": "Edit",
        "clone": "Clone",
        "delete": "Delete",
        "mockApi": "Mock API",
        "follow": "Follow",
        "unfollow": "Unfollow",
        "favourite": "Favourite",
        "unfavourite": "Unfavourite",
        "move": "Move",
        "permission": "Permission",
        "export": "Export",
        "modifyStatus": "Modify Status",
        "testScript": "Test Script",
        "generateTestScript": "Generate Test Script",
        "deleteTestScript": "Delete Test Script",
        "execTest": "Execute Test",
        "execFuncTest": "Execute Functional Test",
        "execPerfTest": "Execute Performance Test",
        "execStabilityTest": "Execute Stability Test",
        "testTask": "Test Task",
        "generateTestTask": "Generate Test Task",
        "restartTestTask": "Restart Test Task",
        "reopenTestTask": "Reopen Test Task",
        "deleteTestTask": "Delete Test Task"
      },
      "tips": {
        "generateTestScript": "Generate functional, performance and stability test scripts for the API.",
        "deleteTestScript": "Delete functional, performance and stability test scripts for the API.",
        "generateTestTask": "Generate functional, performance and stability test tasks.",
        "restartTestTask": "Update task to 'Pending', related statistics and status will be cleared.",
        "reopenTestTask": "Update task status to 'Pending', without clearing statistics and status.",
        "deleteTestTask": "Delete functional, performance and stability test tasks for the API, including test scripts."
      },
      "confirm": {
        "restartTestTask": "Update the API test task to \"Pending\", related statistics and status will be cleared. Do you confirm to restart the test task 【{summary}】?",
        "reopenTestTask": "Update the API test task to \"Pending\", without clearing statistics and status. Do you confirm to reopen the test task 【{summary}】?"
      },
      "execTest": {
        "tips": {
          "funcTestExec": "Execute current API functional test. If test script doesn't exist, it will automatically generate functional test script based on the API. If it exists, it will start the corresponding functional test script.",
          "perfTestExec": "Execute current API performance test. If test script doesn't exist, it will automatically generate performance test script based on the API. If it exists, it will start the corresponding performance test script.",
          "stabilityTestExec": "Execute current API stability test. If test script doesn't exist, it will automatically generate stability test script based on the API. If it exists, it will start the corresponding stability test script."
        },
        "titles": {
          "funcTestExec": "Execute Functional Test",
          "perfTestExec": "Execute Performance Test",
          "stabilityTestExec": "Execute Stability Test"
        }
      },
      "template": {
        "other": "Other",
        "auth": {
          "title": "API Permission",
          "onTips": "After enabling \"Permission Control\", you need to manually authorize service permissions to have corresponding API operation permissions. Permission control is enabled by default. Note: If the authorized object does not have parent project/service permissions, view permissions will be automatically granted.",
          "offTips": "After enabling \"No Permission Control\", all users will be allowed to publicly view and operate the current API. Users viewing the API must also have parent project or service permissions."
        },
        "testTask": {
          "infoText": "Generate corresponding task when API test task doesn't exist. If task already exists, it will override current test information.",
          "funcTest": "Functional Test",
          "perfTest": "Performance Test",
          "stabilityTest": "Stability Test"
        }
      }
    },
    "serviceExecTest": {
      "title": "Execute Test",
      "serverConfig": {
        "label": "Server Configuration",
        "options": {
          "useDefault": "Use Default (Server configuration when generating interface scripts)",
          "modifyVariables": "Modify Variable Configuration (Modifications will update to interface and dynamic HTTP extraction variables)"
        }
      },
      "placeholder": {
        "selectServer": "Please select server"
      },
      "labels": {
        "noVariables": "No Variables",
        "noDescription": "No Description",
        "variables": "Variables",
        "name": "Name",
        "value": "Value",
        "description": "Description",
        "default": "Default",
        "url": "URL"
      },
      "buttons": {
        "more": "More"
      }
    }
  },
  "apiShare": {
    "title": "Share",
    "addShare": "Add Share",
    "shareList": "Share List",
    "shareDetails": "Share Details",
    "shareEdit": "Share Edit",
    "editShare": "Edit Share",
    "form": {
      "name": "Share Name",
      "namePlaceholder": "Enter share name, maximum 100 characters",
      "remark": "Share Remark",
      "remarkPlaceholder": "Please enter share remark, will be displayed in share information, maximum 400 characters",
      "expiredDate": "Expiration Date",
      "expiredDateHint": "Permanently valid when not specified.",
      "displayOptions": "Display Options",
      "includeServiceInfo": "Show Service Description",
      "allowDebug": "Allow Debug",
      "fieldStyle": "Field Style",
      "shareScope": "Share Scope",
      "selectService": "Select Service",
      "selectServicePlaceholder": "Select service",
      "apis": "APIs",
      "selectApiPlaceholder": "Select API",
      "selectedApis": "Selected {count} APIs"
    },
    "schemaStyle": {
      "table": "Table",
      "tree": "Tree"
    },
    "messages": {
      "copySuccess": "Share information successfully copied to clipboard",
      "addSuccess": "Share successful",
      "editSuccess": "Share successful",
      "deleteSuccess": "Delete successful",
      "copyToClipboardSuccess": "Successfully copied to clipboard"
    },
    "list": {
      "title": "Added Shares",
      "noData": "No shares added yet, ",
      "addShare": "Add Share",
      "noRemark": "None~",
      "expired": "Expired",
      "notExpired": "Not Expired",
      "copy": "Copy",
      "edit": "Edit",
      "delete": "Delete",
      "confirmDelete": "Are you sure to delete share 【{name}】?",
      "columns": {
        "name": "Name",
        "status": "Status",
        "sharePerson": "Share Person",
        "shareScope": "Share Scope",
        "expiredDate": "Expiration Date",
        "shareDate": "Share Date",
        "viewCount": "View Count",
        "remark": "Remark",
        "lastModifiedBy": "Last Modified By",
        "lastModifiedTime": "Last Modified Time",
        "actions": "Actions"
      }
    },
    "searchPanel": {
      "title": "Quick Search",
      "addShare": "Add Share",
      "refresh": "Refresh",
      "menuItems": {
        "all": "All",
        "myShares": "My Shares",
        "lastDay": "Last Day",
        "lastThreeDays": "Last 3 Days",
        "lastWeek": "Last Week"
      },
      "searchOptions": {
        "namePlaceholder": "Search name, remark",
        "sharePersonPlaceholder": "Select share person",
        "dateRangePlaceholder": ["Add time from", "Add time to"]
      }
    },
    "introduce": {
      "title": "About Sharing",
      "description": "When you need to integrate interfaces with external partners, customers, or other teams, you can use the \"Share\" feature to pass interface information to them, simplifying the communication process. Sharing includes detailed interface description information, including interface servers, authentication, interface addresses, request formats, and response formats, ensuring everyone has a consistent understanding of the interface."
    },
    "apiTrash": {
      "title": "Trash",
      "searchPlaceholder": "Please enter search keywords",
      "tips": "Only administrators and deleters can restore or permanently delete trash data.",
      "buttons": {
        "recoverAll": "Restore All"
      },
      "tabs": {
        "service": "Service",
        "api": "API"
      },
      "table": {
        "columns": {
          "name": "Name",
          "createdBy": "Created By",
          "deletedBy": "Deleted By",
          "deletedDate": "Deleted Date",
          "action": "Action"
        },
        "actions": {
          "recover": "Restore"
        }
      },
      "messages": {
        "recoverAllSuccess": "All restored successfully",
        "recoverSuccess": "Restored successfully"
      }
    },
    "appConfig": {
      "title": "Application Configuration",
      "labels": {
        "name": "Name",
        "domain": "Domain"
      },
      "tabs": {
        "member": "Application Members",
        "quota": "Application Quota",
        "permission": "License Information"
      },
      "permitInfo": {
        "columns": {
          "editionType": "Edition Type",
          "goodsCode": "Product Code",
          "provider": "Provider",
          "issuer": "Issuer",
          "holder": "Holder",
          "licenseNo": "License Number",
          "beginDate": "License Issue Date",
          "endDate": "License Expiry Date",
          "signature": "License Certificate MD5 Signature"
        },
        "remainingDays": "Remaining {days} days"
      },
      "addMembers": {
        "title": {
          "user": "Add User",
          "dept": "Add Department",
          "group": "Add Group"
        },
        "labels": {
          "selectUser": "Select User",
          "selectDept": "Select Department",
          "selectGroup": "Select Group",
          "selectPolicy": "Select Policy"
        },
        "placeholders": {
          "selectPolicy": "Select Policy"
        }
      },
      "scrollMembers": {
        "buttons": {
          "addMember": "Add Member",
          "addDept": "Add Department",
          "addGroup": "Add Group",
          "authorizePolicy": "Authorize Policy"
        },
        "placeholders": {
          "searchMember": "Search Member",
          "searchDept": "Search Department",
          "searchGroup": "Search Group",
          "searchPolicy": "Search Policy Name"
        },
        "hints": "Assign specific functional menu permissions to project members to clarify each member's scope of responsibility in the project. Only system administrators and application administrators can add application members and authorize permission policy operations.",
        "table": {
          "columns": {
            "policyId": "Policy ID",
            "policyName": "Policy Name",
            "policyCode": "Policy Code",
            "policyDescription": "Policy Description",
            "policySource": "Policy Source",
            "joinTime": "Join Time",
            "action": "Action"
          },
          "actions": {
            "cancelAuth": "Cancel Authorization"
          },
          "sources": {
            "appDefault": "Application Default Authorization",
            "openAuth": "Open Authorization"
          }
        }
      },
      "quota": {
        "hints": "If you need to extend resource quotas, you can submit a work order to contact the work order engineer to help you!",
        "table": {
          "columns": {
            "resourceName": "Resource Name",
            "quotaKey": "Quota Key",
            "currentQuota": "Current Quota",
            "defaultQuota": "Default Quota",
            "maxQuota": "Maximum Quota"
          }
        }
      },
      "policyModal": {
        "title": "Authorize Policy",
        "placeholders": {
          "searchPolicy": "Search Policy Name"
        },
        "table": {
          "headers": {
            "id": "ID",
            "name": "Name",
            "code": "Code",
            "description": "Description",
            "status": "Status"
          },
          "status": {
            "enabled": "Enabled",
            "disabled": "Disabled"
          }
        },
        "actions": {
          "selectAll": "Select All"
        }
      }
    }
  }
} 