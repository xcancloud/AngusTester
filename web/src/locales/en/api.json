{
  "apis": {
    "name": "Home",
    "welcome": {
      "title": "Welcome to Angus API!",
      "description": "Here you and your team can complete the following work:",
      "features": [
        "Edit and debug APIs online;",
        "Manage projects, services, APIs and test tasks;",
        "Conduct API functional testing, performance testing and stability testing to ensure delivery of stable systems that meet business requirements."
      ]
    },
    "quickAccess": {
      "title": "Quick Access",
      "debug": {
        "title": "Debug API",
        "description": "Edit and debug APIs online quickly.",
        "action": "Debug"
      },
      "addProject": {
        "title": "Add Project/Service",
        "description": "Organize APIs through projects or services, projects can contain multiple services (such as microservices) and APIs, services can only contain APIs.",
        "addProject": "Add Project",
        "addService": "Add Service"
      },
      "import": {
        "title": "Import Service from File",
        "description": "Import OpenAPI or Postman API YAML files or JSON files.",
        "action": "Import",
        "template": "Import {type} from file"
      }
    },
    "navigation": {
      "myApis": "My APIs",
      "projects": "Projects",
      "services": "Services",
      "apis": "APIs",
      "scenarios": "Scenarios",
      "myTasks": "My Tasks",
      "favorites": "Favorites",
      "follows": "Follows",
      "activities": "Activities",
      "apiSamples": "API Sample Collection"
    },
    "statistics": {
      "today": "Today:",
      "lastWeek": "Last Week:"
    },
    "actions": {
      "cancelAllFavorites": "Cancel All Favorites",
      "cancelAllFollows": "Cancel All Follows",
      "projectConfig": "Project Configuration"
    },
    "configuration": {
      "sync": "Sync Configuration",
      "security": "Security Scheme Configuration",
      "server": "Server Configuration",
      "performance": "Service Performance Metrics",
      "share": "Add Share",
      "variables": "Define Variables",
      "syncDescription": "Automatically import external OpenAPI to current {type}",
      "securityDescription": "Define security schemes (Authorization) that can be used by all APIs under current {type}",
      "serverDescription": "Define servers (Server URL) that can be used by all APIs under current project/service",
      "performanceDescription": "Set default performance metrics for APIs under {type}, performance metrics will affect performance test pass rate; if you want to set performance metrics for a specific API separately, you can set it in API performance configuration",
      "shareDescription": "Through sharing, you can authorize others to view API documentation and debug APIs within a specified time",
      "variablesDescription": "Through defining variables, you can reuse a parameter value or control condition execution"
    },
    "search": {
      "taskName": "Search task name",
      "scenario": "Search scenario"
    },
    "messages": {
      "cancelAllFavoritesSuccess": "Cancel all favorites successful",
      "cancelAllFollowsSuccess": "Cancel all follows successful",
      "noFavorites": "No favorites",
      "noFollows": "No follows",
      "noData": "No data",
      "cancelSuccess": "Cancel successful",
      "cancelFavorite": "Cancel favorite",
      "cancelFollow": "Cancel follow",
      "importProject": "Import project",
      "importSuccess": "Import successful"
    },
    "columns": {
      "createdTime": "Created Time",
      "executionId": "Execution ID",
      "executionStatus": "Execution Status",
      "taskStatus": "Task Status",
      "testResult": "Test Result",
      "dueTime": "Due Time",
      "priority": "Priority"
    }
  },
  "design": {
    "name": "Design",
    "home": {
      "introduceTitle": "About Design",
      "introduceContent": "Interface design for OpenAPI specifications, meeting the needs of interface testing and documentation generation. The graphical interface is suitable for users unfamiliar with OpenAPI specifications, while users familiar with OpenAPI specifications are recommended to use Swagger Editor for more efficient design completion.",
      "tabTitle": "Design",
      "title": "Added Designs",
      "noDataTip": "No designs added yet, ",
      "add_action": "Add Design",
      "design_action": "Design",
      "generateService_action": "Generate Service",
      "import_service_action": "Import Service",
      "import_design_action": "Import Design",
      "refresh_action": "Refresh",
      "designByMe": "Designed by Me",
      "importSuccess": "Import Successful",
      "released": "Released",
      "unreleased": "Draft",
      "searchPanel": {
        "name_placeholder": "Search name, description",
        "created_placeholder": "Select creator",
        "data_placeholder1": "Created time from",
        "data_placeholder2": "Created time to"
      },
      "columns": {
        "name": "Name",
        "openapiSpecVersion": "Specification Version",
        "status": "Status",
        "designSource": "Source",
        "designService": "Associated Service",
        "createdBy": "Creator",
        "createdDate": "Created Date",
        "lastModifiedBy": "Last Modified By",
        "lastModifiedDate": "Last Modified Date",
        "actions": "Actions"
      }
    },
    "importServiceModal": {
      "title": "Import Service",
      "serviceLabel": "Service",
      "servicePlaceholder": "Please select associated service"
    },
    "importDesignModal": {
      "title": "Import Design",
      "nameLabel": "Name",
      "namePlaceholder": "Enter design name, limited to 100 characters",
      "fileLabel": "File",
      "fileRule": "Please upload file",
      "uploadFile": "Upload File",
      "uploadTip": "Click to upload Swagger2.0, OpenAPI3.x files, file size not exceeding 20M"
    },
    "exportModal": {
      "title": "Export",
      "formatLabel": "Format"
    },
    "editModal": {
      "editTitle": "Edit Design",
      "addTitle": "Add Design",
      "nameLabel": "Name",
      "namePlaceholder": "Enter design name, maximum 100 characters",
      "versionLabel": "Version",
      "versionPlaceholder": "OpenAPI document specification version number, default 3.0.1."
    },
    "detail": {
      "saveSuccess": "Saved Successfully",
      "publishSuccess": "Published Successfully",
      "saveAction": "Save Draft",
      "publishAction": "Publish Design",
      "modifyTip": "Last modified at {time}"
    }
  },
  "mock": {
    "starting": "Starting",
    "startSuccess": "Started Successfully",
    "startFail": "Start Failed, please try to restart",
    "batchStartFail": "Batch Start Failed",
    "startPending": "Starting",
    "serviceStartSuccess": "Service Started Successfully",
    "deleteTip": "Confirm deletion?",
    "deleteSuccess": "Deleted Successfully",
    "batchDelSuccess": "Batch Deleted Successfully",
    "start_fail": "Start Failed",
    "start_success": "Started Successfully",
    "stop_fail": "Stop Failed",
    "stop_success": "Stopped Successfully",
    "in_starting": "Starting",
    "refreshInstance_tip": "Refreshing the instance will forcibly synchronize service configuration, interface security, CORS settings and Mock interfaces to the running service instance.",
    "refreshInstance_success": "Instance Refreshed Successfully",
    "console": "Console",
    "searchPanel": {
      "namePlaceholder": "Search service ID, name",
      "nodeIpPlaceholder": "Search service IP",
      "sourcePlaceholder": "Select source",
      "nodeIdPlaceholder": "Select or search node",
      "createdByPlaceholder": "Select creator",
      "createdDatePlaceholder1": "Created time from",
      "createdDatePlaceholder2": "Created time to"
    },
    "columns": {
      "id": "Service ID",
      "name": "Service Name",
      "node": "Node",
      "address": "Service Address",
      "status": "Status",
      "source": "Source",
      "createdBy": "Creator",
      "lastModifiedBy": "Last Updated By",
      "createdDate": "Created Date",
      "lastModifiedDate": "Updated Date",
      "action": "Actions"
    },
    "actions": {
      "delete": "Force Delete",
      "authority": "Permissions",
      "refresh": "Refresh Instance",
      "addMock": "Add Mock Service",
      "start": "Start",
      "stop": "Stop"
    },
    "auth": {
      "title": "Service Permissions",
      "onTips": "After enabling permission control, manual authorization is required to have corresponding operation permissions.",
      "offTips": "No permission restrictions, all users in the account can view and operate, permission control is not enabled by default."
    },
    "introduce": {
      "description": "Mock can quickly generate and simulate dependent APIs, enabling development and testing to proceed in parallel, achieving faster development, more comprehensive testing, and earlier delivery of stable products or applications. Mock also avoids dirty data issues caused by direct integration with production systems.",
      "addMockService": "Add Mock Service",
      "addMockService_desc": "After adding Mock service, Mock interfaces need to be added manually",
      "importService": "Import Associated Existing Service",
      "importService_desc": "Add based on existing interface services, users can select interfaces that need Mock, after adding, the system will automatically establish association with interface services.",
      "importFile": "Import Mock from File",
      "importFile_desc": "Create Mock service and import interfaces based on Swagger2.0, OpenAPI3.x, Postman2.0, Postman2.1, Angus format data."
    },
    "addMock": {
      "validation": {
        "enterDomain": "please enter domain",
        "enterCorrectDomain": "please enter correct domain",
        "enterName": "please enter name",
        "enterPort": "please enter port (1~65535)",
        "selectNode": "please select node",
        "selectProjectService": "please select project service"
      },
      "notifications": {
        "addSuccess": "add successfully"
      },
      "form": {
        "name": "name",
        "namePlaceholder": "service identifier naming information, up to 100 characters",
        "domain": "domain",
        "domainPlaceholder": "after setting the domain name for the service, the mock interface can be accessed through the domain name",
        "domainTooltip": "domain name resolution is expected to take effect within 60 seconds.",
        "port": "port",
        "portPlaceholder": "the port listened by the service, the service cannot be modified after adding (1~65535)",
        "node": "node",
        "nodePlaceholder": "the node where the service is running, the service cannot be modified after adding",
        "service": "service",
        "servicePlaceholder": "select or search service",
        "api": "api",
        "importSource": "import source",
        "associated": "(associated)"
      },
      "upload": {
        "uploadFile": "upload file",
        "uploadDescription": "directly paste content or drag and drop files or click to upload files, the file size does not exceed 20M",
        "clear": "clear",
        "fileRequired": "please upload the file first",
        "fileSizeExceeded": "the file or text size exceeds 20M, please re-upload",
        "postmanVersionError": "please check if the file is a Postman Collection V2/V2.1 version JSON file"
      },
      "buttons": {
        "cancel": "cancel",
        "confirm": "confirm"
      },
      "apiList": {
        "searchApiName": "search api name",
        "requestMethod": "request method",
        "apiName": "api name",
        "selectAll": "select all"
      }
    },
    "mockDetail": {
      "menu": {
        "apis": "api",
        "request": "request",
        "log": "log",
        "activity": "activity",
        "monitor": "monitor",
        "setting": "setting"
      },
      "control": {
        "apiName": "api name",
        "apiInfo": "api info",
        "requestCount": "request count",
        "mockExceptionCount": "mock exception count",
        "pushbackCount": "pushback count",
        "successCount": "success count",
        "exceptionCount": "exception count",
        "apiCount": "api count",
        "searchApiNamePath": "search api name, path",
        "tooltips": {
          "requestCount": "the number of times the mock interface is called.",
          "mockExceptionCount": "the number of times the mock interface returns an Http status code of 4xx and 5xx response.",
          "pushbackCount": "the number of times the mock service pushes a request to the user's configured pushback interface.",
          "successCount": "the number of times the request returns a status code of 2xx.",
          "exceptionCount": "the number of times the mock interface configuration errors or the program itself causes errors."
        }
      },
      "mockSet": {
        "notifications": {
          "modifySuccess": "modify successfully"
        },
        "validation": {
          "enterParamName": "please enter parameter name",
          "paramNameDuplicate": "parameter name duplicate",
          "enterName": "please enter name",
          "enterDomain": "please enter domain"
        },
        "basicInfo": {
          "title": "basic information",
          "name": "name",
          "nameTooltip": "service identifier naming information, up to 100 characters.",
          "domain": "domain",
          "domainTooltip": "after setting the domain name for the service, the mock interface can be accessed through the domain name, the domain name set needs to be resolved to the IP of the node where it is located.",
          "port": "port",
          "portTooltip": "the port listened by the service, the service cannot be modified after adding.",
          "node": "node",
          "nodeTooltip": "the node where the service is running, the service cannot be modified after adding.",
          "serviceConfig": "service config",
          "serviceConfigTooltip": "the main parameters of the service running, more parameter configuration please refer to the official website related documents. The modification needs to be restarted after the service takes effect.",
          "useSsl": "enable SSL",
          "useSslTooltip": "enable SSL option on Netty Http server, the default is not enabled.",
          "workThreadNum": "work thread num",
          "workThreadNumTooltip": "the number of threads of the service running, the default is 100.",
          "logLevel": "log level",
          "logLevelTooltip": "configure request log information level, including four options: NONE, BASIC, HEADERS and FULL.",
          "logFileLevel": {
            "none": "no log record.",
            "basic": "only record request method and URL as well as response status code and execution time, the default.",
            "headers": "record basic information as well as request and response headers.",
            "full": "record request and response headers, body and metadata."
          },
          "sendRequestLog": "send request log",
          "sendRequestLogTooltip": "whether to send Mock request log to the service side.",
          "maxContentLength": "max request size",
          "maxContentLengthTooltip": "the maximum allowed request size, the default is 1000*1024*1024 (1000MB).",
          "pushbackThreadNum": "pushback thread num",
          "pushbackThreadNumTooltip": "the number of threads for processing pushback requests, the default is 8.",
          "pushbackConnectTimeout": "pushback connect timeout",
          "pushbackConnectTimeoutTooltip": "the maximum connection timeout when pushing, in milliseconds, the default is 5000.",
          "pushbackRequestTimeout": "pushback request timeout",
          "pushbackRequestTimeoutTooltip": "the maximum request timeout when pushing, in milliseconds, the default is -1 not timeout.",
          "surety": "interface security",
          "suretyHints": "the modification needs to be restarted after the service takes effect.",
          "suretyTooltip": "used to configure the authorization information required for accessing the interface, after enabling the configuration, the interface must carry the authorization parameter to access the interface. Up to 10 can be added.",
          "in": "location",
          "paramsName": "parameter name",
          "paramsValue": "parameter value",
          "paramsValueRule": "please enter value"
        },
        "buttons": {
          "cancel": "cancel",
          "confirm": "confirm"
        },
        "settings": {
          "logTooltip": "record basic information and request and response headers.",
          "corsTooltip": "when the domain name of the mock interface site accessed through the browser and the address of the mock interface are inconsistent, the browser's same-origin access policy (CORS) restriction will be triggered, causing the interface to be inaccessible. The current \"cross-origin configuration\" can freely制定跨域访问策略。修改后需要重启服务或刷新实例后生效。",
          "enableNettyLog": "enable Netty log",
          "enableNettyLogTooltip": "it is recommended to open only in debug mode, the default is not enabled."
        },
        "cors": {
          "title": "cross-origin setting",
          "description": "when the domain name of the mock interface site accessed through the browser and the address of the mock interface are inconsistent, the browser's same-origin access policy (CORS) restriction will be triggered, causing the interface to be inaccessible. The current \"cross-origin configuration\" can freely制定跨域访问策略。修改后需要重启服务或刷新实例后生效。",
          "enabled": "enable",
          "enabledTooltip": "enable cross-origin access restriction configuration, the default is not enabled.",
          "allowOrigin": "allow origin",
          "allowOriginTooltip": "specify which websites can participate in cross-origin resource sharing, the default is *, returned by the response header Access-Control-Allow-Origin.",
          "allowCredentials": "allow access credentials",
          "allowCredentialsTooltip": "specify that third-party sites may be able to perform privileged operations and retrieve sensitive information, the default is true, returned by the response header Access-Control-Allow-Credentials.",
          "allowRequestMethods": "allow request methods",
          "allowRequestMethodsTooltip": "specify allowed HTTP methods, the default is GET, POST, PUT, PATCH, DELETE, OPTIONS, HEAD, returned by the response header Access-Control-Allow-Methods.",
          "allowRequestHeaders": "allow request headers",
          "allowRequestHeadersTooltip": "specify allowed HTTP request headers, the default is not specified, returned by the response header Access-Control-Allow-Headers.",
          "allowExposeHeaders": "allow expose headers",
          "allowExposeHeadersTooltip": "specify which header fields in the response can be accessed, these fields do not include the default headers that browsers can access, the default is not specified, returned by the response header Access-Control-Expose-Headers."
        },
        "requestRecord": {
          "apiName": "api name",
          "requestId": "request ID",
          "requestTime": "request time",
          "requestUrl": "request address",
          "requestMethod": "request method",
          "statusCode": "status code",
          "formatOptions": {
            "beautify": "beautify",
            "raw": "raw",
            "preview": "preview"
          },
          "requestInfo": "request info",
          "requestHeader": "request header",
          "requestBody": "request body",
          "responseInfo": "response info",
          "responseHeader": "response header",
          "responseBody": "response body",
          "hints": "the current request record is a mock service collection mock interface call log, the system collects up to 3 request logs per second. Each mock interface only retains the last 100 request records. Note: if you need to enable or disable request log collection, please configure \"settings\"->\"record request log\", after enabling, the mock interface performance will be reduced."
        },
        "log": {
          "lineOptions": {
            "last500": "last 500 lines",
            "last1000": "last 1000 lines",
            "last10000": "last 10000 lines"
          },
          "notifications": {
            "noDownloadContent": "no downloadable content"
          },
          "errorInfo": "no access proxy information, connection failed address:",
          "logFile": "log file:",
          "browseLog": "browse log:",
          "download": "download",
          "refresh": "refresh",
          "autoRefresh": "auto refresh:"
        },
        "activity": {
          "pageInfo": "total {total} records, page {current} / {totalPage}",
          "searchPlaceholder": "search activity details"
        }
      }
    },
    "mockApis": {
      "debugApis": {
        "testRequest": "test request",
        "proxy": "proxy",
        "stop": "stop",
        "send": "send",
        "response": "response",
        "notifications": {
          "proxyNotConnected": "proxy not connected, please check the proxy configuration"
        }
      },
      "codeForm": {
        "notifications": {
          "yamlFormatError": "yaml content format error, please check and correct"
        }
      },
      "notifications": {
        "copyApiSuccess": "copy api add successfully",
        "linkApiSuccess": "link api add successfully",
        "importDemoSuccess": "import demo successfully",
        "cloneSuccess": "clone successfully",
        "deleteSuccess": "delete successfully",
        "refreshInstanceSuccess": "refresh instance api successfully",
        "saveSuccess": "save successfully",
        "dataError": "data error, please check and correct before saving."
      },
      "validation": {
        "nameDuplicate": "name duplicate"
      },
      "confirmations": {
        "deleteApi": "confirm to delete api【{name}】?",
        "refreshInstance": "refresh instance api will force synchronize the current mock interface information to the running service instance."
      },
      "hints": {
        "mockDescription": "when an interface is not implemented or cannot be accessed, the mock interface can be used to imitate the behavior and data return of the real interface, so as to improve the efficiency of development and testing. Note: the mock interface takes effect after saving."
      },
      "search": {
        "placeholder": "search name"
      },
      "buttons": {
        "addApi": "add api",
        "save": "save",
        "clone": "clone",
        "export": "export",
        "delete": "delete",
        "refreshInstance": "refresh instance api",
        "refresh": "refresh",
        "back": "back",
        "addResponse": "add response",
        "deleteResponse": "delete response"
      },
      "menuItems": {
        "clone": "clone",
        "delete": "delete",
        "export": "export",
        "copyApi": "copy api add",
        "linkApi": "link api add",
        "import": "import api",
        "importDemo": "import demo"
      },
      "sortMenuItems": {
        "createdDate": "by added time",
        "id": "by id"
      },
      "form": {
        "request": "request",
        "name": "name",
        "namePlaceholder": "maximum support 400 characters",
        "description": "description",
        "descriptionPlaceholder": "maximum support 20000 characters",
        "response": "response",
        "responseTooltip": "maximum support 50 responses",
        "namePlaceholderShort": "maximum support 200 characters"
      },
      "response": {
        "match": "match",
        "matchTooltip": "specify the matching request conditions that need to be satisfied for the current response. Note: when there are multiple responses that meet the matching conditions, the response with the highest priority will be returned. If no matching conditions are configured or the priority is the same, the first condition or the first configured condition will be returned.",
        "priority": "priority",
        "priorityTooltip": "the higher the value, the higher the priority, the value range is 0~2147483647. Note: only when there are multiple responses that meet the matching conditions will the response with the highest priority be returned.",
        "content": "content",
        "pushback": "pushback",
        "pushbackTooltip": "pushback can be used to automatically push an Http request to a specified address after receiving a mock request, such as payment callback.",
        "enable": "enable",
        "disable": "disable"
      },
      "modals": {
        "copyApi": "copy api add",
        "linkApi": "link api add"
      }
    },
    "mockApisComp": {
      "textareaEditor": {
        "maxLengthSupport": "maximum support characters",
        "showCount": "whether to display the number of input strings",
        "maxLengthMessage": "maximum support {maxlength} characters",
        "errorMessage": "maximum support {maxlength} characters, already input {length} characters",
        "format": "format",
        "clear": "clear"
      },
      "codeEditor": {
        "maxLengthSupport": "maximum support characters",
        "showCount": "whether to display the number of input strings",
        "errorMessage": "maximum support {maxlength} characters, already input {length} characters",
        "format": "format",
        "clear": "clear"
      },
      "agent": {
        "noProxy": "no proxy",
        "clientProxy": "client proxy",
        "serverProxy": "server proxy",
        "cloudProxy": "cloud proxy",
        "proxyConfig": "proxy config",
        "notConnected": "not connected",
        "connected": "connected",
        "notifications": {
          "onlyOnePath": "only one path can be added",
          "notConfigured": "not configured or enabled server proxy, please check \"application management->proxy config\"",
          "connectionFailed": "proxy connection failed, please check if the proxy service is running."
        },
        "descriptions": {
          "noProxy": "request interfaces directly through the browser, and the server-side access to non-same-origin interfaces needs to cancel the cross-origin restriction.",
          "clientProxy": "an \"<a href='https://www.xcan.cloud/help' target=\"_blank\"  class=\"text-text-link\">proxy program<a>\" needs to be installed on the computer where the browser is accessed, and after configuration, the request will be sent using the client proxy.",
          "serverProxy": "the \"proxy program\" needs to be installed separately on the server host of the shared network, and the server proxy does not require the user to install the proxy program on their own computer, and after configuration, the request will be sent using the server proxy. Recommended method",
          "cloudProxy": "request interfaces through AngusTester cloud server nodes, note: cannot access customer intranet service addresses."
        }
      },
      "urlForm": {
        "methodPath": "method/path",
        "requestMethod": "request method",
        "maxLengthPlaceholder": "maximum support 800 characters"
      },
      "matchForm": {
        "pathForm": {
          "path": "path",
          "operationCondition": "operation condition",
          "notifications": {
            "onlyOnePath": "only one path can be added"
          },
          "descriptions": {
            "equal": "start with /; path segments are separated by /, and do not contain special characters (such as ? and #)",
            "notEqual": "start with /; path segments are separated by /, and do not contain special characters (such as ? and #)",
            "contain": "start with /; path segments are separated by /, and do not contain special characters (such as ? and #)",
            "notContain": "start with /; path segments are separated by /, and do not contain special characters (such as ? and #)"
          },
          "rules": {
            "rootPath": "the path starts with /, indicating the root path.",
            "pathSegments": "the path consists of multiple path segments, and the path segments are separated by /.",
            "segmentChars": "each path segment can be composed of letters, numbers, hyphens, underscores, etc., and does not contain special characters (such as ? and #).",
            "segmentNotEmpty": "the path segment cannot be an empty string."
          }
        },
        "selectInputForm": {
          "requestHeader": "request header",
          "parameterName": "parameter name, maximum support 400 characters",
          "parameterValue": "parameter value, maximum support 4096 characters",
          "operator": "operator"
        },
         "parameterForm": {
          "regMatch": "regular expression",
          "queryParameters": "query parameters",
          "parameterName": "parameter name, maximum support 400 characters",
          "parameterValue": "parameter value, maximum support 4096 characters"
        },
         "requestBody": {
            "requestBody": "request body",
            "format": "format",
            "clear": "clear",
            "value": "value",
            "xpathMatch": "XPath expression",
            "jsonPathMatch": "JSONPath expression",
            "notifications": {
              "onlyOneBody": "only one request body can be added"
            }
        }
      },
      "contentForm": {
        "statusCode": "status code",
        "responseDelay": "response delay",
        "responseHeaders": "response headers",
        "responseBody": "response body",
        "mockFunctionHelper": "mock function helper",
        "insertFile": "insert file",
        "maxHeaderNum": "maximum support {{ MAX_HEADER_NUM }} response headers",
        "maxHeaderNumError": "maximum support {maxHeaderNum} response headers",
        "notifications": {
          "maxHeaderError": "maximum support {maxHeaderNum} response headers"
        },
        "importFileModal": {
          "title": "encode file",
          "maxFileSize": "maximum support encode 10M file",
          "encoding": "encoding"
        },
        "selectInputForm": {
          "parameterName": "parameter name, maximum support 400 characters",
          "parameterValue": "parameter value, maximum support 4096 characters"
        },
        "requestBody": "request body",
        "pushBack": {
          "urlFormatError": "pushback address format error",
          "proxyNotConnected": "proxy not connected, please check the proxy configuration",
          "requestError": "request error",
          "autoPushAfterRequest": "request trigger after automatic push",
          "requestMethod": "request method",
          "maxLengthPlaceholder": "maximum support 800 characters"
        },
        "delayParameter": {
          "maxLessThanMin": "maximum value is less than the minimum value",
          "delayOptions": {
            "none": "no delay",
            "fixed": "fixed delay",
            "random": "random delay"
          }
        },
        "inputGroup": {
          "queryParameters": "query parameters",
          "requestHeaders": "request headers"
        }
      }
    },
    "exportModal": {
      "title": "Export",
      "format": "Format",
      "fields": {
        "endpoint": "Path",
        "summary": "Name"
      },
      "notifications": {
        "exportSuccess": "Export successfully"
      }
    }
  },
  "server": {
    "name": "Server",
    "home": {
      "tabTitle": "Servers",
      "newTab": "Add Server",
      "searchPanel": {
        "descriptionPlaceholder": "Search description",
        "servicePlaceholder": "Select service"
      },
      "title": "Added Servers",
      "addTip": "Added {add}, maximum {max} allowed.",
      "emptyTip": "No servers added yet, ",
      "actions": {
        "addServer": "Add Server",
        "updateToApi": "Update to Associated APIs"
      },
      "hasVariable": "Has Variables",
      "hasNoVariable": "No Variables",
      "serviceBelong": "Associated Service",
      "cloneSuccess": "Cloned Successfully",
      "updateSuccess": "Updated to Associated APIs Successfully",
      "noDescTip": "No description~",
      "deleteTip": "Confirm deletion of this server?"
    },
    "detail": {
      "deleteTip": "Confirm deletion of server?",
      "copyLinkSuccess": "Link copied successfully",
      "copyLinkFail": "Link copy failed",
      "serverExample": "Server Example",
      "copyLink": "Copy Link",
      "serverTip": "Server URL already exists, please re-enter",
      "serverVariableTip": "Variables in Server URL cannot be repeated",
      "variableNameTip": "Variable name is duplicated",
      "variableValueTip": "Variable value is duplicated",
      "serverConfigTip": "Server configuration error, please check and correct before saving.",
      "urlPlaceholder": "URL prefix pointing to target host, e.g.: https://{env}.xcan.cloud:{prot}/{path}",
      "serverLabel": "Service",
      "serverPlaceholder": "Select service",
      "serverServiceTip": "Server associated interface service",
      "descLabel": "Description",
      "descPlaceholder": "Server description, maximum 400 characters",
      "variableTitle": "Variables",
      "variableLabel": "Name",
      "variableNameTip1": "Variable name cannot be duplicated",
      "variableTip": "Maximum 50 variables can be added",
      "variablePlaceholder": "Variable name, maximum 100 characters",
      "addVariable": "Add Variable",
      "deleteVariable": "Delete Variable",
      "variableValueLabel": "Value",
      "variableValueTip1": "Values of the same variable cannot be duplicated",
      "variableValuePlaceholder": "Variable value, maximum 400 characters",
      "descriptionLabel": "Description",
      "descriptionPlaceholder": "Variable description, maximum 400 characters",
      "variableDefault": "Default"
    },
    "introduce": {
      "title": "About Servers",
      "description1": "Define the servers and server-related dynamic parts of the API, including two parts: server and variables. The server field is used to specify the server list of the API, each server has a URL and optional description information, indicating the base path of the API.",
      "description2": "Variables are used to define dynamic parts in URLs. It allows the use of placeholders in server URLs, which can be replaced with actual values in different environments. The main benefits are as follows:",
      "integration": {
        "title": "Easy Integration with CICD",
        "description": "In continuous integration and continuous deployment workflows, defined servers can help automate testing processes, making API endpoints in different environments flexibly configurable, meeting DevOps requirements."
      },
      "env": {
        "title": "Support Multiple Environments",
        "description": "Support different environments (such as development, testing, production, etc.) by defining multiple servers or through different variable values. This enables developers to easily switch environments without manually changing URLs in code."
      },
      "version": {
        "title": "Support Version Control",
        "description": "In different versions of APIs, different servers or variable values can be defined to manage and maintain versions. Different versions of servers can be clearly distinguished in documentation to avoid confusion."
      },
      "url": {
        "description": "Complete URL, server, and endpoint relationship",
        "title": "Complete URL (path)"
      }
    }
  },
  "service": {
    "name": "Service",
    "home": {
      "addApiTabName": "Add API",
      "authTabName": "Auth",
      "mockTabName": "Mock Service"
    },
    "sidebar": {
      "deleteService": "Delete Service",
      "deleteServiceTip": "Deleting a service will delete all APIs under the service, as well as associated favorites, metrics, variables, and other information. Please confirm whether to delete?",
      "restartServiceTip": "All tasks under the service will be updated to \"Pending Test\", and related statistics and status will be cleared. Are you sure to restart the test task [{name}]?",
      "reopenServiceTip": "All tasks under the service will be updated to \"Pending Test\", and statistics and status will not be cleared. Are you sure to reopen the test task [{name}]?",
      "funcTestExecSmokeTip": "Execute the smoke test case for all APIs under the current service. If the smoke test script for the test service does not exist, the test script will be automatically generated based on the API smoke test case. If it exists, the corresponding test script will be started.",
      "funcTestExecSecurityTip": "Execute the security test case for all APIs under the current service. If the security test script for the test service does not exist, the test script will be automatically generated based on the API security test case. If it exists, the corresponding test script will be started.",
      "funcTestExecTip": "Execute the functional test for all APIs under the current service that are enabled for functional testing. If the test script does not exist, the test script will be automatically generated based on the API. If it exists, the corresponding test script will be started.",
      "perfTestExecTip": "Execute the performance test for all APIs under the current service that are enabled for performance testing. If the test script does not exist, the test script will be automatically generated based on the API. If it exists, the corresponding test script will be started.",
      "stabilityTestExecTip": "Execute the stability test for all APIs under the current service that are enabled for stability testing. If the test script does not exist, the test script will be automatically generated based on the API. If it exists, the corresponding test script will be started.",
      "deleteServiceSuccess": "Delete successful, you can view the deleted service in the recycle bin",
      "serviceNamePlaceholder": "Maximum 100 characters",
      "unarchivedTitle": "Unarchived",
      "searchServicePlaceholder": "Search service name",
      "deleteAllSuccess": "All deleted successfully",
      "deleteAllAction": "Delete All",
      "localImportModal": {
        "title": "Local Import"
      },
      "exportServiceModal": {
        "title": "Export",
        "exportTypeLabel": "Scope",
        "onlyApisComponentsLabel": "Components",
        "formatLabel": "Format",
        "serviceNamePlaceholder": "Search service name",
        "serviceLabel": "Service",
        "servicePlaceholder": "Please select service",
        "serviceNameLabel": "Service Name",
        "exportType_service": "By Service",
        "exportType_api": "By API",
        "compType_all": "All components of the service",
        "compType_api": "Only interface-related components"
      },
      "batchModifyModal": {
        "title": "Batch Modify",
        "scopeLabel": "API Scope",
        "apisLabel": "Select API",
        "matchMethodLabel": "Request Method",
        "matchEndpointRegexLabel": "Match Path Expression",
        "matchEndpointRegexPlaceholder": "Please enter the matching regular expression, such as: .*?/search.*",
        "tagsLabel": "Select Tag",
        "tagsPlaceholder": "Select matching tag",
        "addParams": "Add Parameter",
        "modifyParams": "Modify Parameter",
        "deleteParams": "Delete Parameter",
        "enabledParams": "Enable Parameter",
        "disabledParams": "Disable Parameter",
        "modifyAuth": "Modify Auth",
        "modifyServer": "Modify Server",
        "linkVariable": "Link Variable",
        "unlinkVariable": "Unlink Variable",
        "linkDataset": "Link Dataset",
        "unlinkDataset": "Unlink Dataset",
        "delReferenceDatasetTip": "Please select at least one dataset",
        "delReferenceVariableTip": "Please select at least one variable",
        "referenceDatasetTip": "Please select at least one dataset",
        "referenceVariableTip": "Please select at least one variable",
        "matchMethodTip": "Please select at least one matching method",
        "selectedApisTip": "Please select at least one API",
        "modifyScope_all": "All APIs",
        "modifyScope_select": "Specified APIs",
        "modifyScope_match": "Matched APIs",
        "requestParams": "Request Parameters",
        "requestHeader": "Request Header",
        "cookie": "Cookie",
        "paramsNamePlaceholder": "Please enter parameter name"
      },
      "smokeResult": {
        "title": "Smoke Test",
        "passed": "Passed",
        "id": "Service ID",
        "name": "Service Name",
        "testName": "Test Name",
        "testDate": "Test Date",
        "scriptId": "Script ID",
        "scriptName": "Script Name"
      },
      "securityResult": {
        "title": "Security Test",
        "passed": "Passed",
        "testName": "Test Name",
        "testerDate": "Test Date",
        "scriptId": "Script ID",
        "scriptName": "Script Name"
      },
      "topAction": {
        "addService": "Add Service"
      },
      "foldAction": {
        "addService": "Add Service",
        "localImport": "Local Import"
      },
      "apiGroup": {
        "tabs": {
          "api": "API",
          "testResult": "Test",
          "mock": "Mock",
          "doc": "Document"
        },
        "viewMode": {
          "codeView": "Code View",
          "pageView": "Page View",
          "refresh": "Refresh"
        },
        "messages": {
          "serviceNotExist": "Service does not exist or you do not have permission to view"
        }
      },
      "execModalTitle": {
        "funcTestExecSmoke": "Execute Smoke Test",
        "funcTestExecSecurity": "Execute Security Test",
        "funcTestExec": "Execute Functional Test",
        "perfTestExec": "Execute Performance Test",
        "stabilityTestExec": "Execute Stability Test"
      },
      "authModel": {
        "title": "Service Permissions",
        "onTip": "After enabling \"Permission Control\", manual authorization is required to have corresponding operation permissions for the project. The default is to enable \"Permission Control\". Note: Authorizing a service does not authorize interface permissions under the service. If the authorization object does not have parent project permissions, it will automatically authorize view permissions.",
        "offTip": "After enabling \"No Permission Control\", all users in the account can view and operate the service and interfaces under the service."
      },
      "execTest": {
        "title": "Execute Test",
        "execSuccess": "Execution started successfully, please check the status and test results in the \"Execution\" section",
        "serviceConfigLabel": "Server Configuration",
        "serviceConfigDefault": "Use Default (Server Configuration When Generating Script)",
        "serviceConfigModify": "Modify Variable Configuration (Updated to Interface and Dynamic Http Extracted Variables)",
        "selectServicePlaceholder": "Please select server",
        "variableEmpty": "No Variables",
        "descLabel": "Description",
        "descEmpty": "No Description",
        "variableLabel": "Variables",
        "variableNameLabel": "Name",
        "variableValueLabel": "Value",
        "variableValueDefault": "Default",
        "variableDescLabel": "Description",
        "more": "More"
      },
      "addServiceModal": {
        "title": "Add Service",
        "namePlaceholder": "Please enter service name"
      }
    },
    "mock": {
      "description": "Mock can quickly generate and simulate the dependencies of the API, enabling faster development, more comprehensive testing, and earlier delivery of stable products or applications. Mock can also avoid dirty data problems caused by direct production system debugging.",
      "createTypeLabel": "Mock Method",
      "nameLabel": "Name",
      "serviceDomainUrlLabel": "Domain Name",
      "servicePortLabel": "Port",
      "nodeIdLabel": "Node",
      "serviceLabel": "Service",
      "apiIdsLabel": "API",
      "namePlaceholder": "Service identifier naming information, up to 100 characters",
      "mockNew": "Generate Mock Service",
      "mockUpdate": "Update Mock Service",
      "serviceDomainUrlPlaceholder": "After setting the domain name for the service, the mock interface can be accessed through the domain name",
      "servicePortPlaceholder": "The port listened by the service, the service cannot be modified after addition (1~65535)",
      "nodePlaceholder": "The node where the service runs, the service cannot be modified after addition",
      "servicePlaceholder": "Select or search service",
      "nameRule": "Please enter name",
      "servicePortRule": "Please enter port (1~65535)",
      "nodeRule": "Please select node"
    },
    "dataModel": {
      "updateSuccess": "Modify document successfully",
      "loadCompFail": "Component not found",
      "cloneSuccess": "Clone component successfully",
      "deleteSuccess": "Delete component successfully",
      "addComp": "Add component",
      "cloneComp": "Clone component",
      "compNameLabel": "New component name",
      "dataModelOpt": "Data Model",
      "respModalOpt": "Response",
      "paramsModelOpt": "Parameters",
      "requestBodyModelOpt": "Request Body",
      "nameLabel": "Name",
      "descriptionPlaceholder": "Description",
      "modelLabel": "Data Model",
      "paramsLabel": "Parameters",
      "responseTitle": "Response Header",
      "addAttrTip": "Attribute already exists",
      "addAttrTitle": "Add parameter",
      "generalTab": "General",
      "paramsTab": "Parameters",
      "requestTab": "Request Body",
      "responseTab": "Response",
      "selectBodyCompPlaceholder": "Select to use body model",
      "form": {
        "name": "Name",
        "required": "Required",
        "deprecated": "Deprecated",
        "type": "Type",
        "format": "Format",
        "example": "example",
        "description": "Description",
        "paramsNamePlaceholder": "Parameter name",
        "attrTab": "Attributes",
        "refsTab": "References",
        "compPlaceholder": "Select referenced component",
        "typePlaceholder": "Type",
        "formatPlaceholder": "Format",
        "defaultValuePlaceholder": "Default value",
        "examplePlaceholder": "Example value",
        "minLengthPlaceholder": "Minimum length",
        "maxLengthPlaceholder": "Maximum length",
        "minimumPlaceholder": "Minimum value",
        "maximumPlaceholder": "Maximum value"
      }
    },
    "agent": {
      "connectSuccess": "Connected",
      "unconnect": "Disconnected",
      "urlLabel": "Proxy Address",
      "noProxy": {
        "title": "No Proxy",
        "tip": "Directly request the interface through the browser, and cancel the cross-domain limit for non-same-origin access to the interface server."
      },
      "clientProxy": {
        "title": "Client Proxy",
        "tip": "Install \"<a href='https://www.xcan.cloud/help' target=\"_blank\" class=\"text-text-link\">Proxy Program<a>\" on the computer where the browser is accessed, and the client proxy will be used after configuration."
      },
      "serverProxy": {
        "title": "SERVER_PROXY",
        "tip": "Install \"Proxy Program\" separately on the shared network server host, and use the server proxy without installing the proxy program on each user's computer, and the server proxy will be used after configuration. Recommended."
      },
      "cloudProxy": {
        "tip": "Request the interface through the AngusTester cloud server node, note: cannot access the customer intranet service address."
      },
      "connectFailTip": "Proxy connection failed, please check if the proxy service is running.",
      "configFailTip": "The server proxy is not configured or enabled, please check \"Application Management->Proxy Configuration\""
    },
    "case": {
      "updateNameSuccess": "Modify name successfully",
      "searchPlaceholder": "Search name",
      "hints": "Currently added {num} cases, each interface supports a maximum of 100 cases.",
      "addCaseAction": "Add Case",
      "execCaseAction": "Execute Test",
      "nameLabel": "Name",
      "statusLabel": "Status",
      "status_unTested": "UnTested",
      "enabled": "Enabled",
      "disabled": "Disabled",
      "columns": {
        "name": "Name",
        "status": "Test Status",
        "type": "Test Type",
        "enabled": "Enabled Status",
        "description": "Description",
        "createdByName": "Created By",
        "createdDate": "Created Date",
        "lastModifiedDate": "Last Modified Date",
        "action": "Action"
      },
      "execModalTitle": "Execute Case",
      "debugModal": {
        "proxyError": "Request error (please check request parameters or proxy connection status)",
        "wsProxyErr": "Request error (please check request parameters or whether the browser triggers the \"CORS-Cross-Origin Resource Sharing\" limit, if the cross-domain limit is triggered, please use a proxy or configure the interface service to allow cross-domain access)",
        "conditionMessageEmpty": "Expression is empty, execute the assertion",
        "conditionMsgFormat": "Expression format error, only support operators [\"=\", \"!=\", \">=\", \"<=\", \">\", \"<\"]",
        "conditionMsgFormatFail": "Expression format error, cannot extract variable name",
        "conditionMsgFormatErr": "Expression format error, ignore the assertion",
        "conditionMsgDefineFail": "The variable is not defined, the value of the variable is processed by the variable name",
        "conditionMsgIgnore": "The calculation result is not established, ignore the assertion",
        "conditionMsgExec": "The calculation result is established, execute the assertion",
        "urlRule": "Interface address is invalid, please re-select",
        "assertRule": "Assertion data verification failed",
        "apisLabel": "Test Interface",
        "caseLabel": "Test Case",
        "paramsTab": "Request Parameters",
        "headerTab": "Request Header",
        "requestBodyTab": "Request Body",
        "assertTab": "Assertion",
        "duration": "Duration",
        "respSize": "Size",
        "debugAction": "Debug Case",
        "description": "Description",
        "descriptionPlaceholder": "Enter case description, up to 800 characters"
      }
    },
    "externalDoc": {
      "hints": "Reference external resources as current interface document extensions",
      "urlPlaceholder": "Link address",
      "descriptionPlaceholder": "External link description"
    },
    "importForm": {
      "nameLabel": "Service Name",
      "namePlaceholder": "Up to 100 characters",
      "sourceLabel": "Select Import Source",
      "fileLabel": "Select File",
      "fileTip": "The file can be dragged directly into this area for upload, the file size is not more than 20M, and the supported file types are .zip,.rar,.7z,.gz,.tar,.bz2,.xz,.lzma,.json,.yaml,.yml.",
      "strategyWhenDuplicated": "Strategy when encountering duplicates",
      "strategy_cover": "Cover",
      "strategy_ignore": "Ignore",
      "deleteWhenNotExisted": "Whether to delete the current interface when it does not exist in the imported data",
      "delete_y": "Yes",
      "delete_n": "No",
      "fileRule": "Please check if the file is a Postman Collection V2/V2.1 version JSON file!",
      "sourceRule": "Please select import source",
      "fileRule_required": "Please upload local file",
      "nameRule": "Please enter name"
    },
    "moveModal": {
      "title": "Move Interface",
      "hints": "When moving the interface to the service, the default is not to authorize the interface associated user to view the service permission. If needed, please authorize through the service \"permission\".",
      "selectServiceTitle": "Select the service to move to"
    },
    "oas": {
      "comp": "Component",
      "hints": "Components can be used to define reusable object collections. The supported component types include: data model, response, parameter, example, request body, request body, header, and security scheme. Note: when a component is not referenced by an API attribute, it has no effect on the API.",
      "searchPlaceholder": "Search component name, description",
      "designCompAction": "Design component",
      "addModal": {
        "detail": "Detail",
        "add": "Add",
        "edit": "Edit",
        "typeLabel": "Type",
        "typePlaceholder": "Select type",
        "nameLabel": "Name",
        "namePlaceholder": "Enter name, up to 400 characters",
        "refLabel": "Reference",
        "cancelRefs": "Cancel reference",
        "useRefs": "Restore reference",
        "summaryLabel": "Summary",
        "summaryPlaceholder": "Enter summary, up to 400 characters",
        "exampleLabel": "Example",
        "examplePlaceholder": "Enter example",
        "schemaTypeLabel": "Attribute type",
        "schemaTypePlaceholder": "Select type",
        "formatLabel": "Format",
        "formatPlaceholder": "Format",
        "valueLabel": "Value",
        "valuePlaceholder": "Enter value, up to 4096 characters",
        "descriptionLabel": "Description",
        "descriptionPlaceholder": "Enter description, up to 2000 characters, support Markdown syntax"
      }
    },
    "apis": {
      "response": {
        "pretty": "Pretty",
        "raw": "Raw",
        "preview": "Preview"
      }
    },
    "security": {
      "hints": "Declare security schemes that can be used by interfaces",
      "namePlaceholder": "Security scheme name",
      "valuePlaceholder": "Enter scope, press Enter to confirm",
      "nameRule": "Define name duplication"
    },
    "securityModal": {
      "title": "Security Scheme Configuration",
      "rule": "Data not saved, please save data or cancel editing",
      "hints": "Define security schemes that can be used by all interfaces under the current service (Authorization).",
      "oauth2Opt": {
        "authorizationCode": "Authorization Code",
        "password": "Password Credentials",
        "implicit": "Implicit",
        "clientCredentials": "Client Credentials"
      },
      "nameLabel": "Name",
      "nameTip": "The component name can only contain A-Z a-z 0-9 - . _ characters",
      "namePlaceholder": "Please enter the scheme name",
      "typeLabel": "Authentication Type",
      "usernameLabel": "Username",
      "usernamePlaceholder": "Please enter the username",
      "passwordLabel": "Password",
      "passwordPlaceholder": "Please enter the password",
      "tokenLabel": "Token",
      "tokenPlaceholder": "Please enter the access token",
      "apiKeyNamePlaceholder": "Enter name",
      "apiKeyValuePlaceholder": "Enter value",
      "apiKeyInPlaceholder": "Select position",
      "configToken": "Configure token",
      "token_had": "Existing token",
      "token_generate": "Generate token",
      "authKeyPlaceholder": "Please enter the authorization key",
      "authFlowLabel": "Authorization Type",
      "authorizationUrlLabel": "Authorization URL",
      "authorizationUrlPlaceholder": "Please enter the authorization URL",
      "authorizationUrlRule": "Please enter the correct URL address",
      "callbackUrlLabel": "Callback URL",
      "callbackUrlPlaceholder": "Please enter the callback URL",
      "callbackUrlRule": "Please enter the correct URL address",
      "tokenUrlLabel": "Access Token URL",
      "tokenUrlPlaceholder": "Please enter the access token URL",
      "tokenUrlRule": "Please enter the correct URL address",
      "refreshUrlLabel": "Refresh Token URL",
      "refreshUrlPlaceholder": "Please enter the refresh token URL",
      "refreshUrlRule": "Please enter the correct URL address",
      "clientIdLabel": "Client ID",
      "clientIdPlaceholder": "Please enter the client ID",
      "clientSecretLabel": "Client Secret",
      "clientSecretPlaceholder": "Please enter the client secret",
      "scopesPlaceholder": "Enter scope, multiple scopes separated by commas",
      "clientAuthTypeLabel": "Client Authentication",
      "clientAuthTypePlaceholder": "Select client authentication",
      "description": "Description",
      "descriptionPlaceholder": "Enter description, support Markdown syntax"
    },
    "serverConfig": {
      "title": "Server Configuration",
      "hints": "Define servers (Server URL) that can be used by all APIs under current service, maximum 50 servers can be added.",
      "actions": {
        "addServerDemo": "Server Example",
        "addServer": "Server",
        "updateToApis": "Update to Associated APIs",
        "edit": "Edit",
        "delete": "Delete",
        "cancel": "Cancel",
        "save": "Save",
        "addVariable": "Add Variable",
        "deleteVariable": "Delete Variable"
      },
      "messages": {
        "updateToApisSuccess": "Successfully updated to associated APIs",
        "confirmDelete": "Confirm deletion of this server?",
        "configError": "Server configuration error, please check and correct before saving.",
        "serverUrlExists": "Server URL already exists, please re-enter",
        "variableNotRepeat": "Variables in Server URL cannot be repeated",
        "variableNameRepeat": "Variable name is duplicated",
        "variableValueRepeat": "Variable value is duplicated"
      },
      "form": {
        "url": "URL",
        "urlPlaceholder": "URL prefix pointing to target host, e.g.: https://{env}.xcan.cloud:{prot}/{path}",
        "description": "Description",
        "descriptionPlaceholder": "Server description, maximum 400 characters",
        "variables": "Variables",
        "variableName": "Name",
        "variableNamePlaceholder": "Variable name, maximum 100 characters",
        "variableValue": "Value",
        "variableValuePlaceholder": "Variable value, maximum 400 characters",
        "variableDescription": "Description",
        "variableDescriptionPlaceholder": "Variable description, maximum 400 characters",
        "default": "Default"
      },
      "tips": {
        "maxVariables": "Maximum 50 variables can be added",
        "variableNameNotRepeat": "Variable names cannot be duplicated",
        "variableValueNotRepeat": "Values of the same variable cannot be duplicated"
      },
      "columns": {
        "url": "URL",
        "description": "Description",
        "variables": "Variables",
        "name": "Name",
        "value": "Value"
      }
    },
    "shareModal": {
      "title": "Share Management",
      "actions": {
        "addShare": "Add Share",
        "edit": "Edit",
        "delete": "Delete",
        "copy": "Copy",
        "confirm": "Confirm",
        "cancel": "Cancel",
        "loadMore": "Load More"
      },
      "messages": {
        "deleteSuccess": "Share record deleted successfully",
        "passwordRequired": "Password cannot be empty",
        "updatePasswordSuccess": "Password updated successfully",
        "copySuccess": "Copied successfully"
      },
      "form": {
        "link": "Link",
        "password": "Password",
        "validityPeriod": "Validity Period",
        "permanent": "Permanent"
      },
      "copyFormat": {
        "withPassword": "Link: {url} Password: {password}",
        "withoutPassword": "Link: {url}"
      }
    },
    "statusModal": {
      "title": "Modify Status",
      "messages": {
        "updateStatusSuccess": "Status updated successfully"
      },
      "form": {
        "status": "Status"
      },
      "tips": {
        "serviceStatusChange": "Modifying service status will synchronously modify the status of all APIs under the service.",
        "servicePublish": "Publishing a service will publish all APIs under the service. Published services and APIs cannot be modified or saved.",
        "apiPublish": "After publishing an API, the basic information and parameter information of the API cannot be modified or saved"
      }
    },
    "syncConfig": {
      "title": "Sync Configuration",
      "hints": "Automatically import external OpenAPI to current service, maximum 10 configurations allowed.",
      "actions": {
        "add": "Add",
        "demo": "Demo",
        "syncAll": "Sync All",
        "edit": "Edit",
        "sync": "Sync",
        "test": "Test",
        "delete": "Delete",
        "save": "Save",
        "cancel": "Cancel",
        "clear": "Clear",
        "addAuth": "Add",
        "deleteAuth": "Delete"
      },
      "messages": {
        "deleteSuccess": "Deleted successfully",
        "testSuccess": "Configuration test passed",
        "syncSuccess": "Sync successful",
        "syncAllSuccess": "Sync all successful",
        "saveSuccess": "Saved successfully",
        "nameExists": "Name already exists",
        "authNameExists": "Authentication name already exists",
        "noValidConfig": "No valid sync configuration found, please save data first",
        "dataNotSaved": "Data not saved, please save data or cancel editing first",
        "inputContent": "Please enter content"
      },
      "form": {
        "name": "Name",
        "namePlaceholder": "Name",
        "source": "Source",
        "address": "Address",
        "addressPlaceholder": "Address",
        "duplicateStrategy": "Strategy when encountering duplicates",
        "cover": "Cover",
        "ignore": "Ignore",
        "deleteWhenNotExist": "Whether to delete local APIs when sync APIs do not exist",
        "yes": "Yes",
        "no": "No",
        "auth": "Authentication",
        "authRequired": "Required when sync address is protected. Maximum 10 allowed.",
        "paramName": "Parameter Name",
        "paramPosition": "Parameter Position",
        "paramValue": "Parameter Value",
        "positionPlaceholder": "Position",
        "valuePlaceholder": "Value"
      },
      "tips": {
        "addDemo": "Add demo data",
        "syncAllTip": "Only sync saved configurations",
        "lastSync": "Last Sync"
      },
      "options": {
        "header": "header",
        "query": "query"
      }
    },
    "tag": {
      "hints": {
        "main": "Tags serve as additional metadata for APIs to group them. An API can have multiple tags, meaning it belongs to multiple groups. The order of tag definitions will be consistent with the order of APIs grouped by tags and the order of interface display in documentation.",
        "sub": "Each tag name must be unique; not all interfaces need to be associated with tags; maximum 2000 tags can be added."
      },
      "actions": {
        "add": "Add",
        "edit": "Edit",
        "delete": "Delete",
        "save": "Save",
        "cancel": "Cancel",
        "expand": "Expand",
        "collapse": "Collapse"
      },
      "messages": {
        "deleteSuccess": "Deleted successfully",
        "saveSuccess": "Saved successfully",
        "nameExists": "Tag name already exists",
        "dataNotSaved": "Data not saved, please save data or cancel editing first"
      },
      "form": {
        "name": "Name",
        "namePlaceholder": "Please enter tag name",
        "description": "Description",
        "descriptionPlaceholder": "Enter description, supports Markdown syntax",
        "externalDocsUrl": "External Documentation URL",
        "externalDocsUrlPlaceholder": "Please enter external documentation URL",
        "externalDocsDescription": "External Documentation Description",
        "externalDocsDescriptionPlaceholder": "Enter description, supports Markdown syntax",
        "externalDocsLink": "External Documentation Link"
      },
      "validation": {
        "enterUrl": "Please enter URL address",
        "enterCorrectUrl": "Please enter correct URL address"
      }
    },
    "translateModal": {
      "title": "Translation",
      "description": {
        "title": "OpenAPI Translation Instructions",
        "useCases": {
          "title": "Use Cases",
          "items": [
            "Provide support for multilingual API documentation",
            "Internationalize API services",
            "Cross-regional API service deployment",
            "Generate multilingual developer documentation"
          ]
        },
        "notes": {
          "title": "Notes",
          "items": [
            "AngusTester will use DeepSeek for translation by default",
            "Translation is processed asynchronously, you will receive a notification message when completed",
            "Translation process may take from a few minutes to several hours, depending on API scale",
            "After translation is completed, you can view it in \"APIs → Services\""
          ]
        }
      },
      "configuration": {
        "title": "OpenAPI Translation Configuration",
        "service": "API Service",
        "servicePlaceholder": "Please select service",
        "sourceLanguage": "Source Language",
        "targetLanguage": "Target Language"
      },
      "actions": {
        "cancel": "Cancel",
        "submit": "Submit"
      },
      "messages": {
        "translateComplete": "Translation completed",
        "selectService": "Please select service"
      }
    },
    "timeline": {
      "labels": {
        "timeConsuming": "Time Consuming Items",
        "time": "Time",
        "totalTime": "Total Time Consuming"
      },
      "items": {
        "dnsLookup": "DNS Lookup",
        "tcpConnection": "TCP Connection",
        "ssl": "SSL",
        "requestSent": "Request Sent",
        "waiting": "Waiting",
        "contentDownload": "Content Download"
      }
    },
    "apiAuthorization": {
      "title": "Authentication Type",
      "types": {
        "noAuth": "No Authentication",
        "basicAuth": "Basic Auth",
        "bearerToken": "Bearer Token",
        "apiKey": "Api Key",
        "oauth2": "OAuth 2.0",
        "extends": "Public"
      },
      "extends": {
        "selectServiceSecurity": "Select Service Security Authentication"
      },
      "basic": {
        "username": "Username",
        "usernamePlaceholder": "Please enter username",
        "password": "Password",
        "passwordPlaceholder": "Please enter password"
      },
      "bearer": {
        "token": "Token",
        "tokenPlaceholder": "Please enter access token"
      },
      "oauth2": {
        "configMethod": "Configuration Method:",
        "existingToken": "Existing Token",
        "generateToken": "Generate Token",
        "accessToken": "Access Token",
        "type": "Type",
        "clientAuth": "Client Authentication",
        "getToken": "Get Token"
      },
      "apiKey": {
        "name": "Name",
        "value": "Value",
        "position": "Position"
      },
      "oauth2Fields": {
        "authorizationUrl": "Authorization URL",
        "callbackUrl": "Callback URL",
        "tokenUrl": "Access Token URL",
        "refreshUrl": "Refresh Token URL",
        "clientId": "Client ID",
        "clientSecret": "Client Secret",
        "username": "Username",
        "password": "Password",
        "encryptionMethod": "Encryption Method",
        "verificationCode": "Verification Code",
        "scope": "Scope"
      },
      "flowTypes": {
        "authorizationCode": "Authorization Code",
        "password": "Password Credentials",
        "implicit": "Implicit",
        "clientCredentials": "Client Credentials"
      },
      "clientAuthTypes": {
        "basicAuthHeader": "Send via Basic Auth Header",
        "requestBody": "Send via Request Body"
      },
      "encryptionTypes": {
        "sha256": "SHA-256",
        "plain": "Plain"
      },
      "messages": {
        "authorizationFailed": "Authorization failed Couldn't complete authentication.",
        "proxyNotConnected": "Proxy not connected, please check proxy configuration",
        "maxLengthTip": "Maximum {maxLength} characters allowed"
      }
    },
    "apiExecDetail": {
      "tabs": {
        "functionalTest": "Functional Test",
        "performanceTest": "Performance Test",
        "stabilityTest": "Stability Test",
        "customTest": "Custom Test",
        "testTask": "Test Task"
      },
      "testSummary": {
        "allTests": "All Tests",
        "successRate": "Success Rate",
        "functional": "Functional",
        "performance": "Performance",
        "stability": "Stability",
        "custom": "Custom",
        "testInterfaces": "Test Interfaces",
        "resultIndicators": "Result Indicators",
        "nonStandard": "Non-Standard"
      },
      "testStatus": {
        "untested": "Untested",
        "passed": "Passed",
        "notPassed": "Not Passed"
      },
      "indicators": {
        "total": "Total",
        "success": "Success",
        "failed": "Failed",
        "disabled": "Disabled",
        "tps": "Transactions Per Second (TPS)",
        "responseTime": "Response Time (P90)",
        "errorRate": "Error Rate"
      },
      "task": {
        "noData": "No Data",
        "columns": {
          "code": "Code",
          "name": "Name",
          "sprint": "Sprint",
          "priority": "Priority",
          "assignee": "Assignee",
          "confirmor": "Confirmor",
          "deadline": "Deadline"
        },
        "overdue": "Overdue"
      }
    },
    "mockApi": {
      "description": "Mock APIs can quickly generate and simulate the APIs you depend on, enabling parallel development and testing, thereby accelerating development speed, achieving more comprehensive testing, and delivering stable products or applications earlier. You can create corresponding mock interfaces for the current interface through two methods: \"Generate Mock API\" or \"Associate Mock API\". Mock interfaces will provide simulated data for convenient interface debugging and testing.",
      "columns": {
        "apiName": "API Name",
        "mockServiceName": "Mock Service Name",
        "method": "Method",
        "mockServiceHostUrl": "Service Address",
        "createdBy": "Created By",
        "createdDate": "Created Date"
      },
      "actions": {
        "cancelAssociation": "Cancel Association",
        "generateMockApi": "Generate Mock API",
        "associateMockApi": "Associate Mock API"
      },
      "messages": {
        "generateSuccess": "Mock API generated successfully",
        "associateSuccess": "Association successful",
        "cancelAssociationSuccess": "Association cancelled successfully"
      },
      "createTypes": {
        "generate": {
          "title": "Generate Mock API",
          "description": "Create a new mock version based on the current interface. After creation, you can use the Mock API for data simulation and status testing, thereby achieving more efficient interface debugging."
        },
        "associate": {
          "title": "Associate Mock API",
          "description": "Associate the current interface with an existing Mock service interface. After association, data simulation and status testing can be performed during interface debugging."
        }
      },
      "modal": {
        "generateTitle": "Generate Mock API",
        "associateTitle": "Associate Mock API",
        "mockServicePlaceholder": "Please select Mock service",
        "mockApiPlaceholder": "Please select Mock API",
        "summaryPlaceholder": "Please enter the corresponding Mock API name, if not specified, the current interface name will be used by default",
        "generateHint": "Generate Mock API based on the current interface.",
        "associateHint": "Associate with existing interfaces under Mock service."
      },
      "statistics": {
        "requestNum": "Request Count",
        "pushbackNum": "Pushback Count",
        "simulateErrorNum": "Simulate Error Count",
        "successNum": "Success Count",
        "exceptionNum": "Exception Count"
      }
    },
    "apiRequestBody": {
      "contentType": "Content-Type",
      "actions": {
        "importComponent": "Import Component",
        "copyComponent": "Copy Component",
        "format": "Format",
        "compress": "Compress",
        "uploadFile": "Upload File",
        "cancelReference": "Cancel Reference"
      },
      "tips": {
        "fileSizeLimit": "Interface debugging supports up to 100MB files, files within 10MB can be saved, exceeding this limit will not be saved.",
        "componentReference": "Component Reference: {ref}"
      },
      "modal": {
        "title": "Component",
        "searchPlaceholder": "Search component name",
        "columns": {
          "componentName": "Component Name",
          "modifiedBy": "Modified By",
          "modifiedTime": "Modified Time"
        }
      },
      "form": {
        "name": "Name",
        "namePlaceholder": "Please enter parameter name",
        "type": "Type",
        "typePlaceholder": "Please select parameter type",
        "required": "Required",
        "description": "Description",
        "descriptionPlaceholder": "Please enter description",
        "value": "Value",
        "valuePlaceholder": "Please enter debug value, maximum {maxLength} characters supported",
        "format": "Format",
        "formatPlaceholder": "Please select format",
        "example": "Example",
        "examplePlaceholder": "Please enter example value",
        "defaultValue": "Default Value",
        "defaultValuePlaceholder": "Please enter default value",
        "minLength": "Min Length",
        "minLengthPlaceholder": "Please enter minimum length",
        "maxLength": "Max Length",
        "maxLengthPlaceholder": "Please enter maximum length",
        "minimum": "Minimum",
        "minimumPlaceholder": "Please enter minimum value",
        "maximum": "Maximum",
        "maximumPlaceholder": "Please enter maximum value",
        "pattern": "Pattern",
        "patternPlaceholder": "Please enter regular expression",
        "enum": "Enum Values",
        "enumPlaceholder": "Please enter enum values, multiple values separated by commas",
        "variable": "Variable",
        "setVariable": "Set as Variable",
        "cancelVariable": "Cancel Variable"
      },
      "messages": {
        "fileUploadSuccess": "File uploaded successfully",
        "fileUploadFailed": "File upload failed",
        "fileRemoveSuccess": "File removed successfully",
        "formatSuccess": "Formatted successfully",
        "compressSuccess": "Compressed successfully",
        "componentImportSuccess": "Component imported successfully",
        "componentCopySuccess": "Component copied successfully",
        "setVariableSuccess": "Variable set successfully",
        "variableNameInvalid": "Name does not meet variable requirements, allows numbers, letters, !@$%^&*()_-+=./ etc.",
        "debugFileSizeLimit": "Total upload file size for request body during debugging cannot exceed 100MB"
      }
    },
    "apiRequestCookie": {
      "form": {
        "namePlaceholder": "Parameter Name",
        "inputNamePlaceholder": "Please enter parameter name",
        "valuePlaceholder": "Please enter debug value, maximum {maxLength} characters supported"
      },
      "actions": {
        "copyValue": "Copy Value"
      },
      "tips": {
        "componentReference": "Component Reference: {ref}"
      },
      "messages": {
        "copySuccess": "Successfully copied value to clipboard"
      }
    },
    "apiRequestHeader": {
      "form": {
        "namePlaceholder": "Parameter Name",
        "inputNamePlaceholder": "Please enter parameter name",
        "valuePlaceholder": "Please enter debug value, maximum {maxLength} characters supported"
      },
      "actions": {
        "copyValue": "Copy Value"
      },
      "tips": {
        "componentReference": "Component Reference: {ref}"
      },
      "messages": {
        "copySuccess": "Successfully copied value to clipboard"
      }
    },
    "apiRequestParams": {
      "form": {
        "namePlaceholder": "Parameter Name",
        "inputNamePlaceholder": "Please enter parameter name",
        "typePlaceholder": "Please select parameter type",
        "valuePlaceholder": "Please enter debug value, maximum {maxLength} characters supported"
      },
      "actions": {
        "copyValue": "Copy Value"
      },
      "tips": {
        "componentReference": "Component Reference: {ref}"
      },
      "messages": {
        "copySuccess": "Successfully copied value to clipboard"
      }
    },
    "apiServerPath": {
      "form": {
        "pathPlaceholder": "API path, starting with \"/\"",
        "serverPlaceholder": "Server address, URL prefix for API address"
      },
      "actions": {
        "sendRequest": "Send Request",
        "abortRequest": "Abort Request",
        "saveToUnarchived": "Save to Unarchived",
        "archive": "Archive",
        "generateCase": "Generate Case",
        "copyUrl": "Copy URL",
        "nextStep": "Next Step"
      },
      "tips": {
        "variableNotFound": "Variable not found, please define the variable first or refresh and try again",
        "default": "Default"
      },
      "labels": {
        "current": "Current",
        "public": "Public",
        "mock": "Mock",
        "history": "History"
      }
    },
    "apiSetting": {
      "form": {
        "timeoutPlaceholder": "0 ~ 9007199254740991",
        "retryNumPlaceholder": "0 ~ 6",
        "maxRedirectsPlaceholder": "0 ~ 10"
      },
      "labels": {
        "paramValidation": "Parameter Format Validation",
        "connectTimeout": "Connection Timeout",
        "readTimeout": "Read Timeout",
        "retryNum": "Retry Count on Failure",
        "maxRedirects": "Maximum Redirect Count"
      },
      "descriptions": {
        "paramValidation": "When enabled, parameters will be validated first, and requests will only be sent after parameter validation passes. Default is disabled.",
        "connectTimeout": "Specifies the maximum waiting time for establishing a connection between client and server. 0 means never timeout, default is 6 seconds.",
        "readTimeout": "Specifies the maximum waiting time for the client to receive server connection closure after establishing a connection. 0 means never timeout, default is 60 seconds.",
        "retryNum": "Number of retries when request fails. Default is no retry, maximum allowed is 6 times.",
        "maxRedirects": "Number of redirects when request returns 3xx status code. Default is 1 time, maximum allowed is 10 times."
      },
      "units": {
        "milliseconds": "ms",
        "times": "times"
      }
    },
    "apiSliderSave": {
      "form": {
        "summaryPlaceholder": "Please enter API name, within 40 characters",
        "operationIdPlaceholder": "Please enter operation ID, within 40 characters",
        "ownerPlaceholder": "Please select API owner",
        "servicePlaceholder": "Please select service",
        "tagsPlaceholder": "Please enter or select tags, press Enter to confirm input",
        "statusPlaceholder": "Please select status",
        "descriptionPlaceholder": "Limit input to 20000 characters, supports markdown syntax",
        "externalDocsUrlPlaceholder": "Enter external documentation link",
        "externalDocsDescPlaceholder": "Enter external documentation description"
      },
      "labels": {
        "summary": "API Name",
        "operationId": "Operation ID",
        "owner": "API Owner",
        "service": "Service",
        "tags": "Tags",
        "status": "Status",
        "deprecated": "Deprecated",
        "description": "Description",
        "externalDocs": "External Documentation"
      },
      "actions": {
        "save": "Save",
        "cancel": "Cancel",
        "nextStep": "Next Step"
      },
      "tips": {
        "duplicateApi": "Note: APIs under the same service cannot be duplicated, i.e., the combination of request method and API path (excluding query parameters) must be unique.",
        "tagsDescription": "Tags are used as additional metadata for API grouping.",
        "externalDocsDescription": "Reference external resources as extensions to current API documentation.",
        "releasedApiNotEditable": "Released APIs cannot be modified"
      },
      "validation": {
        "summaryRequired": "Please enter API name, within 100 characters",
        "ownerRequired": "Please select API owner",
        "serviceRequired": "Please select service",
        "statusRequired": "Please select status"
      },
      "messages": {
        "saveSuccess": "Saved successfully"
      },
      "options": {
        "normal": "Normal",
        "deprecated": "Deprecated"
      },
      "debug": {
        "example": "Debug Example"
      }
    },
    "apiUnarchivedrSave": {
      "form": {
        "summaryPlaceholder": "Please enter API name, within 40 characters",
        "descriptionPlaceholder": "Limit input to 20000 characters, supports markdown syntax"
      },
      "labels": {
        "summary": "API Name",
        "description": "Description"
      },
      "actions": {
        "save": "Save",
        "cancel": "Cancel"
      },
      "tips": {
        "unarchivedApiDescription": "Unarchived APIs are temporary debugging interfaces for users, only visible to the user who added them"
      },
      "validation": {
        "summaryRequired": "Please enter API name, within 100 characters"
      },
      "messages": {
        "saveSuccess": "Saved successfully"
      }
    },
    "apiUpload": {
      "actions": {
        "selectFile": "Select File"
      },
      "messages": {
        "fileSizeLimit": "Total upload file size cannot exceed 100MB during debugging"
      }
    },
    "apiWebSocket": {
      "form": {
        "uriPlaceholder": "Enter URI",
        "searchMessagePlaceholder": "Search messages",
        "allMessagesPlaceholder": "All messages"
      },
      "labels": {
        "sendMessage": "Send Message",
        "queryParams": "Query Parameters",
        "requestHeader": "Request Header",
        "settings": "Settings",
        "responseMessage": "Response Messages"
      },
      "actions": {
        "disconnect": "Disconnect",
        "connect": "Connect",
        "save": "Save",
        "saveToUnarchived": "Save to Unarchived",
        "archive": "Archive",
        "copyUrl": "Copy URL",
        "send": "Send",
        "clear": "Clear"
      },
      "navigation": {
        "saveToUnarchived": "Save to Unarchived",
        "save": "Save",
        "archiveToService": "Archive to Service",
        "variable": "Variable",
        "agent": "Agent"
      },
      "messages": {
        "updateApiSuccess": "API updated successfully",
        "copyUrlSuccess": "URL copied successfully",
        "connectionFailed": "Connection failed",
        "sendFailed": "Send failed",
        "closeFailed": "Close failed",
        "invalidUrl": "Please enter a valid URL"
      },
      "status": {
        "connected": "Connected"
      },
      "options": {
        "receiveMessage": "Receive Message",
        "sendMessage": "Send Message"
      }
    },
    "webSocketServer": {
      "labels": {
        "current": "Current",
        "public": "Public",
        "mock": "Mock",
        "history": "History"
      }
    },
    "webSocketSetting": {
      "form": {
        "connectTimeout": {
          "label": "Connection Timeout",
          "description": "Maximum wait time for client and server to establish connection",
          "placeholder": "Please enter timeout time",
          "unit": "ms"
        },
        "maxReconnections": {
          "label": "Reconnection Count",
          "description": "Number of reconnection attempts when connection is closed, maximum 10 times allowed",
          "placeholder": "Please enter reconnection count"
        },
        "reconnectionInterval": {
          "label": "Reconnection Interval",
          "description": "Retry interval when connection fails, default 200ms, maximum allowed time is 30 minutes",
          "placeholder": "Please enter reconnection interval",
          "unit": "ms"
        }
      },
      "validation": {
        "connectTimeout": "Please enter timeout time",
        "maxReconnections": "Please enter reconnection count",
        "reconnectionInterval": "Please enter reconnection interval time"
      }
    },
    "webSocketMsg": {
      "types": {
        "send": "Send Request",
        "receive": "Receive Message",
        "connect": "Connection Success",
        "close": "Connection Closed",
        "closeErr": "Close Failed",
        "sendErr": "Send Failed",
        "connectErr": "Connection Failed"
      }
    },
    "webSocketSave": {
      "form": {
        "summary": {
          "label": "API Name",
          "placeholder": "Please enter API name, within 40 characters",
          "validation": "Please enter API name, within 100 characters"
        },
        "operationId": {
          "label": "Code",
          "placeholder": "Please enter code, within 40 characters"
        },
        "ownerId": {
          "label": "API Owner",
          "placeholder": "Please select API owner",
          "validation": "Please select API owner"
        },
        "serviceId": {
          "label": "Service",
          "placeholder": "Please select service",
          "validation": "Please select service"
        },
        "tags": {
          "label": "Tags",
          "placeholder": "Please enter or select tags, press Enter to confirm",
          "description": "Tags are used as additional metadata for API grouping."
        },
        "status": {
          "label": "Status",
          "validation": "Please select status"
        },
        "deprecated": {
          "label": "Deprecated",
          "options": {
            "normal": "Normal",
            "deprecated": "Deprecated"
          }
        },
        "description": {
          "label": "Description",
          "placeholder": "Limit input to 200 characters"
        }
      },
      "actions": {
        "save": "Save",
        "cancel": "Cancel"
      },
      "messages": {
        "protocolWarning": "WebSocket protocol must start with ws:// or wss://",
        "addSuccess": "API added successfully",
        "updateSuccess": "API updated successfully",
        "releasedWarning": "Released APIs cannot be modified"
      }
    },
    "webSocketSaveUnarchived": {
      "hints": {
        "unarchivedDescription": "Unarchived APIs are temporary debugging interfaces for users, only visible to the user who added them"
      },
      "form": {
        "summary": {
          "label": "API Name",
          "placeholder": "Please enter API name, within 40 characters",
          "validation": "Please enter API name, within 100 characters"
        },
        "description": {
          "label": "Description",
          "placeholder": "Limit input to 200 characters"
        }
      },
      "messages": {
        "protocolWarning": "WebSocket protocol must start with ws:// or wss://",
        "addSuccess": "API added successfully",
        "updateSuccess": "API updated successfully"
      }
    },
    "webSocketForm": {
      "placeholder": {
        "parameterName": "Parameter Name",
        "inputParameterName": "Enter parameter name",
        "inputParameterValue": "Enter parameter value",
        "inputParameterDescription": "Enter parameter description"
      }
    },
    "authSetting": {
      "hints": {
        "authDescription": "Grant operation permissions for specified \"projects, services, interfaces\" to users, departments, and groups. When granting permissions, \"view\" permission is required. Users can only authorize projects/services/interfaces for which they have authorization permissions."
      },
      "tabs": {
        "user": "User",
        "dept": "Department",
        "group": "Group"
      },
      "placeholder": {
        "searchDept": "Search department",
        "searchGroup": "Search group",
        "searchUser": "Search user"
      },
      "loading": {
        "tip": "Loading..."
      },
      "actions": {
        "selectAll": "Select All"
      }
    },
    "groupApiDetail": {
      "columns": {
        "id": "ID",
        "summary": "Name",
        "operationId": "Code",
        "source": "Source",
        "status": "Status",
        "auth": "Permission",
        "deprecated": "Deprecated",
        "createdByName": "Creator",
        "ownerName": "Owner",
        "tags": "Tags",
        "createdDate": "Created Date",
        "lastModifiedDate": "Last Modified Date",
        "description": "Description",
        "securityTitle": "Security Requirements",
        "externalDocsTitle": "External Documentation"
      },
      "messages": {
        "selectApiFirst": "Please select an API first to view details"
      },
      "auth": {
        "hasPermission": "Has permission restrictions",
        "noPermission": "No permission restrictions"
      },
      "deprecated": {
        "yes": "Yes",
        "no": "No"
      },
      "placeholder": {
        "noData": "--"
      },
      "modal": {
        "title": "API Permission",
        "onTips": "After enabling \"has permission control\", you need to manually authorize service permissions to have corresponding API operation permissions. \"Has permission control\" is enabled by default. Note: If the authorized object does not have parent service permissions, view permissions will be automatically granted.",
        "offTips": "After enabling \"no permission control\", all users will be allowed to publicly view and operate the current API. Users viewing the API must also have current API parent or service permissions."
      }
    },
    "ApiMock": {
      "columns": {
        "id": "ID",
        "name": "Name",
        "mockServiceId": "Service ID",
        "mockServiceName": "Service Name",
        "mockServiceHostUrl": "Service URL",
        "createdBy": "Creator",
        "createdDate": "Created Date"
      },
      "messages": {
        "createSuccess": "Mock API created successfully",
        "associateSuccess": "Associated successfully",
        "cancelAssociateSuccess": "Association cancelled successfully"
      },
      "stats": {
        "requestNum": "Request Count",
        "pushbackNum": "Pushback Count",
        "simulateErrorNum": "Simulated Error Count",
        "successNum": "Success Count",
        "exceptionNum": "Exception Count"
      },
      "actions": {
        "cancelAssociate": "Cancel Association"
      },
      "tooltips": {
        "copy": "Copy"
      },
      "hints": {
        "selectMockServiceFirst": "Please select a Mock service first to generate or associate Mock API.",
        "generateMockApi": "Generate Mock API based on current API.",
        "associateMockApi": "Associate with existing API under Mock service."
      },
      "options": {
        "generateMockApi": "Generate Mock API",
        "associateMockApi": "Associate Mock API"
      },
      "placeholder": {
        "selectMockService": "Please select Mock service",
        "selectMockApi": "Please select Mock API",
        "inputMockApiName": "Please enter corresponding Mock API name, current API name will be used by default if not specified"
      },
      "buttons": {
        "confirm": "Confirm"
      }
    },
    "serviceDetail": {
      "columns": {
        "id": "ID",
        "name": "Name",
        "parentName": "Parent Project",
        "source": "Source",
        "status": "Status",
        "auth": "Permission",
        "apisNum": "API Count",
        "apisCaseNum": "Case Count",
        "createdByName": "Creator",
        "createdDate": "Created Date",
        "lastModifiedDate": "Last Modified Date",
        "securityTitle": "Security Requirements"
      },
      "placeholder": {
        "nameInput": "Within 100 characters"
      },
      "hints": {
        "maxApis": "Maximum 2000 supported"
      },
      "auth": {
        "hasPermission": "Has permission restrictions",
        "noPermission": "No permission restrictions"
      },
      "modal": {
        "projectPermission": "Project Permission",
        "servicePermission": "Service Permission"
      },
      "tips": {
        "project": {
          "on": "After enabling \"has permission control\", you need to manually authorize project permissions to have corresponding project operation permissions. \"Has permission control\" is enabled by default. Note: Authorizing projects will not authorize API permissions under the project.",
          "off": "After enabling \"no permission control\", all users under the account will be allowed to publicly view and operate projects and APIs under the project."
        },
        "service": {
          "on": "After enabling \"has permission control\", you need to manually authorize service permissions to have corresponding project operation permissions. \"Has permission control\" is enabled by default. Note: Authorizing projects will not authorize API permissions under the service. If the authorized object does not have parent project permissions, view permissions will be automatically granted.",
          "off": "After enabling \"no permission control\", all users under the account will be allowed to publicly view and operate services and APIs under the service."
        }
      }
    },
    "mockService": {
      "columns": {
        "name": "Name",
        "serviceDomainUrl": "Service URL",
        "servicePort": "Port",
        "nodeName": "Node",
        "status": "Status",
        "auth": "Permission",
        "createdByName": "Creator",
        "createdDate": "Created Date"
      },
      "stats": {
        "apisNum": "API Count",
        "requestNum": "Request Count",
        "pushbackNum": "Pushback Count",
        "simulateErrorNum": "Simulated Error Count",
        "successNum": "Success Count",
        "exceptionNum": "Exception Count"
      },
      "actions": {
        "cancelAssociate": "Cancel Association",
        "generate": "Generate",
        "associate": "Associate",
        "copy": "Copy"
      },
      "messages": {
        "associateSuccess": "Associated successfully",
        "cancelAssociateSuccess": "Association cancelled successfully"
      },
      "options": {
        "generateMockService": "Generate Mock Service",
        "associateMockService": "Associate Mock Service"
      },
      "hints": {
        "generateMockService": "Generate Mock service based on current service.",
        "associateMockService": "Associate current service with existing Mock service."
      },
      "auth": {
        "hasPermission": "Has permission restrictions",
        "noPermission": "No permission restrictions"
      },
      "modal": {
        "title": "Mock Service Permission",
        "onTips": "After enabling permission control, you need to manually authorize to have corresponding operation permissions.",
        "offTips": "No permission restrictions, all users in the account can view and operate, permission control is not enabled by default.",
        "associateTitle": "Associate Mock Service"
      },
      "form": {
        "title": "Generate Mock Service",
        "name": "Name",
        "namePlaceholder": "Service identification naming information, maximum 100 characters allowed",
        "domain": "Domain",
        "domainPlaceholder": "After setting a domain for the service, you can access Mock APIs through the domain",
        "port": "Port",
        "portPlaceholder": "Port that the service listens on, cannot be modified after service is added (1~65535)",
        "node": "Node",
        "nodePlaceholder": "Node where the service runs, cannot be modified after service is added",
        "service": "Service",
        "servicePlaceholder": "Select or search service",
        "api": "API",
        "domainSuffix": ".angusmock.cloud",
        "nodeFormat": "{name} ( {ip} )",
        "serviceFormat": "S"
      },
      "validation": {
        "nameRequired": "Please enter name",
        "domainRequired": "Please enter domain",
        "domainInvalid": "Please enter correct domain",
        "portRequired": "Please enter port (1~65535)",
        "nodeRequired": "Please select node"
      },
      "buttons": {
        "cancel": "Cancel",
        "confirm": "Confirm"
      },
      "placeholder": {
        "selectMockService": "Please select Mock service"
      },
      "description": {
        "title": "Mock services can quickly generate and simulate APIs you depend on, enabling parallel development and testing, thereby accelerating development speed, achieving more comprehensive testing, and delivering stable products or applications earlier. You can create corresponding simulated interfaces for current service APIs through two methods: \"Generate Mock Service\" or \"Associate Mock Service\". These simulated interfaces will provide mock data for API debugging and testing.",
        "generateMockService": "Create new Mock service based on current service APIs. After creation, you can use these Mock APIs for data simulation and state testing, achieving more efficient API debugging.",
        "associateMockService": "Associate current service with existing Mock service. After association, the system will automatically generate corresponding Mock APIs in the associated Mock service. These APIs can be used for data simulation and state testing in API debugging."
      }
    },
    "serviceOpenApi": {
      "columns": {
        "title": "Name",
        "summary": "Summary",
        "openapi": "OpenAPI",
        "termsOfService": "Terms of Service",
        "contact": "Contact",
        "license": "License",
        "version": "Document Version",
        "externalDocs": "External Documentation",
        "description": "Description"
      },
      "placeholder": {
        "title": "Within 100 characters",
        "summary": "Within 400 characters",
        "termsOfService": "Within 800 characters",
        "contactName": "Name (within 100 characters)",
        "contactEmail": "Email",
        "contactUrl": "URL",
        "licenseName": "Name (within 100 characters)",
        "licenseUrl": "URL",
        "version": "Within 100 characters",
        "externalDocsUrl": "URL",
        "externalDocsDescription": "Description (within 800 characters)"
      },
      "tooltips": {
        "view": "View"
      }
    },
    "serviceTestDetail": {
      "hints": {
        "testEnableDescription": "Only after API testing is enabled will testing be marked as a mandatory activity, and test results will be included in the overall analysis. This ensures comprehensive and accurate test coverage. You can enable API testing in the following two ways:",
        "singleApiEnable": "1. Single API Enable: Go to API debug page -> Select \"API Metrics\" in the right tab bar -> Enable corresponding options for required test types.",
        "batchEnable": "2. Batch Enable: Find the target service in the service list -> Right-click and select \"Enable or Disable Testing\" -> Batch operate all API tests under the service."
      },
      "stats": {
        "progressRate": "API Test Progress",
        "totalApis": "Total APIs",
        "enabledTestApis": "Enabled Test APIs"
      },
      "title": {
        "testDetail": "API Test Details"
      },
      "chart": {
        "testApiStats": "Test API Statistics",
        "testTypeStats": "API Test Type Statistics",
        "tested": "Tested",
        "unTested": "Untested",
        "testPassed": "Test Passed",
        "unPassed": "Failed",
        "totalTestNum": "Total Tests",
        "functionalTest": "Functional Test",
        "performanceTest": "Performance Test",
        "stabilityTest": "Stability Test"
      },
      "columns": {
        "functionalTest": "Functional Test",
        "performanceTest": "Performance Test",
        "stabilityTest": "Stability Test"
      },
      "status": {
        "passed": "Passed",
        "passed_": "Passed",
        "unpassed": "Failed",
        "unTested": "Untested",
        "notEnabled": "Not Enabled",
        "notTested": "Not Tested",
        "partiallyPassed": "Partially Passed"
      },
      "placeholder": {
        "searchName": "Search name"
      }
    },
    "groupHeader": {
      "placeholder": {
        "searchApi": "Search API ID, name, path"
      },
      "sort": {
        "title": "Sort",
        "byCreatedDate": "By Created Date",
        "byName": "By Name",
        "byCreatedBy": "By Creator"
      },
      "group": {
        "title": "Group",
        "noGroup": "No Group",
        "byCreatedBy": "Group by Creator",
        "byMethod": "Group by Method",
        "byOwner": "Group by Owner",
        "byTag": "Group by Tag"
      },
      "actions": {
        "addHttpApi": "Add HTTP API",
        "addWebSocketApi": "Add WebSocket API",
        "serverConfig": "Server Config",
        "authConfig": "Auth Config",
        "refresh": "Refresh"
      }
    },
    "apiList": {
      "messages": {
        "cloneSuccess": "Cloned successfully",
        "deleteConfirm": "Deleting the API will also delete associated follows, favorites, metrics, variables and other information. Please confirm deletion?",
        "deleteSuccess": "Deleted successfully, you can view the deleted API in the recycle bin",
        "favouriteSuccess": "Favourited successfully",
        "unfavouriteSuccess": "Unfavourited successfully",
        "followSuccess": "Followed successfully",
        "unfollowSuccess": "Unfollowed successfully",
        "execSuccess": "Executed successfully"
      },
      "test": {
        "functionalTest": "Functional Test",
        "performanceTest": "Performance Test",
        "stabilityTest": "Stability Test",
        "notEnabled": "Not Enabled",
        "passed": "Passed",
        "unPassed": "Failed",
        "notTested": "Not Tested"
      },
      "buttons": {
        "edit": "Edit",
        "clone": "Clone",
        "delete": "Delete",
        "mockApi": "Mock API",
        "follow": "Follow",
        "unfollow": "Unfollow",
        "favourite": "Favourite",
        "unfavourite": "Unfavourite",
        "move": "Move",
        "permission": "Permission",
        "export": "Export",
        "modifyStatus": "Modify Status",
        "testScript": "Test Script",
        "generateTestScript": "Generate Test Script",
        "deleteTestScript": "Delete Test Script",
        "execTest": "Execute Test",
        "execFuncTest": "Execute Functional Test",
        "execPerfTest": "Execute Performance Test",
        "execStabilityTest": "Execute Stability Test",
        "testTask": "Test Task",
        "generateTestTask": "Generate Test Task",
        "restartTestTask": "Restart Test Task",
        "reopenTestTask": "Reopen Test Task",
        "deleteTestTask": "Delete Test Task"
      },
      "tips": {
        "generateTestScript": "Generate functional, performance and stability test scripts for the API.",
        "deleteTestScript": "Delete functional, performance and stability test scripts for the API.",
        "generateTestTask": "Generate functional, performance and stability test tasks.",
        "restartTestTask": "Update task to 'Pending', related statistics and status will be cleared.",
        "reopenTestTask": "Update task status to 'Pending', without clearing statistics and status.",
        "deleteTestTask": "Delete functional, performance and stability test tasks for the API, including test scripts."
      },
      "confirm": {
        "restartTestTask": "Update the API test task to \"Pending\", related statistics and status will be cleared. Do you confirm to restart the test task 【{summary}】?",
        "reopenTestTask": "Update the API test task to \"Pending\", without clearing statistics and status. Do you confirm to reopen the test task 【{summary}】?"
      },
      "execTest": {
        "tips": {
          "funcTestExec": "Execute current API functional test. If test script doesn't exist, it will automatically generate functional test script based on the API. If it exists, it will start the corresponding functional test script.",
          "perfTestExec": "Execute current API performance test. If test script doesn't exist, it will automatically generate performance test script based on the API. If it exists, it will start the corresponding performance test script.",
          "stabilityTestExec": "Execute current API stability test. If test script doesn't exist, it will automatically generate stability test script based on the API. If it exists, it will start the corresponding stability test script."
        },
        "titles": {
          "funcTestExec": "Execute Functional Test",
          "perfTestExec": "Execute Performance Test",
          "stabilityTestExec": "Execute Stability Test"
        }
      },
      "template": {
        "other": "Other",
        "auth": {
          "title": "API Permission",
          "onTips": "After enabling \"Permission Control\", you need to manually authorize service permissions to have corresponding API operation permissions. Permission control is enabled by default. Note: If the authorized object does not have parent project/service permissions, view permissions will be automatically granted.",
          "offTips": "After enabling \"No Permission Control\", all users will be allowed to publicly view and operate the current API. Users viewing the API must also have parent project or service permissions."
        },
        "testTask": {
          "infoText": "Generate corresponding task when API test task doesn't exist. If task already exists, it will override current test information.",
          "funcTest": "Functional Test",
          "perfTest": "Performance Test",
          "stabilityTest": "Stability Test"
        }
      }
    },
    "serviceExecTest": {
      "title": "Execute Test",
      "serverConfig": {
        "label": "Server Configuration",
        "options": {
          "useDefault": "Use Default (Server configuration when generating interface scripts)",
          "modifyVariables": "Modify Variable Configuration (Modifications will update to interface and dynamic HTTP extraction variables)"
        }
      },
      "placeholder": {
        "selectServer": "Please select server"
      },
      "labels": {
        "noVariables": "No Variables",
        "noDescription": "No Description",
        "variables": "Variables",
        "name": "Name",
        "value": "Value",
        "description": "Description",
        "default": "Default",
        "url": "URL"
      },
      "buttons": {
        "more": "More"
      }
    }
  },
  "apiShare": {
    "name": "Share",
    "title": "Share",
    "addShare": "Add Share",
    "shareList": "Share List",
    "shareDetails": "Share Details",
    "shareEdit": "Share Edit",
    "editShare": "Edit Share",
    "form": {
      "name": "Share Name",
      "namePlaceholder": "Enter share name, maximum 100 characters",
      "remark": "Share Remark",
      "remarkPlaceholder": "Please enter share remark, will be displayed in share information, maximum 400 characters",
      "expiredDate": "Expiration Date",
      "expiredDateHint": "Permanently valid when not specified.",
      "displayOptions": "Display Options",
      "includeServiceInfo": "Show Service Description",
      "allowDebug": "Allow Debug",
      "fieldStyle": "Field Style",
      "shareScope": "Share Scope",
      "selectService": "Select Service",
      "selectServicePlaceholder": "Select service",
      "apis": "APIs",
      "selectApiPlaceholder": "Select API",
      "selectedApis": "Selected {count} APIs"
    },
    "schemaStyle": {
      "table": "Table",
      "tree": "Tree"
    },
    "messages": {
      "copySuccess": "Share information successfully copied to clipboard",
      "addSuccess": "Share successful",
      "editSuccess": "Share successful",
      "deleteSuccess": "Delete successful",
      "copyToClipboardSuccess": "Successfully copied to clipboard"
    },
    "list": {
      "title": "Added Shares",
      "noData": "No shares added yet, ",
      "addShare": "Add Share",
      "noRemark": "None~",
      "expired": "Expired",
      "notExpired": "Not Expired",
      "copy": "Copy",
      "edit": "Edit",
      "delete": "Delete",
      "confirmDelete": "Are you sure to delete share 【{name}】?",
      "columns": {
        "name": "Name",
        "status": "Status",
        "sharePerson": "Share Person",
        "shareScope": "Share Scope",
        "expiredDate": "Expiration Date",
        "shareDate": "Share Date",
        "viewCount": "View Count",
        "remark": "Remark",
        "lastModifiedBy": "Last Modified By",
        "lastModifiedTime": "Last Modified Time",
        "actions": "Actions"
      }
    },
    "searchPanel": {
      "title": "Quick Search",
      "addShare": "Add Share",
      "refresh": "Refresh",
      "menuItems": {
        "all": "All",
        "myShares": "My Shares",
        "lastDay": "Last Day",
        "lastThreeDays": "Last 3 Days",
        "lastWeek": "Last Week"
      },
      "searchOptions": {
        "namePlaceholder": "Search name, remark",
        "sharePersonPlaceholder": "Select share person",
        "dateRangePlaceholder": [
          "Add time from",
          "Add time to"
        ]
      }
    },
    "introduce": {
      "title": "About Sharing",
      "description": "When you need to integrate interfaces with external partners, customers, or other teams, you can use the \"Share\" feature to pass interface information to them, simplifying the communication process. Sharing includes detailed interface description information, including interface servers, authentication, interface addresses, request formats, and response formats, ensuring everyone has a consistent understanding of the interface."
    }
  },
  "appConfig": {
    "name": "Application Configuration",
    "title": "Application Configuration",
    "labels": {
      "name": "Name",
      "domain": "Domain"
    },
    "tabs": {
      "member": "Application Members",
      "quota": "Application Quota",
      "permission": "License Information"
    },
    "permitInfo": {
      "columns": {
        "editionType": "Edition Type",
        "goodsCode": "Product Code",
        "provider": "Provider",
        "issuer": "Issuer",
        "holder": "Holder",
        "licenseNo": "License Number",
        "beginDate": "License Issue Date",
        "endDate": "License Expiry Date",
        "signature": "License Certificate MD5 Signature"
      },
      "remainingDays": "Remaining {days} days"
    },
    "addMembers": {
      "title": {
        "user": "Add User",
        "dept": "Add Department",
        "group": "Add Group"
      },
      "labels": {
        "selectUser": "Select User",
        "selectDept": "Select Department",
        "selectGroup": "Select Group",
        "selectPolicy": "Select Policy"
      },
      "placeholders": {
        "selectPolicy": "Select Policy"
      }
    },
    "scrollMembers": {
      "buttons": {
        "addMember": "Add Member",
        "addDept": "Add Department",
        "addGroup": "Add Group",
        "authorizePolicy": "Authorize Policy"
      },
      "placeholders": {
        "searchMember": "Search Member",
        "searchDept": "Search Department",
        "searchGroup": "Search Group",
        "searchPolicy": "Search Policy Name"
      },
      "hints": "Assign specific functional menu permissions to project members to clarify each member's scope of responsibility in the project. Only system administrators and application administrators can add application members and authorize permission policy operations.",
      "table": {
        "columns": {
          "policyId": "Policy ID",
          "policyName": "Policy Name",
          "policyCode": "Policy Code",
          "policyDescription": "Policy Description",
          "policySource": "Policy Source",
          "joinTime": "Join Time",
          "action": "Action"
        },
        "actions": {
          "cancelAuth": "Cancel Authorization"
        },
        "sources": {
          "appDefault": "Application Default Authorization",
          "openAuth": "Open Authorization"
        }
      }
    },
    "quota": {
      "hints": "If you need to extend resource quotas, you can submit a work order to contact the work order engineer to help you!",
      "table": {
        "columns": {
          "resourceName": "Resource Name",
          "quotaKey": "Quota Key",
          "currentQuota": "Current Quota",
          "defaultQuota": "Default Quota",
          "maxQuota": "Maximum Quota"
        }
      }
    },
    "policyModal": {
      "title": "Authorize Policy",
      "placeholders": {
        "searchPolicy": "Search Policy Name"
      },
      "table": {
        "headers": {
          "id": "ID",
          "name": "Name",
          "code": "Code",
          "description": "Description",
          "status": "Status"
        },
        "status": {
          "enabled": "Enabled",
          "disabled": "Disabled"
        }
      },
      "actions": {
        "selectAll": "Select All"
      }
    }
  },
  "apiTrash": {
    "name": "Trash",
    "title": "Trash",
    "searchPlaceholder": "Please enter search keywords",
    "tips": {
      "adminOnly": "Only administrators and deleters can restore or permanently delete trash data."
    },
    "buttons": {
      "recoverAll": "Restore All",
      "deleteAll": "Delete All",
      "refresh": "Refresh"
    },
    "stats": {
      "items": "Items"
    },
    "filters": {
      "title": "Filter",
      "all": "All"
    },
    "confirm": {
      "delete": "Are you sure you want to delete this item?",
      "deleteAll": "Are you sure you want to delete all items?"
    },
    "messages": {
      "recoverSuccess": "Restored successfully",
      "deleteSuccess": "Deleted successfully",
      "recoverAllSuccess": "All items restored successfully",
      "deleteAllSuccess": "All items deleted successfully"
    },
    "empty": {
      "description": "No items in trash",
      "hint": "Deleted items will appear here, you can restore or permanently delete them"
    },
    "tabs": {
      "service": "Service",
      "api": "API"
    },
    "table": {
      "columns": {
        "name": "Name",
        "createdBy": "Creator",
        "deletedBy": "Deleter",
        "deletedDate": "Delete Time",
        "action": "Actions"
      },
      "actions": {
        "recover": "Restore",
        "delete": "Delete"
      }
    }
  }
}
